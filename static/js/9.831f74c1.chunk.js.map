{"version":3,"sources":["nft/components/layout/Checkbox.tsx","nft/components/layout/Input.tsx","nft/components/collection/CollectionNfts.css.ts","nft/components/layout/Checkbox.css.ts","nft/components/collection/FilterButton.tsx","nft/components/collection/FilterButton.css.ts","nft/components/collection/shared.tsx","../node_modules/react-feather/dist/icons/link.js","../node_modules/react-feather/dist/icons/twitter.js","nft/components/profile/list/shared.tsx","nft/components/profile/list/Modal/BelowFloorWarningModal.tsx","nft/components/profile/list/utils.ts","nft/components/profile/list/Modal/ListModalSection.tsx","nft/components/profile/list/ListingButton.tsx","nft/components/profile/list/Modal/ContentRow.tsx","nft/components/profile/list/SetDurationModal.tsx","nft/components/profile/list/Modal/SuccessScreen.tsx","nft/components/profile/list/Modal/ListModal.tsx","nft/components/profile/list/Dropdown.tsx","nft/components/profile/list/PriceTextInput.tsx","nft/components/profile/list/RoyaltyTooltip.tsx","nft/components/profile/list/MarketplaceRow.tsx","nft/components/profile/list/NFTListRow.tsx","nft/components/profile/list/NFTListingsGrid.tsx","nft/components/profile/list/SelectMarketplacesDropdown.tsx","nft/components/profile/list/ListPage.tsx","../node_modules/react-window-infinite-loader/dist/index.esm.js","nft/components/profile/view/FilterSidebar.tsx","nft/components/profile/view/ProfilePage.css.ts","nft/components/profile/view/ProfilePageLoadingSkeleton.tsx","nft/components/profile/view/ViewMyNftsAsset.tsx","nft/components/profile/view/ProfilePage.tsx","nft/pages/profile/profile.tsx","nft/pages/profile/shared.ts"],"names":["Checkbox","hovered","children","props","as","display","alignItems","position","overflow","cursor","lineHeight","borderColor","checked","className","styles","background","undefined","type","clsx","Input","forwardRef","ref","default","focus","borderWidth","borderStyle","borderRadius","padding","fontSize","color","placeholder","backgroundColor","displayName","NumericInput","inputMode","autoComplete","onInput","v","currentTarget","value","isNumber","parseFloat","assetList","input","checkbox","checkMark","checkMarkActive","FilterButton","onClick","isMobile","isFiltersExpanded","collectionCount","hideResultsCount","window","innerWidth","breakpoints","sm","md","Box","gap","width","height","whiteSpace","buttonTextMedium","putCommas","pluralize","ClearAllButton","styled","button","theme","textTertiary","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Link","_ref","_ref$color","_ref$size","size","rest","React","createElement","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","propTypes","PropTypes","string","oneOfType","number","Twitter","SetPriceMethod","WarningType","ModalWrapper","Column","Z_INDEX","modal","backgroundSurface","backgroundOutline","deepShadow","BREAKPOINTS","CloseIconWrapper","div","CloseIcon","X","HazardIconWrap","ContinueButton","ButtonPrimary","EditListings","span","accentAction","BelowFloorWarningModal","listingsBelowFloor","closeModal","startListing","useTheme","Portal","accentCritical","HeadlineSmall","textAlign","BodyPrimary","price","floorPrice","toFixed","e","preventDefault","stopPropagation","Overlay","RemoveIconWrap","TitleRow","Row","approveCollectionRow","collectionRow","signer","setCollectionStatusAndCallback","callback","ListingStatus","SIGNING","marketplace","collectionAddress","nftStandard","addresses","addressesByNetwork","SupportedChainId","MAINNET","spender","name","OPENSEA_CROSS_CHAIN_CONDUIT","NftStandard","Erc721","LOOKSRARE_MARKETPLACE_CONTRACT_721","LOOKSRARE_MARKETPLACE_CONTRACT_1155","X2Y2_TRANSFER_CONTRACT_721","X2Y2_TRANSFER_CONTRACT_1155","TRANSFER_MANAGER_ERC721","approveCollection","newStatus","signListingRow","listing","provider","getLooksRareNonce","setLooksRareNonce","setListingStatusAndCallback","looksRareNonce","asset","signListing","getTotalEthValue","sellAssets","total","reduce","newListings","maxListing","a","b","maxFee","fee","LOOKS_RARE_CREATOR_BASIS_POINTS","basisPoints","Math","round","Number","EPSILON","useSubscribeListingState","useSellAsset","state","useNFTList","setListings","setCollectionsRequiringApproval","shallow","useEffect","newCollectionsToApprove","forEach","marketplaces","newListing","images","smallImageUrl","icon","tokenId","status","DEFINED","find","push","some","asset_contract","address","newCollectionRow","image_url","isVerified","collectionIsVerified","tokenType","getListings","Section","getRoyalty","listingMarket","getMarketplaceFee","StyledListingButton","BaseButton","showResolveIssues","accentFailure","accentTextLightPrimary","missingPrices","ListingButton","toggleShowResolveIssues","issues","setIssues","useState","showWarning","setShowWarning","useIsMobile","useMemo","missingExpiration","expirationTime","isNaN","Date","now","overMaxExpiration","listingsMissingPrice","listingsAboveSellOrderFloor","overrideFloorPrice","floor_sell_order_price","Erc1155","findListingIssues","foundIssues","ContentColumn","failed","opacify","ContentRowWrapper","active","CollectionIcon","img","AssetIcon","MarketplaceIcon","ContentName","ThemedText","SubHeaderSmall","textPrimary","ProceedText","textSecondary","FailedText","StyledVerifiedIcon","VerifiedIcon","IconWrapper","ButtonRow","failedButtonStyle","css","RemoveButton","accentTextDarkPrimary","RetryButton","backgroundInteractive","ContentRow","row","isCollectionApprovalSection","removeRow","rowRef","useRef","FAILED","REJECTED","current","scroll","APPROVED","src","PENDING","accentSuccess","justify","SectionHeader","SectionTitle","SubHeader","approved","SectionArrow","ChevronUpIcon","TRANSITION_DURATIONS","medium","SectionBody","colors","gray650","ScrollBarStyles","StyledInfoIcon","Info","ContentRowContainer","Duration","ErrorState","ListModalSection","sectionType","content","toggleSection","removeAssetMarketplace","allContentApproved","APPROVE","uniqueCollections","collections","map","collection","Set","listingRow","marginLeft","secondaryColor","marginBottom","Caption","text","SuccessImage","numImages","SuccessImageWrapper","ProceedsColumn","buttonStyle","ReturnButton","TweetButton","TweetRow","SuccessScreen","overlayClick","nativeCurrency","useNativeCurrency","totalEthListingValue","parsedAmount","tryParseCurrencyAmount","toString","usdcValue","useStablecoinValue","imageUrl","align","formatEth","BodySmall","formatCurrencyAmount","NumberType","FiatTokenPrice","flexWrap","location","reload","href","generateTweetForList","rel","ListModalWrapper","ListModal","useWeb3React","getSigner","trace","useTrace","InterfaceModalName","NFT_LISTING","collectionsRequiringApproval","listings","useReducer","s","SIGN","openSection","toggleOpenSection","usdcAmount","allCollectionsApproved","every","allListingsApproved","signListings","sendAnalyticsEvent","NFTEventName","NFT_LISTING_COMPLETED","signatures_approved","filter","list_quantity","usd_value","closeModalOnClick","useCallback","DropdownWrapper","$width","DropdownRow","Dropdown","dropDownOptions","option","displayText","isSelected","PriceTextInputWrapper","InputWrapper","CurrencyWrapper","listPrice","GlobalPriceIcon","WarningRow","WarningMessage","$color","WarningAction","getWarningMessage","warning","message","BELOW_FLOOR","ALREADY_LISTED","PriceTextInput","setListPrice","isGlobalPrice","setGlobalOverride","globalOverride","NONE","warningType","setWarningType","removeSellAsset","inputRef","percentBelowFloor","warningColor","red400","accentWarning","useUpdateInputAndWarnings","pattern","body","onChange","event","includes","val","FeeWrap","RoyaltyContainer","MarketIcon","FeePercent","MaxFeeContainer","RoyaltyTooltip","selectedMarkets","fees","maxRoyalty","max","market","marginRight","LastPriceInfo","lg","FloorPriceInfo","RemoveMarketplaceWrap","MarketIconsWrapper","MarketIconWrapper","index","ExpandMarketIconWrapper","FeeColumnWrapper","FeeWrapper","ReturnColumn","MarketplaceRow","globalPriceMethod","globalPrice","setGlobalPrice","removeMarket","expandMarketplaceRows","toggleExpandMarketplaceRows","rowHovered","setAssetListPrice","marketIconHovered","toggleMarketIconHovered","marketRowHovered","toggleMarketRowHovered","showGlobalPrice","SAME_PRICE","setPrice","selectedMarket","feeInEth","userReceives","useHandleGlobalPriceToggle","FLOOR_PRICE","LAST_PRICE","lastPrice","useSyncPriceWithGlobalMethod","onMouseEnter","onMouseLeave","flex","alt","placement","ethPrice","EthPriceDisplay","ethConversion","setEthConversion","fetchPrice","then","formatUsdPrice","NFTListRowWrapper","RemoveIconContainer","opacity","hover","NFTInfoWrapper","NFTImage","HideTextOverflow","TokenInfoWrapper","TokenName","CollectionName","MarketPlaceRowWrapper","NFTListRow","removeAsset","localMarkets","setLocalMarkets","toggleHovered","JSON","parse","stringify","style","oldMarket","TableHeader","backgroundBackdrop","NFTHeader","PriceHeaders","LastPriceHeader","FloorPriceHeader","DropdownAndHeaderWrapper","DropdownPromptContainer","DropdownPrompt","DropdownChevron","ChevronDown","isOpen","transition","duration","timing","fast","ease","DropdownContainer","FeeUserReceivesSharedStyles","FeeHeader","UserReceivesHeader","RowDivider","hr","NFTListingsGrid","CUSTOM","setGlobalPriceMethod","showDropdown","toggleShowDropdown","dropdownRef","useOnClickOutside","prompt","priceDropdownOptions","MarketplaceRowWrapper","MarketplaceDropdownIcon","FeeText","HeaderButtonWrap","SMALL_MEDIA_BREAKPOINT","HeaderButtonContentWrapper","totalSelected","Chevron","modalBackdrop","SelectMarketplacesDropdown","setSelectedMarkets","toggleIsOpen","dropdownDisplayText","themeVars","ListingMarkets","toggleSelected","selected","caption","isInvalid","dropdown","ErrorMessage","WarningIcon","AlertTriangle","SetDurationModal","day","setDuration","amount","setAmount","valid","errorState","setErrorState","setGlobalExpiration","durationDropdownRef","durationOptions","hour","week","month","expiration","convertDurationToExpiration","empty","overMax","flexShrink","durationFactor","ListingHeader","xs","ArrowContainer","BackArrow","ArrowLeft","TitleWrapper","ButtonsWrapper","MarketWrap","section","ListingHeaderRow","GridWrapper","FloatingConfirmationBar","LIST_PAGE_MARGIN","under_dropdown","shallowShadow","LIST_PAGE_MARGIN_MOBILE","UsdValue","ProceedsAndButtonWrapper","ProceedsWrapper","EthValueWrapper","ListPage","setSellPageState","useProfilePageState","setProfilePageState","setGlobalMarketplaces","showListModal","toggleShowListModal","startListingEventProperties","collection_addresses","token_ids","Array","from","startListingFlow","NFT_SELL_START_LISTING","getAddress","signerAddress","looksRareNonceFetcher","nonce","PAUSED","BannerText","ProfilePageStateType","VIEWING","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","possibleConstructorReturn","self","ReferenceError","InfiniteLoader","_PureComponent","_temp","_this","_len","args","_key","__proto__","getPrototypeOf","concat","_lastRenderedStartIndex","_lastRenderedStopIndex","_memoizedUnloadedRanges","_onItemsRendered","_ref2","visibleStartIndex","visibleStopIndex","_ensureRowsLoaded","_setRef","listRef","_listRef","subClass","superClass","create","constructor","setPrototypeOf","inherits","autoReload","process","onItemsRendered","startIndex","stopIndex","_props","isItemLoaded","itemCount","_props$minimumBatchSi","minimumBatchSize","_props$threshold","threshold","unloadedRanges","rangeStartIndex","rangeStopIndex","_index","potentialStopIndex","min","_index2","_index3","scanForUnloadedRanges","startOrStop","_loadUnloadedRanges","_this2","loadMoreItems","loadMoreRows","_loop","promise","lastRenderedStartIndex","lastRenderedStopIndex","isRangeVisible","resetAfterIndex","_getItemStyleCache","forceUpdate","PureComponent","ItemsContainer","LongLoadingBubble","LoadingBubble","SmallLoadingBubble","MobileMenuHeader","LoadingCollectionItem","justifyContent","paddingLeft","paddingRight","FilterSidebar","fetchNextPage","hasNextPage","isFetchingNextPage","walletCollections","collectionFilters","useWalletCollections","setCollectionFilters","useFiltersExpanded","setFiltersExpanded","sidebarX","useSpring","config","easing","easings","easeOutSine","hideSearch","WALLET_COLLECTIONS_PAGINATION_LIMIT","top","left","zIndex","transform","to","x","paddingTop","CollectionSelect","collectionSearchText","setCollectionSearchText","displayCollections","setDisplayCollections","filtered","toLowerCase","itemKey","data","CollectionFilterRow","subhead","marginTop","paddingBottom","maxHeight","disableWidth","itemSize","CollectionFilterSearch","CollectionItem","isCheckboxSelected","setCheckboxSelected","isChecked","handleCheckbox","maxWidth","overflowX","overflowY","fontWeight","image","textOverflow","minHeight","count","SkeletonPageWrapper","ScreenBreakpointsPaddings","breakpoint","SkeletonBodyWrapper","SkeletonRowWrapper","AccountDetailsSkeletonWrapper","ProfileDetailsSkeleton","FilterBarSkeletonWrapper","FilterButtonSkeleton","SellButtonSkeleton","ProfileAssetCardSkeleton","ProfileAssetCardDisplaySectionSkeleton","DEFAULT_WALLET_ASSET_QUERY_AMOUNT","_","loadingAsset","ProfileBodyLoadingSkeleton","ProfilePageLoadingSkeleton","ViewMyNftsAsset","mediaShouldBePlaying","setCurrentTokenPlayingMedia","hideDetails","selectSellAsset","cartExpanded","useBag","bagExpanded","toggleCart","toggleBag","navigate","useNavigate","item","handleSelect","NFT_SELL_ITEM_ADDED","collection_address","token_id","isDisabled","susFlag","primaryInfo","primaryInfoIcon","secondaryInfo","selectedInfo","notSelectedInfo","disabledInfo","Boolean","selectAsset","unselectAsset","onButtonClick","onCardClick","detailsHref","testId","ProfilePageColumn","ProfileHeader","EmptyStateContainer","ProfilePage","useWalletBalance","setWalletCollections","resetSellAssets","reset","getOwnerCollections","pageParam","OSCollectionsFetcher","params","asset_owner","offset","limit","res","nextPage","useInfiniteQuery","getNextPageParam","lastGroup","refetchInterval","refetchIntervalInBackground","refetchOnWindowFocus","refetchOnMount","ownerCollectionsData","isSuccess","ownerCollections","pages","page","flat","fallback","paddingX","paddingY","bottom","ProfilePageNfts","clearCollectionFilters","isBagExpanded","currentTokenPlayingMedia","useNftBalance","ownerAssets","walletAssets","loading","hasNext","loadMore","gridX","next","hasMore","loader","dataLength","CollectionFiltersRow","getCollection","handleClearAllClick","CollectionFilterItem","border","ProfilePageWrapper","LoadedAccountPage","isListingNfts","XXXL_BAG_WIDTH","Center","ConnectWalletButton","ProfileContent","sellPageState","account","accountRef","toggleWalletDrawer","useToggleAccountDrawer","LISTING","InterfacePageName","NFT_PROFILE_PAGE","shouldLogImpression","HeadlineMedium","Profile"],"mappings":"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","file":"static/js/9.831f74c1.chunk.js","sourcesContent":["import clsx from 'clsx'\r\nimport { Box } from 'nft/components/Box'\r\nimport { ApprovedCheckmarkIcon } from 'nft/components/icons'\r\nimport React from 'react'\r\n\r\nimport * as styles from './Checkbox.css'\r\n\r\ninterface CheckboxProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  hovered: boolean\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const Checkbox: React.FC<CheckboxProps> = ({ hovered, children, ...props }: CheckboxProps) => {\r\n  return (\r\n    <Box\r\n      as=\"label\"\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      position=\"relative\"\r\n      overflow=\"hidden\"\r\n      cursor=\"pointer\"\r\n      lineHeight=\"1\"\r\n    >\r\n      {children}\r\n      <Box\r\n        as=\"span\"\r\n        borderColor={props.checked || hovered ? 'accentAction' : 'gray400'}\r\n        className={styles.checkbox}\r\n        background={props.checked ? 'accentAction' : undefined}\r\n        // This element is purely decorative so\r\n        // we hide it for screen readers\r\n        aria-hidden=\"true\"\r\n      />\r\n      <input {...props} className={styles.input} type=\"checkbox\" />\r\n      <ApprovedCheckmarkIcon className={clsx(styles.checkMark, props.checked && styles.checkMarkActive)} />\r\n    </Box>\r\n  )\r\n}\r\n","import { isNumber } from 'nft/utils/numbers'\r\nimport { FormEvent, forwardRef } from 'react'\r\n\r\nimport { Box, BoxProps } from '../Box'\r\n\r\nexport const Input = forwardRef<HTMLInputElement, BoxProps>((props, ref) => (\r\n  <Box\r\n    ref={ref}\r\n    as=\"input\"\r\n    borderColor={{ default: 'backgroundOutline', focus: 'textSecondary' }}\r\n    borderWidth=\"1px\"\r\n    borderStyle=\"solid\"\r\n    borderRadius=\"12\"\r\n    padding=\"12\"\r\n    fontSize=\"14\"\r\n    color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\r\n    backgroundColor=\"transparent\"\r\n    {...props}\r\n  />\r\n))\r\n\r\nInput.displayName = 'Input'\r\n\r\nexport const NumericInput = forwardRef<HTMLInputElement, BoxProps>((props, ref) => {\r\n  return (\r\n    <Box\r\n      ref={ref}\r\n      as=\"input\"\r\n      inputMode=\"decimal\"\r\n      autoComplete=\"off\"\r\n      type=\"text\"\r\n      borderColor={{ default: 'backgroundOutline', focus: 'textSecondary' }}\r\n      color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\r\n      onInput={(v: FormEvent<HTMLInputElement>) => {\r\n        if (v.currentTarget.value === '.') {\r\n          v.currentTarget.value = '0.'\r\n        }\r\n\r\n        v.currentTarget.value =\r\n          !!v.currentTarget.value && isNumber(v.currentTarget.value) && parseFloat(v.currentTarget.value) >= 0\r\n            ? v.currentTarget.value\r\n            : ''\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\n\r\nNumericInput.displayName = 'Input'\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/collection/CollectionNfts.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/collection/CollectionNfts.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xdzV0MDRwMSB7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoY2FsYygxMDAlLzIgLSA4cHgpLCAxZnIpICk7Cn0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHsKICAuXzF3NXQwNHAxIHsKICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KGNhbGMoMTAwJS8zIC0gOHB4KSwgMWZyKSApOwogIH0KfQpAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHsKICAuXzF3NXQwNHAxIHsKICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KGNhbGMoMTAwJS8zIC0gMTJweCksIDFmcikgKTsKICB9Cn0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTI4MHB4KSB7CiAgLl8xdzV0MDRwMSB7CiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heChjYWxjKDEwMCUvNCAtIDE2cHgpLCAxZnIpICk7CiAgfQp9CkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE1MzZweCkgewogIC5fMXc1dDA0cDEgewogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoY2FsYygxMDAlLzUgLSAxNnB4KSwgMWZyKSApOwogIH0KfQpAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxOTIwcHgpIHsKICAuXzF3NXQwNHAxIHsKICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KGNhbGMoMTAwJS83IC0gMTZweCksIDFmcikgKTsKICB9Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var assetList = '_1w5t04p1 rgw6ez4sj rgw6ez4ec rgw6ez4ed rgw6ez4es rgw6ez4f7';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/layout/Checkbox.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/layout/Checkbox.css.ts.vanilla.css\\\",\\\"source\\\":\\\"LmpxeDA5YTEgewogIHRvcDogLTI0cHg7Cn0KLmpxeDA5YTFbdHlwZT0iY2hlY2tib3giXSB7CiAgY2xpcDogcmVjdCgwIDAgMCAwKTsKICBjbGlwLXBhdGg6IGluc2V0KDUwJSk7CiAgaGVpZ2h0OiAxcHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICB3aWR0aDogMXB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var input = 'jqx09a1 rgw6ez4wf';\nexport var checkbox = 'rgw6ez4sc rgw6ezu7 rgw6ez7zd rgw6ez1gd rgw6ez18e rgw6ez7yh rgw6ez885';\nexport var checkMark = 'rgw6ez4rk rgw6ez1gd rgw6ez18e rgw6ez551';\nexport var checkMarkActive = 'rgw6ez4sc rgw6ez551 rgw6ez4wf rgw6ez3y0 rgw6ez3rs';","import clsx from 'clsx'\r\nimport { Box } from 'nft/components/Box'\r\nimport * as styles from 'nft/components/collection/FilterButton.css'\r\nimport { FilterIcon } from 'nft/components/icons'\r\nimport { buttonTextMedium } from 'nft/css/common.css'\r\nimport { breakpoints } from 'nft/css/sprinkles.css'\r\nimport { pluralize, putCommas } from 'nft/utils'\r\n\r\nexport const FilterButton = ({\r\n  onClick,\r\n  isMobile,\r\n  isFiltersExpanded,\r\n  collectionCount = 0,\r\n}: {\r\n  isMobile: boolean\r\n  isFiltersExpanded: boolean\r\n  onClick: () => void\r\n  collectionCount?: number\r\n}) => {\r\n  const hideResultsCount = window.innerWidth >= breakpoints.sm && window.innerWidth < breakpoints.md\r\n\r\n  return (\r\n    <Box\r\n      className={clsx(styles.filterButton, !isFiltersExpanded && styles.filterButtonExpanded)}\r\n      display=\"flex\"\r\n      gap=\"8\"\r\n      borderRadius=\"12\"\r\n      fontSize=\"16\"\r\n      cursor=\"pointer\"\r\n      position=\"relative\"\r\n      onClick={onClick}\r\n      padding=\"12\"\r\n      width={isMobile ? '44' : 'auto'}\r\n      height=\"44\"\r\n      whiteSpace=\"nowrap\"\r\n      color=\"white\"\r\n      data-testid=\"nft-filter\"\r\n    >\r\n      <FilterIcon />\r\n      {!isMobile ? (\r\n        <Box className={buttonTextMedium}>\r\n          {' '}\r\n          {!collectionCount || hideResultsCount\r\n            ? 'Filter'\r\n            : `Filter • ${putCommas(collectionCount)} result${pluralize(collectionCount)}`}\r\n        </Box>\r\n      ) : null}\r\n    </Box>\r\n  )\r\n}\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/loading.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/loading.css.ts.vanilla.css\\\",\\\"source\\\":\\\"QGtleWZyYW1lcyBfMmtkdmZ3MCB7CiAgMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7CiAgfQogIDEwMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlOwogIH0KfQouXzJrZHZmdzEgewogIGFuaW1hdGlvbjogXzJrZHZmdzAgMS41cyBpbmZpbml0ZTsKICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAjN0M4NUEyNEQgMjUlLCByZ2JhKDAsMCwwLDAuMykgNTAlLCAjN0M4NUEyNEQgNzUlKTsKICBiYWNrZ3JvdW5kLXNpemU6IDQwMCU7CiAgd2lsbC1jaGFuZ2U6IGJhY2tncm91bmQtcG9zaXRpb247Cn0KLl8ya2R2ZnczIHsKICB1c2VyLXNlbGVjdDogbm9uZTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/collection/FilterButton.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/collection/FilterButton.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbGl3ZHpvMSB7CiAgYmFja2dyb3VuZDogdmFyKC0tcmd3NmV6YSk7CiAgY29sb3I6IHZhcigtLWdlbmllLWNvbG9ycy10ZXh0UHJpbWFyeSk7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var filterButton = 'rgw6ez721 rgw6ez52p';\nexport var filterButtonExpanded = '_1liwdzo1';\nexport var filterButtonLoading = '_2kdvfw3 _2kdvfw1 rgw6ez7zp rgw6ez7y1 rgw6ez54p rgw6ez1hq rgw6ez1bp';","import styled from 'styled-components/macro'\r\n\r\nexport const ClearAllButton = styled.button`\r\n  color: ${({ theme }) => theme.textTertiary};\r\n  padding-left: 8px;\r\n  padding-right: 8px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  border: none;\r\n  cursor: pointer;\r\n  background: none;\r\n`\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Link = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"\n  }));\n});\nLink.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nLink.displayName = 'Link';\nexport default Link;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Twitter = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z\"\n  }));\n});\nTwitter.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nTwitter.displayName = 'Twitter';\nexport default Twitter;","import Row from 'components/Row'\r\nimport styled from 'styled-components/macro'\r\n\r\nexport const RemoveIconWrap = styled.div<{ hovered: boolean }>`\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 30px;\r\n  transform: translateX(-50%);\r\n  width: 32px;\r\n  visibility: ${({ hovered }) => (hovered ? 'visible' : 'hidden')};\r\n`\r\n\r\nexport const TitleRow = styled(Row)`\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport enum SetPriceMethod {\r\n  SAME_PRICE,\r\n  FLOOR_PRICE,\r\n  LAST_PRICE,\r\n  CUSTOM,\r\n}\r\n\r\nexport enum WarningType {\r\n  BELOW_FLOOR,\r\n  ALREADY_LISTED,\r\n  NONE,\r\n}\r\n","import { Plural, t, Trans } from '@lingui/macro'\r\nimport { ButtonPrimary } from 'components/Button'\r\nimport Column from 'components/Column'\r\nimport { Portal } from 'nft/components/common/Portal'\r\nimport { Overlay } from 'nft/components/modals/Overlay'\r\nimport { Listing, WalletAsset } from 'nft/types'\r\nimport React from 'react'\r\nimport { AlertTriangle, X } from 'react-feather'\r\nimport styled, { useTheme } from 'styled-components/macro'\r\nimport { BREAKPOINTS, ThemedText } from 'theme'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\n\r\nconst ModalWrapper = styled(Column)`\r\n  position: fixed;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 420px;\r\n  z-index: ${Z_INDEX.modal};\r\n  background: ${({ theme }) => theme.backgroundSurface};\r\n  border-radius: 20px;\r\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  box-shadow: ${({ theme }) => theme.deepShadow};\r\n  padding: 20px 24px 24px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    width: 100%;\r\n  }\r\n`\r\nconst CloseIconWrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n`\r\nconst CloseIcon = styled(X)`\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst HazardIconWrap = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 32px 120px;\r\n`\r\n\r\nconst ContinueButton = styled(ButtonPrimary)`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  margin-top: 12px;\r\n`\r\n\r\nconst EditListings = styled.span`\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 20px;\r\n  color: ${({ theme }) => theme.accentAction};\r\n  text-align: center;\r\n  cursor: pointer;\r\n  padding: 12px 16px;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nexport const BelowFloorWarningModal = ({\r\n  listingsBelowFloor,\r\n  closeModal,\r\n  startListing,\r\n}: {\r\n  listingsBelowFloor: [WalletAsset, Listing][]\r\n  closeModal: () => void\r\n  startListing: () => void\r\n}) => {\r\n  const theme = useTheme()\r\n  const clickContinue = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    startListing()\r\n    closeModal()\r\n  }\r\n  return (\r\n    <Portal>\r\n      <ModalWrapper>\r\n        <CloseIconWrapper>\r\n          <CloseIcon width={24} height={24} onClick={closeModal} />{' '}\r\n        </CloseIconWrapper>\r\n        <HazardIconWrap>\r\n          <AlertTriangle height={90} width={90} color={theme.accentCritical} />\r\n        </HazardIconWrap>\r\n        <ThemedText.HeadlineSmall lineHeight=\"28px\" textAlign=\"center\">\r\n          <Trans>Low listing price</Trans>\r\n        </ThemedText.HeadlineSmall>\r\n        <ThemedText.BodyPrimary textAlign=\"center\">\r\n          <Plural\r\n            value={listingsBelowFloor.length !== 1 ? 2 : 1}\r\n            _1={t`One NFT is listed ${(\r\n              (1 - (listingsBelowFloor[0][1].price ?? 0) / (listingsBelowFloor[0][0].floorPrice ?? 0)) *\r\n              100\r\n            ).toFixed(0)}% `}\r\n            other={t`${listingsBelowFloor.length} NFTs are listed significantly `}\r\n          />\r\n          &nbsp;\r\n          <Trans>below the collection’s floor price. Are you sure you want to continue?</Trans>\r\n        </ThemedText.BodyPrimary>\r\n        <ContinueButton onClick={clickContinue}>\r\n          <Trans>Continue</Trans>\r\n        </ContinueButton>\r\n        <EditListings onClick={closeModal}>\r\n          <Trans>Edit listings</Trans>\r\n        </EditListings>\r\n      </ModalWrapper>\r\n      <Overlay onClick={closeModal} />\r\n    </Portal>\r\n  )\r\n}\r\n","import type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { addressesByNetwork, SupportedChainId } from '@looksrare/sdk'\r\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\r\nimport ms from 'ms.macro'\r\nimport { SetPriceMethod, WarningType } from 'nft/components/profile/list/shared'\r\nimport { useNFTList, useSellAsset } from 'nft/hooks'\r\nimport {\r\n  LOOKSRARE_MARKETPLACE_CONTRACT_721,\r\n  LOOKSRARE_MARKETPLACE_CONTRACT_1155,\r\n  X2Y2_TRANSFER_CONTRACT_721,\r\n  X2Y2_TRANSFER_CONTRACT_1155,\r\n} from 'nft/queries'\r\nimport { OPENSEA_CROSS_CHAIN_CONDUIT } from 'nft/queries/openSea'\r\nimport { CollectionRow, Listing, ListingMarket, ListingRow, ListingStatus, WalletAsset } from 'nft/types'\r\nimport { approveCollection, LOOKS_RARE_CREATOR_BASIS_POINTS, signListing } from 'nft/utils/listNfts'\r\nimport { Dispatch, useEffect } from 'react'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nexport async function approveCollectionRow(\r\n  collectionRow: CollectionRow,\r\n  signer: JsonRpcSigner,\r\n  setCollectionStatusAndCallback: (\r\n    collection: CollectionRow,\r\n    status: ListingStatus,\r\n    callback?: () => Promise<void>\r\n  ) => void\r\n) {\r\n  const callback = () => approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback)\r\n  setCollectionStatusAndCallback(collectionRow, ListingStatus.SIGNING, callback)\r\n  const { marketplace, collectionAddress, nftStandard } = collectionRow\r\n  const addresses = addressesByNetwork[SupportedChainId.MAINNET]\r\n  const spender =\r\n    marketplace.name === 'OpenSea'\r\n      ? OPENSEA_CROSS_CHAIN_CONDUIT\r\n      : marketplace.name === 'LooksRare'\r\n      ? collectionRow.nftStandard === NftStandard.Erc721\r\n        ? LOOKSRARE_MARKETPLACE_CONTRACT_721\r\n        : LOOKSRARE_MARKETPLACE_CONTRACT_1155\r\n      : marketplace.name === 'X2Y2'\r\n      ? collectionRow.nftStandard === NftStandard.Erc721\r\n        ? X2Y2_TRANSFER_CONTRACT_721\r\n        : X2Y2_TRANSFER_CONTRACT_1155\r\n      : addresses.TRANSFER_MANAGER_ERC721\r\n  !!collectionAddress &&\r\n    (await approveCollection(\r\n      spender,\r\n      collectionAddress,\r\n      signer,\r\n      (newStatus: ListingStatus) => setCollectionStatusAndCallback(collectionRow, newStatus, callback),\r\n      nftStandard\r\n    ))\r\n}\r\n\r\nexport async function signListingRow(\r\n  listing: ListingRow,\r\n  signer: JsonRpcSigner,\r\n  provider: Web3Provider,\r\n  getLooksRareNonce: () => number,\r\n  setLooksRareNonce: (nonce: number) => void,\r\n  setListingStatusAndCallback: (listing: ListingRow, status: ListingStatus, callback?: () => Promise<void>) => void\r\n) {\r\n  const looksRareNonce = getLooksRareNonce()\r\n  const callback = () => {\r\n    return signListingRow(listing, signer, provider, getLooksRareNonce, setLooksRareNonce, setListingStatusAndCallback)\r\n  }\r\n  setListingStatusAndCallback(listing, ListingStatus.SIGNING, callback)\r\n  const { asset, marketplace } = listing\r\n  const res = await signListing(marketplace, asset, signer, provider, looksRareNonce, (newStatus: ListingStatus) =>\r\n    setListingStatusAndCallback(listing, newStatus, callback)\r\n  )\r\n  res && listing.marketplace.name === 'LooksRare' && setLooksRareNonce(looksRareNonce + 1)\r\n}\r\n\r\nexport const getTotalEthValue = (sellAssets: WalletAsset[]) => {\r\n  const total = sellAssets.reduce((total, asset: WalletAsset) => {\r\n    if (asset.newListings?.length) {\r\n      const maxListing = asset.newListings.reduce((a, b) => ((a.price ?? 0) > (b.price ?? 0) ? a : b))\r\n      // LooksRare is a unique case where creator royalties are a flat 0.5% or 50 basis points\r\n      const maxFee =\r\n        maxListing.marketplace.fee +\r\n        (maxListing.marketplace.name === 'LooksRare' ? LOOKS_RARE_CREATOR_BASIS_POINTS : asset?.basisPoints ?? 0) / 100\r\n      return total + (maxListing.price ?? 0) - (maxListing.price ?? 0) * (maxFee / 100)\r\n    }\r\n    return total\r\n  }, 0)\r\n  return total ? Math.round(total * 10000 + Number.EPSILON) / 10000 : 0\r\n}\r\n\r\nconst getListings = (sellAssets: WalletAsset[]): [CollectionRow[], ListingRow[]] => {\r\n  const newCollectionsToApprove: CollectionRow[] = []\r\n\r\n  const newListings: ListingRow[] = []\r\n  sellAssets.forEach((asset) => {\r\n    asset.marketplaces?.forEach((marketplace: ListingMarket) => {\r\n      const newListing = {\r\n        images: [asset.smallImageUrl, marketplace.icon],\r\n        name: asset.name || `#${asset.tokenId}`,\r\n        status: ListingStatus.DEFINED,\r\n        asset,\r\n        marketplace,\r\n        price: asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price,\r\n      }\r\n      newListings.push(newListing)\r\n      if (\r\n        !newCollectionsToApprove.some(\r\n          (collectionRow: CollectionRow) =>\r\n            collectionRow.collectionAddress === asset.asset_contract.address &&\r\n            collectionRow.marketplace.name === marketplace.name\r\n        )\r\n      ) {\r\n        const newCollectionRow = {\r\n          images: [asset.asset_contract.image_url, marketplace.icon],\r\n          name: asset.asset_contract.name,\r\n          status: ListingStatus.DEFINED,\r\n          collectionAddress: asset.asset_contract.address,\r\n          isVerified: asset.collectionIsVerified,\r\n          marketplace,\r\n          nftStandard: asset.asset_contract.tokenType,\r\n        }\r\n        newCollectionsToApprove.push(newCollectionRow)\r\n      }\r\n    })\r\n  })\r\n  return [newCollectionsToApprove, newListings]\r\n}\r\n\r\nexport const verifyStatus = (status: ListingStatus) => {\r\n  return status !== ListingStatus.PAUSED && status !== ListingStatus.APPROVED\r\n}\r\n\r\nexport function useSubscribeListingState() {\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const { setListings, setCollectionsRequiringApproval } = useNFTList(\r\n    ({ setListings, setCollectionsRequiringApproval }) => ({\r\n      setListings,\r\n      setCollectionsRequiringApproval,\r\n    }),\r\n    shallow\r\n  )\r\n  useEffect(() => {\r\n    const [newCollectionsToApprove, newListings] = getListings(sellAssets)\r\n    setListings(newListings)\r\n    setCollectionsRequiringApproval(newCollectionsToApprove)\r\n  }, [sellAssets, setCollectionsRequiringApproval, setListings])\r\n}\r\n\r\nexport function useHandleGlobalPriceToggle(\r\n  globalOverride: boolean,\r\n  setListPrice: Dispatch<number | undefined>,\r\n  setPrice: (price?: number) => void,\r\n  listPrice?: number,\r\n  globalPrice?: number\r\n) {\r\n  useEffect(() => {\r\n    let price: number | undefined\r\n    if (globalOverride) {\r\n      if (!listPrice) setListPrice(globalPrice)\r\n      price = globalPrice\r\n    } else {\r\n      price = listPrice\r\n    }\r\n    setPrice(price)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [globalOverride])\r\n}\r\n\r\nexport function useSyncPriceWithGlobalMethod(\r\n  asset: WalletAsset,\r\n  setListPrice: Dispatch<number | undefined>,\r\n  setGlobalPrice: Dispatch<number | undefined>,\r\n  setGlobalOverride: Dispatch<boolean>,\r\n  listPrice?: number,\r\n  globalPrice?: number,\r\n  globalPriceMethod?: SetPriceMethod\r\n) {\r\n  useEffect(() => {\r\n    if (globalPriceMethod === SetPriceMethod.FLOOR_PRICE) {\r\n      setListPrice(asset?.floorPrice)\r\n      setGlobalPrice(asset.floorPrice)\r\n    } else if (globalPriceMethod === SetPriceMethod.LAST_PRICE) {\r\n      setListPrice(asset.lastPrice)\r\n      setGlobalPrice(asset.lastPrice)\r\n    } else if (globalPriceMethod === SetPriceMethod.SAME_PRICE)\r\n      listPrice && !globalPrice ? setGlobalPrice(listPrice) : setListPrice(globalPrice)\r\n\r\n    setGlobalOverride(false)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [globalPriceMethod])\r\n}\r\n\r\nexport function useUpdateInputAndWarnings(\r\n  setWarningType: Dispatch<WarningType>,\r\n  inputRef: React.MutableRefObject<HTMLInputElement>,\r\n  asset: WalletAsset,\r\n  listPrice?: number\r\n) {\r\n  useEffect(() => {\r\n    setWarningType(WarningType.NONE)\r\n    const price = listPrice ?? 0\r\n    inputRef.current.value = `${price}`\r\n    if (price < (asset?.floorPrice ?? 0) && price > 0) setWarningType(WarningType.BELOW_FLOOR)\r\n    else if (\r\n      asset.floor_sell_order_price &&\r\n      price >= asset.floor_sell_order_price &&\r\n      asset.asset_contract.tokenType !== NftStandard.Erc1155\r\n    )\r\n      setWarningType(WarningType.ALREADY_LISTED)\r\n  }, [\r\n    asset.asset_contract.tokenType,\r\n    asset?.floorPrice,\r\n    asset.floor_sell_order_price,\r\n    inputRef,\r\n    listPrice,\r\n    setWarningType,\r\n  ])\r\n}\r\n\r\nexport const getRoyalty = (listingMarket: ListingMarket, asset: WalletAsset) => {\r\n  // LooksRare is a unique case where royalties for creators are a flat 0.5% or 50 basis points if royalty is set\r\n  const baseFee =\r\n    listingMarket.name === 'LooksRare'\r\n      ? asset.basisPoints\r\n        ? LOOKS_RARE_CREATOR_BASIS_POINTS\r\n        : 0\r\n      : asset.basisPoints ?? 0\r\n\r\n  return baseFee * 0.01\r\n}\r\n\r\n// OpenSea has a 0.5% fee for all assets that do not have a royalty set\r\nexport const getMarketplaceFee = (listingMarket: ListingMarket, asset: WalletAsset) => {\r\n  return listingMarket.name === 'OpenSea' && !asset.basisPoints ? 0.5 : listingMarket.fee\r\n}\r\n\r\nconst BELOW_FLOOR_PRICE_THRESHOLD = 0.8\r\n\r\nexport const findListingIssues = (sellAssets: WalletAsset[]) => {\r\n  const missingExpiration = sellAssets.some((asset) => {\r\n    return (\r\n      asset.expirationTime != null &&\r\n      (isNaN(asset.expirationTime) || asset.expirationTime * 1000 - Date.now() < ms`60 seconds`)\r\n    )\r\n  })\r\n  const overMaxExpiration = sellAssets.some((asset) => {\r\n    return asset.expirationTime != null && asset.expirationTime * 1000 - Date.now() > ms`180 days`\r\n  })\r\n\r\n  const listingsMissingPrice: [WalletAsset, Listing][] = []\r\n  const listingsBelowFloor: [WalletAsset, Listing][] = []\r\n  const listingsAboveSellOrderFloor: [WalletAsset, Listing][] = []\r\n  for (const asset of sellAssets) {\r\n    if (asset.newListings) {\r\n      for (const listing of asset.newListings) {\r\n        if (!listing.price) listingsMissingPrice.push([asset, listing])\r\n        else if (listing.price < (asset?.floorPrice ?? 0) * BELOW_FLOOR_PRICE_THRESHOLD && !listing.overrideFloorPrice)\r\n          listingsBelowFloor.push([asset, listing])\r\n        else if (\r\n          asset.floor_sell_order_price &&\r\n          listing.price >= asset.floor_sell_order_price &&\r\n          asset.asset_contract.tokenType !== NftStandard.Erc1155\r\n        )\r\n          listingsAboveSellOrderFloor.push([asset, listing])\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    missingExpiration,\r\n    overMaxExpiration,\r\n    listingsMissingPrice,\r\n    listingsBelowFloor,\r\n    listingsAboveSellOrderFloor,\r\n  }\r\n}\r\n","import { Plural, Trans } from '@lingui/macro'\r\nimport Column from 'components/Column'\r\nimport { ScrollBarStyles } from 'components/Common'\r\nimport Row from 'components/Row'\r\nimport { MouseoverTooltip } from 'components/Tooltip'\r\nimport { ChevronUpIcon, ListingModalWindowActive, ListingModalWindowClosed } from 'nft/components/icons'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\r\nimport { useMemo } from 'react'\r\nimport { Info } from 'react-feather'\r\nimport styled, { useTheme } from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\nimport { colors } from 'theme/colors'\r\nimport { TRANSITION_DURATIONS } from 'theme/styles'\r\n\r\nimport { ContentRow } from './ContentRow'\r\n\r\nconst SectionHeader = styled(Row)`\r\n  justify-content: space-between;\r\n`\r\n\r\nconst SectionTitle = styled(ThemedText.SubHeader)<{ active: boolean; approved: boolean }>`\r\n  line-height: 24px;\r\n  color: ${({ theme, active, approved }) =>\r\n    approved ? theme.accentSuccess : active ? theme.textPrimary : theme.textSecondary};\r\n`\r\n\r\nconst SectionArrow = styled(ChevronUpIcon)<{ active: boolean }>`\r\n  height: 24px;\r\n  width: 24px;\r\n  cursor: pointer;\r\n  transition: ${TRANSITION_DURATIONS.medium}ms;\r\n  transform: rotate(${({ active }) => (active ? 0 : 180)}deg);\r\n`\r\n\r\nconst SectionBody = styled(Column)`\r\n  border-left: 1.5px solid ${colors.gray650};\r\n  margin-top: 4px;\r\n  margin-left: 7px;\r\n  padding-top: 4px;\r\n  padding-left: 20px;\r\n  max-height: 394px;\r\n  overflow-y: auto;\r\n  ${ScrollBarStyles}\r\n`\r\n\r\nconst StyledInfoIcon = styled(Info)`\r\n  height: 16px;\r\n  width: 16px;\r\n  margin-left: 4px;\r\n  color: ${({ theme }) => theme.textSecondary};\r\n`\r\n\r\nconst ContentRowContainer = styled(Column)`\r\n  gap: 8px;\r\n  scroll-behavior: smooth;\r\n`\r\n\r\nexport const enum Section {\r\n  APPROVE,\r\n  SIGN,\r\n}\r\n\r\ninterface ListModalSectionProps {\r\n  sectionType: Section\r\n  active: boolean\r\n  content: AssetRow[]\r\n  toggleSection: React.DispatchWithoutAction\r\n}\r\n\r\nexport const ListModalSection = ({ sectionType, active, content, toggleSection }: ListModalSectionProps) => {\r\n  const theme = useTheme()\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\r\n  const allContentApproved = useMemo(() => !content.some((row) => row.status !== ListingStatus.APPROVED), [content])\r\n  const isCollectionApprovalSection = sectionType === Section.APPROVE\r\n  const uniqueCollections = useMemo(() => {\r\n    if (isCollectionApprovalSection) {\r\n      const collections = content.map((collection) => (collection as CollectionRow).collectionAddress)\r\n      const uniqueCollections = [...new Set(collections)]\r\n      return uniqueCollections.length\r\n    }\r\n    return undefined\r\n  }, [content, isCollectionApprovalSection])\r\n  const removeRow = (row: AssetRow) => {\r\n    // collections\r\n    if (isCollectionApprovalSection) {\r\n      const collectionRow = row as CollectionRow\r\n      for (const asset of sellAssets)\r\n        if (asset.asset_contract.address === collectionRow.collectionAddress)\r\n          removeAssetMarketplace(asset, collectionRow.marketplace)\r\n    }\r\n    // listings\r\n    else {\r\n      const listingRow = row as ListingRow\r\n      removeAssetMarketplace(listingRow.asset, listingRow.marketplace)\r\n    }\r\n  }\r\n  return (\r\n    <Column>\r\n      <SectionHeader>\r\n        <Row>\r\n          {active || allContentApproved ? (\r\n            <ListingModalWindowActive fill={allContentApproved ? theme.accentSuccess : theme.accentAction} />\r\n          ) : (\r\n            <ListingModalWindowClosed />\r\n          )}\r\n          <SectionTitle active={active} marginLeft=\"12px\" approved={allContentApproved}>\r\n            {isCollectionApprovalSection ? (\r\n              <>\r\n                <Trans>Approve</Trans>&nbsp;\r\n                <Plural value={uniqueCollections} _1=\"collection\" other=\"collections\" />\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Trans>Sign</Trans> &nbsp;{content.length}&nbsp;{' '}\r\n                <Plural value={content.length} _1=\"listing\" other=\"listings\" />\r\n              </>\r\n            )}\r\n          </SectionTitle>\r\n        </Row>\r\n        <SectionArrow\r\n          active={active}\r\n          secondaryColor={active ? theme.textPrimary : theme.textSecondary}\r\n          onClick={toggleSection}\r\n        />\r\n      </SectionHeader>\r\n      {active && (\r\n        <SectionBody>\r\n          {isCollectionApprovalSection && (\r\n            <Row height=\"16px\" marginBottom=\"16px\">\r\n              <ThemedText.Caption lineHeight=\"16px\" color=\"textSecondary\">\r\n                <Trans>Why is a transaction required?</Trans>\r\n              </ThemedText.Caption>\r\n              <MouseoverTooltip\r\n                text={<Trans>Listing an NFT requires a one-time marketplace approval for each NFT collection.</Trans>}\r\n              >\r\n                <StyledInfoIcon />\r\n              </MouseoverTooltip>\r\n            </Row>\r\n          )}\r\n          <ContentRowContainer>\r\n            {content.map((row: AssetRow) => (\r\n              <ContentRow\r\n                row={row}\r\n                key={(row?.name ?? '') + row?.images[1]}\r\n                removeRow={removeRow}\r\n                isCollectionApprovalSection={isCollectionApprovalSection}\r\n              />\r\n            ))}\r\n          </ContentRowContainer>\r\n        </SectionBody>\r\n      )}\r\n    </Column>\r\n  )\r\n}\r\n","import { Plural, t, Trans } from '@lingui/macro'\r\nimport { BaseButton } from 'components/Button'\r\nimport { BelowFloorWarningModal } from 'nft/components/profile/list/Modal/BelowFloorWarningModal'\r\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\r\nimport { useMemo, useState } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { BREAKPOINTS } from 'theme'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport { findListingIssues } from './utils'\r\n\r\nconst StyledListingButton = styled(BaseButton)<{ showResolveIssues: boolean; missingPrices: boolean }>`\r\n  background: ${({ showResolveIssues, theme }) => (showResolveIssues ? theme.accentFailure : theme.accentAction)};\r\n  color: ${({ theme }) => theme.accentTextLightPrimary};\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  padding: 16px;\r\n  border-radius: 12px;\r\n  width: min-content;\r\n  border: none;\r\n  cursor: ${({ missingPrices }) => (missingPrices ? 'auto' : 'pointer')};\r\n  opacity: ${({ showResolveIssues, missingPrices }) => !showResolveIssues && missingPrices && '0.3'};\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    font-size: 16px;\r\n    line-height: 20px;\r\n    padding: 10px 12px;\r\n  }\r\n`\r\n\r\nexport const ListingButton = ({ onClick }: { onClick: () => void }) => {\r\n  const { sellAssets, showResolveIssues, toggleShowResolveIssues, issues, setIssues } = useSellAsset(\r\n    ({ sellAssets, showResolveIssues, toggleShowResolveIssues, issues, setIssues }) => ({\r\n      sellAssets,\r\n      showResolveIssues,\r\n      toggleShowResolveIssues,\r\n      issues,\r\n      setIssues,\r\n    }),\r\n    shallow\r\n  )\r\n  const [showWarning, setShowWarning] = useState(false)\r\n  const isMobile = useIsMobile()\r\n\r\n  // Find issues with item listing data\r\n  const [listingsMissingPrice, listingsBelowFloor] = useMemo(() => {\r\n    const {\r\n      missingExpiration,\r\n      overMaxExpiration,\r\n      listingsMissingPrice,\r\n      listingsBelowFloor,\r\n      listingsAboveSellOrderFloor,\r\n    } = findListingIssues(sellAssets)\r\n\r\n    // set number of issues\r\n    const foundIssues =\r\n      Number(missingExpiration) +\r\n      Number(overMaxExpiration) +\r\n      listingsMissingPrice.length +\r\n      listingsAboveSellOrderFloor.length\r\n    setIssues(foundIssues)\r\n    !foundIssues && showResolveIssues && toggleShowResolveIssues()\r\n    // Only show Resolve Issue text if there was a user submitted error (ie not when page loads with no prices set)\r\n    if ((missingExpiration || overMaxExpiration || listingsAboveSellOrderFloor.length) && !showResolveIssues)\r\n      toggleShowResolveIssues()\r\n\r\n    return [listingsMissingPrice, listingsBelowFloor]\r\n  }, [sellAssets, setIssues, showResolveIssues, toggleShowResolveIssues])\r\n\r\n  const warningWrappedClick = () => {\r\n    if (issues) !showResolveIssues && toggleShowResolveIssues()\r\n    else if (listingsBelowFloor.length) setShowWarning(true)\r\n    else onClick()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledListingButton\r\n        onClick={warningWrappedClick}\r\n        missingPrices={!!listingsMissingPrice.length}\r\n        showResolveIssues={showResolveIssues}\r\n      >\r\n        {showResolveIssues ? (\r\n          <Plural value={issues !== 1 ? 2 : 1} _1=\"Resolve issue\" other={t`Resolve ${issues} issues`} />\r\n        ) : listingsMissingPrice.length && !isMobile ? (\r\n          <Trans>Set prices to continue</Trans>\r\n        ) : (\r\n          <Trans>Start listing</Trans>\r\n        )}\r\n      </StyledListingButton>\r\n\r\n      {showWarning && (\r\n        <BelowFloorWarningModal\r\n          listingsBelowFloor={listingsBelowFloor}\r\n          closeModal={() => setShowWarning(false)}\r\n          startListing={onClick}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport Column from 'components/Column'\r\nimport Loader from 'components/Icons/LoadingSpinner'\r\nimport Row from 'components/Row'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { AssetRow, CollectionRow, ListingStatus } from 'nft/types'\r\nimport { useEffect, useRef } from 'react'\r\nimport { Check, XOctagon } from 'react-feather'\r\nimport styled, { css, useTheme } from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\nimport { opacify } from 'theme/utils'\r\n\r\nconst ContentColumn = styled(Column)<{ failed: boolean }>`\r\n  background-color: ${({ theme, failed }) => failed && opacify(12, theme.accentCritical)};\r\n  border-radius: 12px;\r\n  padding-bottom: ${({ failed }) => failed && '16px'};\r\n`\r\n\r\nconst ContentRowWrapper = styled(Row)<{ active: boolean; failed: boolean }>`\r\n  padding: 16px;\r\n  border: ${({ failed, theme }) => !failed && `1px solid ${theme.backgroundOutline}`};\r\n  border-radius: 12px;\r\n  opacity: ${({ active, failed }) => (active || failed ? '1' : '0.6')};\r\n`\r\n\r\nconst CollectionIcon = styled.img`\r\n  border-radius: 100px;\r\n  height: 24px;\r\n  width: 24px;\r\n  z-index: 1;\r\n`\r\n\r\nconst AssetIcon = styled.img`\r\n  border-radius: 4px;\r\n  height: 24px;\r\n  width: 24px;\r\n  z-index: 1;\r\n`\r\n\r\nconst MarketplaceIcon = styled.img`\r\n  border-radius: 4px;\r\n  height: 24px;\r\n  width: 24px;\r\n  margin-left: -4px;\r\n  margin-right: 12px;\r\n`\r\n\r\nconst ContentName = styled(ThemedText.SubHeaderSmall)`\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  line-height: 20px;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  max-width: 40%;\r\n`\r\n\r\nconst ProceedText = styled.span`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n  color: ${({ theme }) => theme.textSecondary};\r\n`\r\n\r\nconst FailedText = styled.span`\r\n  font-weight: 600;\r\n  font-size: 10px;\r\n  line-height: 12px;\r\n  color: ${({ theme }) => theme.accentCritical};\r\n  margin-left: 4px;\r\n`\r\n\r\nconst StyledVerifiedIcon = styled(VerifiedIcon)`\r\n  height: 16px;\r\n  width: 16px;\r\n  margin-left: 4px;\r\n`\r\n\r\nconst IconWrapper = styled.div`\r\n  margin-left: auto;\r\n  margin-right: 0px;\r\n`\r\n\r\nconst ButtonRow = styled(Row)`\r\n  padding: 0px 16px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst failedButtonStyle = css`\r\n  width: 152px;\r\n  cursor: pointer;\r\n  padding: 8px 0px;\r\n  text-align: center;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  border-radius: 12px;\r\n  border: none;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst RemoveButton = styled.button`\r\n  background-color: ${({ theme }) => theme.accentCritical};\r\n  color: ${({ theme }) => theme.accentTextDarkPrimary};\r\n  ${failedButtonStyle}\r\n`\r\n\r\nconst RetryButton = styled.button`\r\n  background-color: ${({ theme }) => theme.backgroundInteractive};\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  ${failedButtonStyle}\r\n`\r\n\r\nexport const ContentRow = ({\r\n  row,\r\n  isCollectionApprovalSection,\r\n  removeRow,\r\n}: {\r\n  row: AssetRow\r\n  isCollectionApprovalSection: boolean\r\n  removeRow: (row: AssetRow) => void\r\n}) => {\r\n  const theme = useTheme()\r\n  const rowRef = useRef<HTMLDivElement>()\r\n  const failed = row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED\r\n\r\n  useEffect(() => {\r\n    row.status === ListingStatus.SIGNING && rowRef.current?.scroll\r\n  }, [row.status])\r\n\r\n  return (\r\n    <ContentColumn failed={failed}>\r\n      <ContentRowWrapper\r\n        active={row.status === ListingStatus.SIGNING || row.status === ListingStatus.APPROVED}\r\n        failed={failed}\r\n        ref={rowRef}\r\n      >\r\n        {isCollectionApprovalSection ? <CollectionIcon src={row.images[0]} /> : <AssetIcon src={row.images[0]} />}\r\n        <MarketplaceIcon src={row.images[1]} />\r\n        <ContentName>{row.name}</ContentName>\r\n        {isCollectionApprovalSection && (row as CollectionRow).isVerified && <StyledVerifiedIcon />}\r\n        <IconWrapper>\r\n          {row.status === ListingStatus.DEFINED || row.status === ListingStatus.PENDING ? (\r\n            <Loader\r\n              height=\"14px\"\r\n              width=\"14px\"\r\n              stroke={row.status === ListingStatus.PENDING ? theme.accentAction : theme.textTertiary}\r\n            />\r\n          ) : row.status === ListingStatus.SIGNING ? (\r\n            <ProceedText>\r\n              <Trans>Proceed in wallet</Trans>\r\n            </ProceedText>\r\n          ) : row.status === ListingStatus.APPROVED ? (\r\n            <Check height=\"20\" width=\"20\" stroke={theme.accentSuccess} />\r\n          ) : (\r\n            failed && (\r\n              <Row>\r\n                <XOctagon height=\"20\" width=\"20\" color={theme.accentCritical} />\r\n                <FailedText>\r\n                  {row.status === ListingStatus.FAILED ? <Trans>Failed</Trans> : <Trans>Rejected</Trans>}\r\n                </FailedText>\r\n              </Row>\r\n            )\r\n          )}\r\n        </IconWrapper>\r\n      </ContentRowWrapper>\r\n      {failed && (\r\n        <ButtonRow justify=\"space-between\">\r\n          <RemoveButton onClick={() => removeRow(row)}>\r\n            <Trans>Remove</Trans>\r\n          </RemoveButton>\r\n          <RetryButton onClick={row.callback}>\r\n            <Trans>Retry</Trans>\r\n          </RetryButton>\r\n        </ButtonRow>\r\n      )}\r\n    </ContentColumn>\r\n  )\r\n}\r\n","import { Plural } from '@lingui/macro'\r\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\r\nimport ms from 'ms.macro'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { NumericInput } from 'nft/components/layout/Input'\r\nimport { body, caption } from 'nft/css/common.css'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { DropDownOption } from 'nft/types'\r\nimport { useEffect, useMemo, useReducer, useRef, useState } from 'react'\r\nimport { AlertTriangle, ChevronDown } from 'react-feather'\r\nimport styled from 'styled-components/macro'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\n\r\nimport { Dropdown } from './Dropdown'\r\n\r\nconst ModalWrapper = styled(Column)`\r\n  gap: 4px;\r\n  position: relative;\r\n`\r\n\r\nconst InputWrapper = styled(Row)<{ isInvalid: boolean }>`\r\n  padding: 6px 6px 6px 12px;\r\n  border: 1px solid;\r\n  position: relative;\r\n  height: 44px;\r\n  border-radius: 8px;\r\n  border-color: ${({ isInvalid, theme }) => (isInvalid ? theme.accentCritical : theme.backgroundOutline)};\r\n  width: 160px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst DropdownPrompt = styled(Row)`\r\n  gap: 4px;\r\n  background-color: ${({ theme }) => theme.backgroundInteractive};\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  border-radius: 8px;\r\n  padding: 6px 4px 6px 8px;\r\n  white-space: nowrap;\r\n  color: ${({ theme }) => theme.textPrimary};\r\n\r\n  &:hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n`\r\n\r\nconst DropdownChevron = styled(ChevronDown)<{ isOpen: boolean }>`\r\n  height: 20px;\r\n  width: 20px;\r\n  color: ${({ theme }) => theme.textSecondary};\r\n  transform: ${({ isOpen }) => isOpen && 'rotate(180deg)'};\r\n  transition: ${({\r\n    theme: {\r\n      transition: { duration, timing },\r\n    },\r\n  }) => `transform ${duration.fast} ${timing.ease}`};\r\n`\r\n\r\nconst DropdownContainer = styled.div`\r\n  position: absolute;\r\n  top: 48px;\r\n  right: 0px;\r\n  z-index: ${Z_INDEX.dropdown};\r\n`\r\n\r\nconst ErrorMessage = styled(Row)`\r\n  color: ${({ theme }) => theme.accentCritical};\r\n  gap: 4px;\r\n  position: absolute;\r\n  top: 44px;\r\n  white-space: nowrap;\r\n`\r\n\r\nconst WarningIcon = styled(AlertTriangle)`\r\n  width: 16px;\r\n  color: ${({ theme }) => theme.accentCritical};\r\n`\r\n\r\nenum Duration {\r\n  hour = 'hour',\r\n  day = 'day',\r\n  week = 'week',\r\n  month = 'month',\r\n}\r\n\r\nenum ErrorState {\r\n  valid,\r\n  empty,\r\n  overMax,\r\n}\r\n\r\nexport const SetDurationModal = () => {\r\n  const [duration, setDuration] = useState(Duration.day)\r\n  const [amount, setAmount] = useState('7')\r\n  const [errorState, setErrorState] = useState(ErrorState.valid)\r\n  const setGlobalExpiration = useSellAsset((state) => state.setGlobalExpiration)\r\n  const [showDropdown, toggleShowDropdown] = useReducer((s) => !s, false)\r\n  const durationDropdownRef = useRef<HTMLDivElement>(null)\r\n  useOnClickOutside(durationDropdownRef, showDropdown ? toggleShowDropdown : undefined)\r\n\r\n  const setCustomExpiration = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setAmount(event.target.value.length ? event.target.value : '')\r\n  }\r\n\r\n  const durationOptions: DropDownOption[] = useMemo(\r\n    () => [\r\n      {\r\n        displayText: 'hours',\r\n        isSelected: duration === Duration.hour,\r\n        onClick: () => {\r\n          setDuration(Duration.hour)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'days',\r\n        isSelected: duration === Duration.day,\r\n        onClick: () => {\r\n          setDuration(Duration.day)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'weeks',\r\n        isSelected: duration === Duration.week,\r\n        onClick: () => {\r\n          setDuration(Duration.week)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'months',\r\n        isSelected: duration === Duration.month,\r\n        onClick: () => {\r\n          setDuration(Duration.month)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n    ],\r\n    [duration]\r\n  )\r\n\r\n  let prompt\r\n  switch (duration) {\r\n    case Duration.hour:\r\n      prompt = <Plural value={amount} _1=\"hour\" other=\"hours\" />\r\n      break\r\n    case Duration.day:\r\n      prompt = <Plural value={amount} _1=\"day\" other=\"days\" />\r\n      break\r\n    case Duration.week:\r\n      prompt = <Plural value={amount} _1=\"week\" other=\"weeks\" />\r\n      break\r\n    case Duration.month:\r\n      prompt = <Plural value={amount} _1=\"month\" other=\"months\" />\r\n      break\r\n    default:\r\n      break\r\n  }\r\n\r\n  useEffect(() => {\r\n    const expiration = convertDurationToExpiration(parseFloat(amount), duration)\r\n\r\n    if (expiration * 1000 - Date.now() < ms`60 seconds` || isNaN(expiration)) setErrorState(ErrorState.empty)\r\n    else if (expiration * 1000 - Date.now() > ms`180 days`) setErrorState(ErrorState.overMax)\r\n    else setErrorState(ErrorState.valid)\r\n    setGlobalExpiration(expiration)\r\n  }, [amount, duration, setGlobalExpiration])\r\n\r\n  return (\r\n    <ModalWrapper ref={durationDropdownRef}>\r\n      <InputWrapper isInvalid={errorState !== ErrorState.valid}>\r\n        <NumericInput\r\n          as=\"input\"\r\n          type=\"number\"\r\n          pattern=\"[0-9]\"\r\n          borderStyle=\"none\"\r\n          className={body}\r\n          color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\r\n          value={amount}\r\n          width=\"40\"\r\n          marginRight=\"4\"\r\n          backgroundColor=\"none\"\r\n          onChange={setCustomExpiration}\r\n          flexShrink=\"0\"\r\n        />\r\n        <DropdownPrompt onClick={toggleShowDropdown}>\r\n          {prompt} <DropdownChevron isOpen={showDropdown} />\r\n        </DropdownPrompt>\r\n        {showDropdown && (\r\n          <DropdownContainer>\r\n            <Dropdown dropDownOptions={durationOptions} width={125} />\r\n          </DropdownContainer>\r\n        )}\r\n      </InputWrapper>\r\n      {errorState !== ErrorState.valid && (\r\n        <ErrorMessage className={caption}>\r\n          {' '}\r\n          <WarningIcon /> {errorState === ErrorState.overMax ? 'Maximum 6 months' : 'Set duration'}\r\n        </ErrorMessage>\r\n      )}\r\n    </ModalWrapper>\r\n  )\r\n}\r\n\r\nconst convertDurationToExpiration = (amount: number, duration: Duration) => {\r\n  const durationFactor = () => {\r\n    switch (duration) {\r\n      case Duration.hour:\r\n        return 1\r\n      case Duration.day:\r\n        return 24\r\n      case Duration.week:\r\n        return 24 * 7\r\n      default: // month\r\n        return 24 * 30\r\n    }\r\n  }\r\n  return Math.round((Date.now() + ms`1 hour` * durationFactor() * amount) / 1000)\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { formatCurrencyAmount, NumberType } from '@uniswap/conedison/format'\r\nimport Column from 'components/Column'\r\nimport { ScrollBarStyles } from 'components/Common'\r\nimport Row from 'components/Row'\r\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\r\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { getTotalEthValue } from 'nft/components/profile/list/utils'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { formatEth, generateTweetForList, pluralize } from 'nft/utils'\r\nimport { useMemo } from 'react'\r\nimport { Twitter, X } from 'react-feather'\r\nimport styled, { css, useTheme } from 'styled-components/macro'\r\nimport { BREAKPOINTS, ThemedText } from 'theme'\r\n\r\nimport { TitleRow } from '../shared'\r\n\r\nconst SuccessImage = styled.img<{ numImages: number }>`\r\n  width: calc(${({ numImages }) => (numImages > 1 ? (numImages > 2 ? '33%' : '50%') : '100%')} - 12px);\r\n  border-radius: 12px;\r\n`\r\n\r\nconst SuccessImageWrapper = styled(Row)`\r\n  flex-wrap: wrap;\r\n  gap: 12px;\r\n  justify-content: center;\r\n  overflow-y: scroll;\r\n  margin-bottom: 16px;\r\n  ${ScrollBarStyles}\r\n`\r\n\r\nconst ProceedsColumn = styled(Column)`\r\n  text-align: right;\r\n`\r\n\r\nconst buttonStyle = css`\r\n  width: 182px;\r\n  cursor: pointer;\r\n  padding: 12px 0px;\r\n  text-align: center;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 20px;\r\n  border-radius: 12px;\r\n  border: none;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    width: 100%;\r\n    margin-bottom: 8px;\r\n  }\r\n`\r\n\r\nconst ReturnButton = styled.button`\r\n  background-color: ${({ theme }) => theme.backgroundInteractive};\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  ${buttonStyle}\r\n`\r\n\r\nconst TweetButton = styled.a`\r\n  background-color: ${({ theme }) => theme.accentAction};\r\n  color: ${({ theme }) => theme.accentTextLightPrimary};\r\n  text-decoration: none;\r\n  ${buttonStyle}\r\n`\r\n\r\nconst TweetRow = styled(Row)`\r\n  justify-content: center;\r\n  gap: 4px;\r\n`\r\n\r\nexport const SuccessScreen = ({ overlayClick }: { overlayClick: () => void }) => {\r\n  const theme = useTheme()\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const nativeCurrency = useNativeCurrency()\r\n\r\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\r\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\r\n  const usdcValue = useStablecoinValue(parsedAmount)\r\n\r\n  return (\r\n    <>\r\n      <TitleRow>\r\n        <ThemedText.HeadlineSmall lineHeight=\"28px\">\r\n          <Trans>Successfully listed</Trans>&nbsp;{sellAssets.length > 1 ? ` ${sellAssets.length} ` : ''}\r\n          NFT{pluralize(sellAssets.length)}!\r\n        </ThemedText.HeadlineSmall>\r\n        <X size={24} cursor=\"pointer\" onClick={overlayClick} />\r\n      </TitleRow>\r\n      <SuccessImageWrapper>\r\n        {sellAssets.map((asset) => (\r\n          <SuccessImage\r\n            src={asset.imageUrl}\r\n            key={asset?.asset_contract?.address ?? '' + asset?.tokenId}\r\n            numImages={sellAssets.length}\r\n          />\r\n        ))}\r\n      </SuccessImageWrapper>\r\n      <Row justify=\"space-between\" align=\"flex-start\" marginBottom=\"16px\">\r\n        <ThemedText.SubHeader lineHeight=\"24px\">\r\n          <Trans>Proceeds if sold</Trans>\r\n        </ThemedText.SubHeader>\r\n        <ProceedsColumn>\r\n          <ThemedText.SubHeader lineHeight=\"24px\">{formatEth(totalEthListingValue)} ETH</ThemedText.SubHeader>\r\n          {usdcValue && (\r\n            <ThemedText.BodySmall lineHeight=\"20px\" color=\"textSecondary\">\r\n              {formatCurrencyAmount(usdcValue, NumberType.FiatTokenPrice)}\r\n            </ThemedText.BodySmall>\r\n          )}\r\n        </ProceedsColumn>\r\n      </Row>\r\n      <Row justify=\"space-between\" flexWrap=\"wrap\">\r\n        <ReturnButton onClick={() => window.location.reload()}>\r\n          <Trans>Return to My NFTs</Trans>\r\n        </ReturnButton>\r\n        <TweetButton href={generateTweetForList(sellAssets)} target=\"_blank\" rel=\"noreferrer\">\r\n          <TweetRow>\r\n            <Twitter height={20} width={20} color={theme.accentTextLightPrimary} fill={theme.accentTextLightPrimary} />\r\n            <Trans>Share on Twitter</Trans>\r\n          </TweetRow>\r\n        </TweetButton>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { sendAnalyticsEvent, Trace, useTrace } from '@uniswap/analytics'\r\nimport { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\r\nimport { formatCurrencyAmount, NumberType } from '@uniswap/conedison/format'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\r\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { Portal } from 'nft/components/common/Portal'\r\nimport { Overlay } from 'nft/components/modals/Overlay'\r\nimport { getTotalEthValue, signListingRow } from 'nft/components/profile/list/utils'\r\nimport { useNFTList, useSellAsset } from 'nft/hooks'\r\nimport { ListingStatus } from 'nft/types'\r\nimport { useCallback, useEffect, useMemo, useReducer } from 'react'\r\nimport { X } from 'react-feather'\r\nimport styled from 'styled-components/macro'\r\nimport { BREAKPOINTS, ThemedText } from 'theme'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport { TitleRow } from '../shared'\r\nimport { ListModalSection, Section } from './ListModalSection'\r\nimport { SuccessScreen } from './SuccessScreen'\r\n\r\nconst ListModalWrapper = styled.div`\r\n  position: fixed;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 420px;\r\n  z-index: ${Z_INDEX.modal};\r\n  background: ${({ theme }) => theme.backgroundSurface};\r\n  border-radius: 20px;\r\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  box-shadow: ${({ theme }) => theme.deepShadow};\r\n  padding: 20px 24px 24px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nexport const ListModal = ({ overlayClick }: { overlayClick: () => void }) => {\r\n  const { provider } = useWeb3React()\r\n  const signer = provider?.getSigner()\r\n  const trace = useTrace({ modal: InterfaceModalName.NFT_LISTING })\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const { setListingStatusAndCallback, setLooksRareNonce, getLooksRareNonce, collectionsRequiringApproval, listings } =\r\n    useNFTList(\r\n      ({\r\n        setListingStatusAndCallback,\r\n        setLooksRareNonce,\r\n        getLooksRareNonce,\r\n        collectionsRequiringApproval,\r\n        listings,\r\n      }) => ({\r\n        setListingStatusAndCallback,\r\n        setLooksRareNonce,\r\n        getLooksRareNonce,\r\n        collectionsRequiringApproval,\r\n        listings,\r\n      }),\r\n      shallow\r\n    )\r\n\r\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\r\n  const [openSection, toggleOpenSection] = useReducer(\r\n    (s) => (s === Section.APPROVE ? Section.SIGN : Section.APPROVE),\r\n    Section.APPROVE\r\n  )\r\n  const nativeCurrency = useNativeCurrency()\r\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\r\n  const usdcValue = useStablecoinValue(parsedAmount)\r\n  const usdcAmount = formatCurrencyAmount(usdcValue, NumberType.FiatTokenPrice)\r\n\r\n  const allCollectionsApproved = useMemo(\r\n    () => collectionsRequiringApproval.every((collection) => collection.status === ListingStatus.APPROVED),\r\n    [collectionsRequiringApproval]\r\n  )\r\n\r\n  const allListingsApproved = useMemo(\r\n    () => listings.every((listing) => listing.status === ListingStatus.APPROVED),\r\n    [listings]\r\n  )\r\n\r\n  const signListings = async () => {\r\n    if (!signer || !provider) return\r\n    // sign listings\r\n    for (const listing of listings) {\r\n      await signListingRow(listing, signer, provider, getLooksRareNonce, setLooksRareNonce, setListingStatusAndCallback)\r\n    }\r\n\r\n    sendAnalyticsEvent(NFTEventName.NFT_LISTING_COMPLETED, {\r\n      signatures_approved: listings.filter((asset) => asset.status === ListingStatus.APPROVED),\r\n      list_quantity: listings.length,\r\n      usd_value: usdcAmount,\r\n      ...trace,\r\n    })\r\n  }\r\n\r\n  // Once all collections have been approved, go to next section and start signing listings\r\n  useEffect(() => {\r\n    if (allCollectionsApproved) {\r\n      signListings()\r\n      openSection === Section.APPROVE && toggleOpenSection()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [allCollectionsApproved])\r\n\r\n  const closeModalOnClick = useCallback(() => {\r\n    allListingsApproved ? window.location.reload() : overlayClick()\r\n  }, [allListingsApproved, overlayClick])\r\n\r\n  // In the case that a user removes all listings via retry logic, close modal\r\n  useEffect(() => {\r\n    !listings.length && closeModalOnClick()\r\n  }, [listings, closeModalOnClick])\r\n\r\n  return (\r\n    <Portal>\r\n      <Trace modal={InterfaceModalName.NFT_LISTING}>\r\n        <ListModalWrapper>\r\n          {allListingsApproved ? (\r\n            <SuccessScreen overlayClick={closeModalOnClick} />\r\n          ) : (\r\n            <>\r\n              <TitleRow>\r\n                <ThemedText.HeadlineSmall lineHeight=\"28px\">\r\n                  <Trans>List NFTs</Trans>\r\n                </ThemedText.HeadlineSmall>\r\n                <X size={24} cursor=\"pointer\" onClick={closeModalOnClick} />\r\n              </TitleRow>\r\n              <ListModalSection\r\n                sectionType={Section.APPROVE}\r\n                active={openSection === Section.APPROVE}\r\n                content={collectionsRequiringApproval}\r\n                toggleSection={toggleOpenSection}\r\n              />\r\n              <ListModalSection\r\n                sectionType={Section.SIGN}\r\n                active={openSection === Section.SIGN}\r\n                content={listings}\r\n                toggleSection={toggleOpenSection}\r\n              />\r\n            </>\r\n          )}\r\n        </ListModalWrapper>\r\n      </Trace>\r\n      <Overlay onClick={closeModalOnClick} />\r\n    </Portal>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { DropDownOption } from 'nft/types'\r\nimport { Check } from 'react-feather'\r\nimport styled, { useTheme } from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\n\r\nconst DropdownWrapper = styled(Column)<{ $width: number }>`\r\n  gap: 4px;\r\n  background: ${({ theme }) => theme.backgroundSurface};\r\n  padding: 8px;\r\n  width: ${({ $width }) => $width}px;\r\n  border-radius: 12px;\r\n  box-shadow: ${({ theme }) => theme.deepShadow};\r\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n`\r\n\r\nconst DropdownRow = styled(Row)`\r\n  justify-content: space-between;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  border-radius: 12px;\r\n\r\n  &:hover {\r\n    background: ${({ theme }) => theme.backgroundInteractive};\r\n  }\r\n`\r\n\r\ninterface DropdownArgs {\r\n  dropDownOptions: DropDownOption[]\r\n  width: number\r\n}\r\n\r\nexport const Dropdown = ({ dropDownOptions, width }: DropdownArgs) => {\r\n  const theme = useTheme()\r\n  return (\r\n    <DropdownWrapper $width={width}>\r\n      {dropDownOptions.map((option) => (\r\n        <DropdownRow key={option.displayText} onClick={option.onClick}>\r\n          <ThemedText.BodyPrimary lineHeight=\"24px\">{option.displayText}</ThemedText.BodyPrimary>\r\n          {option.isSelected && <Check height={20} width={20} color={theme.accentAction} />}\r\n        </DropdownRow>\r\n      ))}\r\n    </DropdownWrapper>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { BrokenLinkIcon } from 'nft/components/icons'\r\nimport { NumericInput } from 'nft/components/layout/Input'\r\nimport { useUpdateInputAndWarnings } from 'nft/components/profile/list/utils'\r\nimport { body } from 'nft/css/common.css'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { WalletAsset } from 'nft/types'\r\nimport { formatEth } from 'nft/utils/currency'\r\nimport { Dispatch, useRef, useState } from 'react'\r\nimport { AlertTriangle, Link } from 'react-feather'\r\nimport styled, { useTheme } from 'styled-components/macro'\r\nimport { BREAKPOINTS } from 'theme'\r\nimport { colors } from 'theme/colors'\r\n\r\nimport { WarningType } from './shared'\r\n\r\nconst PriceTextInputWrapper = styled(Column)`\r\n  gap: 12px;\r\n  position: relative;\r\n`\r\n\r\nconst InputWrapper = styled(Row)<{ borderColor: string }>`\r\n  height: 48px;\r\n  color: ${({ theme }) => theme.textTertiary};\r\n  padding: 12px;\r\n  border: 2px solid;\r\n  border-radius: 8px;\r\n  border-color: ${({ borderColor }) => borderColor};\r\n  margin-right: auto;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst CurrencyWrapper = styled.div<{ listPrice: number | undefined }>`\r\n  color: ${({ listPrice, theme }) => (listPrice ? theme.textPrimary : theme.textSecondary)};\r\n`\r\n\r\nconst GlobalPriceIcon = styled.div`\r\n  display: flex;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  bottom: 32px;\r\n  right: -10px;\r\n  background-color: ${({ theme }) => theme.backgroundSurface};\r\n  border-radius: 50%;\r\n  height: 28px;\r\n  width: 28px;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nconst WarningRow = styled(Row)`\r\n  gap: 4px;\r\n`\r\n\r\nconst WarningMessage = styled(Row)<{ $color: string }>`\r\n  top: 52px;\r\n  width: max-content;\r\n  position: absolute;\r\n  right: 0;\r\n  font-weight: 600;\r\n  font-size: 10px;\r\n  line-height: 12px;\r\n  color: ${({ $color }) => $color};\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    right: unset;\r\n  }\r\n`\r\n\r\nconst WarningAction = styled.div`\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.accentAction};\r\n`\r\n\r\nconst getWarningMessage = (warning: WarningType) => {\r\n  let message = <></>\r\n  switch (warning) {\r\n    case WarningType.BELOW_FLOOR:\r\n      message = <Trans>below floor price.</Trans>\r\n      break\r\n    case WarningType.ALREADY_LISTED:\r\n      message = <Trans>Already listed at</Trans>\r\n      break\r\n  }\r\n  return message\r\n}\r\n\r\ninterface PriceTextInputProps {\r\n  listPrice?: number\r\n  setListPrice: Dispatch<number | undefined>\r\n  isGlobalPrice: boolean\r\n  setGlobalOverride: Dispatch<boolean>\r\n  globalOverride: boolean\r\n  asset: WalletAsset\r\n}\r\n\r\nexport const PriceTextInput = ({\r\n  listPrice,\r\n  setListPrice,\r\n  isGlobalPrice,\r\n  setGlobalOverride,\r\n  globalOverride,\r\n  asset,\r\n}: PriceTextInputProps) => {\r\n  const [warningType, setWarningType] = useState(WarningType.NONE)\r\n  const removeSellAsset = useSellAsset((state) => state.removeSellAsset)\r\n  const showResolveIssues = useSellAsset((state) => state.showResolveIssues)\r\n  const inputRef = useRef() as React.MutableRefObject<HTMLInputElement>\r\n  const theme = useTheme()\r\n\r\n  const percentBelowFloor = (1 - (listPrice ?? 0) / (asset.floorPrice ?? 0)) * 100\r\n  const warningColor =\r\n    (showResolveIssues && !listPrice) ||\r\n    warningType === WarningType.ALREADY_LISTED ||\r\n    (warningType === WarningType.BELOW_FLOOR && percentBelowFloor >= 20)\r\n      ? colors.red400\r\n      : warningType === WarningType.BELOW_FLOOR\r\n      ? theme.accentWarning\r\n      : isGlobalPrice || !!listPrice\r\n      ? theme.accentAction\r\n      : theme.textSecondary\r\n\r\n  const setPrice = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (!listPrice && event.target.value.includes('.') && parseFloat(event.target.value) === 0) {\r\n      return\r\n    }\r\n    const val = parseFloat(event.target.value)\r\n    setListPrice(isNaN(val) ? undefined : val)\r\n  }\r\n\r\n  useUpdateInputAndWarnings(setWarningType, inputRef, asset, listPrice)\r\n\r\n  return (\r\n    <PriceTextInputWrapper>\r\n      <InputWrapper borderColor={warningColor}>\r\n        <NumericInput\r\n          as=\"input\"\r\n          pattern=\"[0-9]\"\r\n          borderStyle=\"none\"\r\n          className={body}\r\n          color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\r\n          placeholder=\"0\"\r\n          backgroundColor=\"none\"\r\n          width={{ sm: '54', md: '68' }}\r\n          ref={inputRef}\r\n          onChange={setPrice}\r\n        />\r\n        <CurrencyWrapper listPrice={listPrice}>&nbsp;ETH</CurrencyWrapper>\r\n        {(isGlobalPrice || globalOverride) && (\r\n          <GlobalPriceIcon onClick={() => setGlobalOverride(!globalOverride)}>\r\n            {globalOverride ? <BrokenLinkIcon /> : <Link size={20} color={warningColor} />}\r\n          </GlobalPriceIcon>\r\n        )}\r\n      </InputWrapper>\r\n      <WarningMessage $color={warningColor}>\r\n        {warningType !== WarningType.NONE && (\r\n          <WarningRow>\r\n            <AlertTriangle height={16} width={16} color={warningColor} />\r\n            <span>\r\n              {warningType === WarningType.BELOW_FLOOR && `${percentBelowFloor.toFixed(0)}% `}\r\n              {getWarningMessage(warningType)}\r\n              &nbsp;\r\n              {warningType === WarningType.ALREADY_LISTED && `${formatEth(asset?.floor_sell_order_price ?? 0)} ETH`}\r\n            </span>\r\n            <WarningAction\r\n              onClick={() => {\r\n                warningType === WarningType.ALREADY_LISTED && removeSellAsset(asset)\r\n                setWarningType(WarningType.NONE)\r\n              }}\r\n            >\r\n              {warningType === WarningType.BELOW_FLOOR ? <Trans>Dismiss</Trans> : <Trans>Remove item</Trans>}\r\n            </WarningAction>\r\n          </WarningRow>\r\n        )}\r\n      </WarningMessage>\r\n    </PriceTextInputWrapper>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { getMarketplaceFee, getRoyalty } from 'nft/components/profile/list/utils'\r\nimport { ListingMarket, WalletAsset } from 'nft/types'\r\nimport { formatEth } from 'nft/utils'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\n\r\nconst FeeWrap = styled(Row)`\r\n  margin-bottom: 4px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst RoyaltyContainer = styled(Column)`\r\n  gap: 12px;\r\n  padding: 4px 0px;\r\n`\r\n\r\nconst MarketIcon = styled.img`\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 2px;\r\n  object-fit: cover;\r\n  outline: 1px solid ${({ theme }) => theme.backgroundInteractive};\r\n  margin-right: 8px;\r\n`\r\n\r\nconst CollectionIcon = styled(MarketIcon)`\r\n  border-radius: 50%;\r\n`\r\n\r\nconst FeePercent = styled(ThemedText.Caption)`\r\n  line-height: 16px;\r\n  color: ${({ theme }) => theme.textSecondary};\r\n  white-space: nowrap;\r\n`\r\n\r\nconst MaxFeeContainer = styled(Row)`\r\n  justify-content: space-between;\r\n  padding-top: 12px;\r\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n`\r\n\r\nexport const RoyaltyTooltip = ({\r\n  selectedMarkets,\r\n  asset,\r\n  fees,\r\n}: {\r\n  selectedMarkets: ListingMarket[]\r\n  asset: WalletAsset\r\n  fees?: number\r\n}) => {\r\n  const maxRoyalty = Math.max(...selectedMarkets.map((market) => getRoyalty(market, asset) ?? 0)).toFixed(2)\r\n  return (\r\n    <RoyaltyContainer>\r\n      {selectedMarkets.map((market) => (\r\n        <FeeWrap key={asset.collection?.address ?? '' + asset.tokenId + market.name + 'fee'}>\r\n          <Row>\r\n            <MarketIcon src={market.icon} />\r\n            <ThemedText.Caption lineHeight=\"16px\" marginRight=\"12px\">\r\n              {market.name}&nbsp;\r\n              <Trans>fee</Trans>\r\n            </ThemedText.Caption>\r\n          </Row>\r\n          <FeePercent>{getMarketplaceFee(market, asset)}%</FeePercent>\r\n        </FeeWrap>\r\n      ))}\r\n      <FeeWrap>\r\n        <Row>\r\n          <CollectionIcon src={asset.collection?.imageUrl} />\r\n          <ThemedText.Caption lineHeight=\"16px\" marginRight=\"12px\">\r\n            <Trans>Max creator royalties</Trans>\r\n          </ThemedText.Caption>\r\n        </Row>\r\n        <FeePercent>{maxRoyalty}%</FeePercent>\r\n      </FeeWrap>\r\n      <MaxFeeContainer>\r\n        <ThemedText.Caption lineHeight=\"16px\">\r\n          <Trans>Max fees</Trans>\r\n        </ThemedText.Caption>\r\n        <ThemedText.Caption lineHeight=\"16px\" color={fees ? 'textPrimary' : 'textSecondary'}>\r\n          {fees ? formatEth(fees) : '-'} ETH\r\n        </ThemedText.Caption>\r\n      </MaxFeeContainer>\r\n    </RoyaltyContainer>\r\n  )\r\n}\r\n","// eslint-disable-next-line no-restricted-imports\r\nimport { t } from '@lingui/macro'\r\nimport Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { MouseoverTooltip } from 'components/Tooltip'\r\nimport { RowsCollpsedIcon, RowsExpandedIcon } from 'nft/components/icons'\r\nimport {\r\n  getMarketplaceFee,\r\n  getRoyalty,\r\n  useHandleGlobalPriceToggle,\r\n  useSyncPriceWithGlobalMethod,\r\n} from 'nft/components/profile/list/utils'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { ListingMarket, WalletAsset } from 'nft/types'\r\nimport { formatEth, formatUsdPrice } from 'nft/utils/currency'\r\nimport { fetchPrice } from 'nft/utils/fetchPrice'\r\nimport { Dispatch, DispatchWithoutAction, useCallback, useEffect, useMemo, useReducer, useState } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { BREAKPOINTS, ThemedText } from 'theme'\r\n\r\nimport { PriceTextInput } from './PriceTextInput'\r\nimport { RoyaltyTooltip } from './RoyaltyTooltip'\r\nimport { RemoveIconWrap, SetPriceMethod } from './shared'\r\n\r\nconst LastPriceInfo = styled(Column)`\r\n  text-align: left;\r\n  display: none;\r\n  flex: 1;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst FloorPriceInfo = styled(Column)`\r\n  text-align: left;\r\n  display: none;\r\n  flex: 1;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst RemoveMarketplaceWrap = styled(RemoveIconWrap)`\r\n  top: 8px;\r\n  left: 16px;\r\n  z-index: 3;\r\n`\r\n\r\nconst MarketIconsWrapper = styled(Row)`\r\n  position: relative;\r\n  margin-right: 12px;\r\n  width: 44px;\r\n  justify-content: flex-end;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst MarketIconWrapper = styled(Column)`\r\n  position: relative;\r\n  cursor: pointer;\r\n`\r\n\r\nconst MarketIcon = styled.img<{ index: number }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 4px;\r\n  object-fit: cover;\r\n  z-index: ${({ index }) => 2 - index};\r\n  margin-left: ${({ index }) => `${index === 0 ? 0 : -8}px`};\r\n  outline: 1px solid ${({ theme }) => theme.backgroundInteractive};\r\n`\r\n\r\nconst ExpandMarketIconWrapper = styled.div`\r\n  cursor: pointer;\r\n  margin-left: 4px;\r\n  height: 28px;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst FeeColumnWrapper = styled(Column)`\r\n  flex: 1;\r\n  align-items: flex-end;\r\n  display: none;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst FeeWrapper = styled.div`\r\n  width: min-content;\r\n  white-space: nowrap;\r\n`\r\n\r\nconst ReturnColumn = styled(Column)`\r\n  flex: 1.5;\r\n  display: none;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\ninterface MarketplaceRowProps {\r\n  globalPriceMethod?: SetPriceMethod\r\n  globalPrice?: number\r\n  setGlobalPrice: Dispatch<number | undefined>\r\n  selectedMarkets: ListingMarket[]\r\n  removeMarket?: () => void\r\n  asset: WalletAsset\r\n  expandMarketplaceRows?: boolean\r\n  rowHovered?: boolean\r\n  toggleExpandMarketplaceRows: DispatchWithoutAction\r\n}\r\n\r\nexport const MarketplaceRow = ({\r\n  globalPriceMethod,\r\n  globalPrice,\r\n  setGlobalPrice,\r\n  selectedMarkets,\r\n  removeMarket = undefined,\r\n  asset,\r\n  expandMarketplaceRows,\r\n  toggleExpandMarketplaceRows,\r\n  rowHovered,\r\n}: MarketplaceRowProps) => {\r\n  const setAssetListPrice = useSellAsset((state) => state.setAssetListPrice)\r\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\r\n  const [marketIconHovered, toggleMarketIconHovered] = useReducer((s) => !s, false)\r\n  const [marketRowHovered, toggleMarketRowHovered] = useReducer((s) => !s, false)\r\n  const [listPrice, setListPrice] = useState<number | undefined>(\r\n    () =>\r\n      asset.newListings?.find((listing) =>\r\n        expandMarketplaceRows ? listing.marketplace.name === selectedMarkets?.[0].name : !!listing.price\r\n      )?.price\r\n  )\r\n  const [globalOverride, setGlobalOverride] = useState(false)\r\n\r\n  const showGlobalPrice = globalPriceMethod === SetPriceMethod.SAME_PRICE && !globalOverride\r\n  const price = showGlobalPrice ? globalPrice : listPrice\r\n  const setPrice = useCallback(\r\n    (price?: number) => {\r\n      showGlobalPrice ? setGlobalPrice(price) : setListPrice(price)\r\n      for (const marketplace of selectedMarkets) setAssetListPrice(asset, price, marketplace)\r\n    },\r\n    [asset, selectedMarkets, setAssetListPrice, setGlobalPrice, showGlobalPrice]\r\n  )\r\n\r\n  const fees = useMemo(() => {\r\n    if (selectedMarkets.length === 1) {\r\n      return getRoyalty(selectedMarkets[0], asset) + getMarketplaceFee(selectedMarkets[0], asset)\r\n    } else {\r\n      let max = 0\r\n      for (const selectedMarket of selectedMarkets) {\r\n        const fee = getRoyalty(selectedMarket, asset) + getMarketplaceFee(selectedMarket, asset)\r\n        max = Math.max(fee, max)\r\n      }\r\n\r\n      return max\r\n    }\r\n  }, [asset, selectedMarkets])\r\n\r\n  const feeInEth = price && (price * fees) / 100\r\n  const userReceives = price && feeInEth && price - feeInEth\r\n\r\n  useHandleGlobalPriceToggle(globalOverride, setListPrice, setPrice, listPrice, globalPrice)\r\n  useSyncPriceWithGlobalMethod(\r\n    asset,\r\n    setListPrice,\r\n    setGlobalPrice,\r\n    setGlobalOverride,\r\n    listPrice,\r\n    globalPrice,\r\n    globalPriceMethod\r\n  )\r\n\r\n  // When in Same Price Mode and not overriding, update local price when global price changes\r\n  useEffect(() => {\r\n    if (showGlobalPrice) {\r\n      setPrice(globalPrice)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [globalPrice])\r\n\r\n  return (\r\n    <Row onMouseEnter={toggleMarketRowHovered} onMouseLeave={toggleMarketRowHovered}>\r\n      <FloorPriceInfo>\r\n        <ThemedText.BodyPrimary color=\"textSecondary\" lineHeight=\"24px\">\r\n          {asset.floorPrice ? `${asset.floorPrice.toFixed(3)} ETH` : '-'}\r\n        </ThemedText.BodyPrimary>\r\n      </FloorPriceInfo>\r\n      <LastPriceInfo>\r\n        <ThemedText.BodyPrimary color=\"textSecondary\" lineHeight=\"24px\">\r\n          {asset.lastPrice ? `${asset.lastPrice.toFixed(3)} ETH` : '-'}\r\n        </ThemedText.BodyPrimary>\r\n      </LastPriceInfo>\r\n\r\n      <Row flex=\"2\">\r\n        {(expandMarketplaceRows || selectedMarkets.length > 1) && (\r\n          <MarketIconsWrapper onMouseEnter={toggleMarketIconHovered} onMouseLeave={toggleMarketIconHovered}>\r\n            {selectedMarkets.map((market, index) => (\r\n              <MarketIconWrapper\r\n                key={market.name + asset.collection?.address + asset.tokenId}\r\n                onClick={(e) => {\r\n                  e.stopPropagation()\r\n                  removeAssetMarketplace(asset, market)\r\n                  removeMarket && removeMarket()\r\n                }}\r\n              >\r\n                <MarketIcon alt={market.name} src={market.icon} index={index} />\r\n                <RemoveMarketplaceWrap hovered={marketIconHovered && (expandMarketplaceRows ?? false)}>\r\n                  <img width=\"20px\" src=\"/nft/svgs/minusCircle.svg\" alt=\"Remove item\" />\r\n                </RemoveMarketplaceWrap>\r\n              </MarketIconWrapper>\r\n            ))}\r\n          </MarketIconsWrapper>\r\n        )}\r\n        <PriceTextInput\r\n          listPrice={price}\r\n          setListPrice={setPrice}\r\n          isGlobalPrice={showGlobalPrice}\r\n          setGlobalOverride={setGlobalOverride}\r\n          globalOverride={globalOverride}\r\n          asset={asset}\r\n        />\r\n        {rowHovered && ((expandMarketplaceRows && marketRowHovered) || selectedMarkets.length > 1) && (\r\n          <ExpandMarketIconWrapper onClick={toggleExpandMarketplaceRows}>\r\n            {expandMarketplaceRows ? <RowsExpandedIcon /> : <RowsCollpsedIcon />}\r\n          </ExpandMarketIconWrapper>\r\n        )}\r\n      </Row>\r\n\r\n      <FeeColumnWrapper>\r\n        <MouseoverTooltip\r\n          text={<RoyaltyTooltip selectedMarkets={selectedMarkets} asset={asset} fees={feeInEth} />}\r\n          placement=\"left\"\r\n        >\r\n          <FeeWrapper>\r\n            <ThemedText.BodyPrimary color=\"textSecondary\">\r\n              {fees > 0 ? `${fees.toFixed(2)}${selectedMarkets.length > 1 ? t`% max` : '%'}` : '--%'}\r\n            </ThemedText.BodyPrimary>\r\n          </FeeWrapper>\r\n        </MouseoverTooltip>\r\n      </FeeColumnWrapper>\r\n\r\n      <ReturnColumn>\r\n        <EthPriceDisplay ethPrice={userReceives} />\r\n      </ReturnColumn>\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst EthPriceDisplay = ({ ethPrice = 0 }: { ethPrice?: number }) => {\r\n  const [ethConversion, setEthConversion] = useState(3000)\r\n  useEffect(() => {\r\n    fetchPrice().then((price) => {\r\n      setEthConversion(price ?? 0)\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <Row width=\"100%\" justify=\"flex-end\">\r\n      <ThemedText.BodyPrimary lineHeight=\"24px\" color={ethPrice ? 'textPrimary' : 'textSecondary'} textAlign=\"right\">\r\n        {ethPrice !== 0 ? (\r\n          <Column>\r\n            <span>{formatEth(ethPrice)} ETH</span>\r\n            <ThemedText.BodyPrimary color=\"textSecondary\">\r\n              {formatUsdPrice(ethPrice * ethConversion)}\r\n            </ThemedText.BodyPrimary>\r\n          </Column>\r\n        ) : (\r\n          '- ETH'\r\n        )}\r\n      </ThemedText.BodyPrimary>\r\n    </Row>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { ListingMarket, WalletAsset } from 'nft/types'\r\nimport { Dispatch, useEffect, useReducer, useState } from 'react'\r\nimport { Trash2 } from 'react-feather'\r\nimport styled, { css, useTheme } from 'styled-components/macro'\r\nimport { BREAKPOINTS, ThemedText } from 'theme'\r\n\r\nimport { MarketplaceRow } from './MarketplaceRow'\r\nimport { SetPriceMethod } from './shared'\r\n\r\nconst IMAGE_THUMBNAIL_SIZE = 60\r\n\r\nconst NFTListRowWrapper = styled(Row)`\r\n  padding: 24px 0px;\r\n  align-items: center;\r\n  border-radius: 8px;\r\n\r\n  &:hover {\r\n    background: ${({ theme }) => theme.backgroundOutline};\r\n  }\r\n`\r\n\r\nconst RemoveIconContainer = styled.div`\r\n  width: ${IMAGE_THUMBNAIL_SIZE}px;\r\n  height: ${IMAGE_THUMBNAIL_SIZE}px;\r\n  padding-left: 12px;\r\n  align-self: flex-start;\r\n  align-items: center;\r\n  display: flex;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    display: none;\r\n  }\r\n\r\n  &:hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n`\r\n\r\nconst NFTInfoWrapper = styled(Row)`\r\n  align-items: center;\r\n  min-width: 0px;\r\n  flex: 2;\r\n  margin-bottom: auto;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    flex: 1.5;\r\n  }\r\n`\r\n\r\nconst NFTImage = styled.img`\r\n  width: ${IMAGE_THUMBNAIL_SIZE}px;\r\n  height: ${IMAGE_THUMBNAIL_SIZE}px;\r\n  border-radius: 8px;\r\n  margin-right: 8px;\r\n`\r\n\r\nconst HideTextOverflow = css`\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`\r\n\r\nconst TokenInfoWrapper = styled(Column)`\r\n  margin-right: 8px;\r\n  min-width: 0px;\r\n`\r\n\r\nconst TokenName = styled.div`\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  ${HideTextOverflow}\r\n`\r\n\r\nconst CollectionName = styled(ThemedText.BodySmall)`\r\n  color: ${({ theme }) => theme.textSecondary};\r\n  line-height: 20px;\r\n  ${HideTextOverflow};\r\n`\r\n\r\nconst MarketPlaceRowWrapper = styled(Column)`\r\n  gap: 24px;\r\n  flex: 1.5;\r\n  margin-right: 12px;\r\n  padding: 6px 0px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    flex: 2;\r\n  }\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    flex: 3;\r\n  }\r\n`\r\n\r\ninterface NFTListRowProps {\r\n  asset: WalletAsset\r\n  globalPriceMethod?: SetPriceMethod\r\n  setGlobalPrice: Dispatch<number | undefined>\r\n  globalPrice?: number\r\n  selectedMarkets: ListingMarket[]\r\n}\r\n\r\n/**\r\n * NFTListRow is the outermost row wrapper for an NFT Listing, which shows either the composite of multiple marketplaces listings\r\n * or can be expanded to show listings per marketplace\r\n */\r\nexport const NFTListRow = ({\r\n  asset,\r\n  globalPriceMethod,\r\n  globalPrice,\r\n  setGlobalPrice,\r\n  selectedMarkets,\r\n}: NFTListRowProps) => {\r\n  const [expandMarketplaceRows, toggleExpandMarketplaceRows] = useReducer((s) => !s, false)\r\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\r\n  const [localMarkets, setLocalMarkets] = useState<ListingMarket[]>([])\r\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\r\n  const theme = useTheme()\r\n\r\n  // Keep localMarkets up to date with changes to globalMarkets\r\n  useEffect(() => {\r\n    setLocalMarkets(JSON.parse(JSON.stringify(selectedMarkets)))\r\n  }, [selectedMarkets])\r\n\r\n  return (\r\n    <NFTListRowWrapper\r\n      onMouseEnter={() => {\r\n        !hovered && toggleHovered()\r\n      }}\r\n      onMouseLeave={() => {\r\n        hovered && toggleHovered()\r\n      }}\r\n    >\r\n      <RemoveIconContainer>\r\n        {hovered && (\r\n          <Trash2\r\n            size={20}\r\n            color={theme.textSecondary}\r\n            cursor=\"pointer\"\r\n            onClick={() => {\r\n              removeAsset(asset)\r\n            }}\r\n          />\r\n        )}\r\n      </RemoveIconContainer>\r\n\r\n      <NFTInfoWrapper>\r\n        <NFTImage alt={asset.name} src={asset.imageUrl || '/nft/svgs/image-placeholder.svg'} />\r\n        <TokenInfoWrapper>\r\n          <TokenName>{asset.name ? asset.name : `#${asset.tokenId}`}</TokenName>\r\n          <CollectionName>\r\n            {asset.collection?.name}\r\n            {asset.collectionIsVerified && <VerifiedIcon style={{ marginBottom: '-5px' }} />}\r\n          </CollectionName>\r\n        </TokenInfoWrapper>\r\n      </NFTInfoWrapper>\r\n      <MarketPlaceRowWrapper>\r\n        {expandMarketplaceRows && localMarkets.length > 1 ? (\r\n          localMarkets.map((market) => {\r\n            return (\r\n              <MarketplaceRow\r\n                globalPriceMethod={globalPriceMethod}\r\n                globalPrice={globalPrice}\r\n                setGlobalPrice={setGlobalPrice}\r\n                selectedMarkets={[market]}\r\n                removeMarket={() => setLocalMarkets(localMarkets.filter((oldMarket) => oldMarket.name !== market.name))}\r\n                asset={asset}\r\n                key={asset.name + market.name}\r\n                expandMarketplaceRows={expandMarketplaceRows}\r\n                rowHovered={hovered}\r\n                toggleExpandMarketplaceRows={toggleExpandMarketplaceRows}\r\n              />\r\n            )\r\n          })\r\n        ) : (\r\n          <MarketplaceRow\r\n            globalPriceMethod={globalPriceMethod}\r\n            globalPrice={globalPrice}\r\n            setGlobalPrice={setGlobalPrice}\r\n            selectedMarkets={localMarkets}\r\n            asset={asset}\r\n            rowHovered={hovered}\r\n            toggleExpandMarketplaceRows={toggleExpandMarketplaceRows}\r\n          />\r\n        )}\r\n      </MarketPlaceRowWrapper>\r\n    </NFTListRowWrapper>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { DropDownOption, ListingMarket } from 'nft/types'\r\nimport { useMemo, useReducer, useRef, useState } from 'react'\r\nimport { ChevronDown } from 'react-feather'\r\nimport styled, { css } from 'styled-components/macro'\r\nimport { BREAKPOINTS } from 'theme'\r\n\r\nimport { Dropdown } from './Dropdown'\r\nimport { NFTListRow } from './NFTListRow'\r\nimport { SetPriceMethod } from './shared'\r\n\r\nconst TableHeader = styled.div`\r\n  display: flex;\r\n  position: sticky;\r\n  align-items: center;\r\n  top: 72px;\r\n  padding-top: 24px;\r\n  padding-bottom: 24px;\r\n  z-index: 3;\r\n  background-color: ${({ theme }) => theme.backgroundBackdrop};\r\n  color: ${({ theme }) => theme.textSecondary};\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n  line-height: 20px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\r\n    padding-left: 48px;\r\n  }\r\n`\r\n\r\nconst NFTHeader = styled.div`\r\n  flex: 2;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    flex: 1.5;\r\n  }\r\n`\r\n\r\nconst PriceHeaders = styled(Row)`\r\n  flex: 1.5;\r\n  margin-right: 12px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    flex: 3;\r\n  }\r\n`\r\n\r\nconst LastPriceHeader = styled.div`\r\n  display: none;\r\n  flex: 1;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst FloorPriceHeader = styled.div`\r\n  display: none;\r\n  flex: 1;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst DropdownAndHeaderWrapper = styled(Row)`\r\n  flex: 2;\r\n  gap: 4px;\r\n`\r\n\r\nconst DropdownPromptContainer = styled(Column)`\r\n  position: relative;\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst DropdownPrompt = styled(Row)`\r\n  gap: 4px;\r\n  background-color: ${({ theme }) => theme.backgroundInteractive};\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n  border-radius: 4px;\r\n  padding: 2px 6px;\r\n  width: min-content;\r\n  white-space: nowrap;\r\n  color: ${({ theme }) => theme.textPrimary};\r\n\r\n  &:hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n`\r\n\r\nconst DropdownChevron = styled(ChevronDown)<{ isOpen: boolean }>`\r\n  height: 16px;\r\n  width: 16px;\r\n  color: ${({ theme }) => theme.textSecondary};\r\n  transform: ${({ isOpen }) => isOpen && 'rotate(180deg)'};\r\n  transition: ${({\r\n    theme: {\r\n      transition: { duration, timing },\r\n    },\r\n  }) => `transform ${duration.fast} ${timing.ease}`};\r\n`\r\n\r\nconst DropdownContainer = styled.div`\r\n  position: absolute;\r\n  top: 36px;\r\n  right: 0px;\r\n`\r\n\r\nconst FeeUserReceivesSharedStyles = css`\r\n  display: none;\r\n  justify-content: flex-end;\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst FeeHeader = styled.div`\r\n  flex: 1;\r\n  ${FeeUserReceivesSharedStyles}\r\n`\r\n\r\nconst UserReceivesHeader = styled.div`\r\n  flex: 1.5;\r\n  ${FeeUserReceivesSharedStyles}\r\n`\r\n\r\nconst RowDivider = styled.hr`\r\n  height: 0px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border-width: 0.5px;\r\n  border-style: solid;\r\n  margin: 0;\r\n  border-color: ${({ theme }) => theme.backgroundInteractive};\r\n`\r\n\r\nexport const NFTListingsGrid = ({ selectedMarkets }: { selectedMarkets: ListingMarket[] }) => {\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const [globalPriceMethod, setGlobalPriceMethod] = useState(SetPriceMethod.CUSTOM)\r\n  const [globalPrice, setGlobalPrice] = useState<number>()\r\n  const [showDropdown, toggleShowDropdown] = useReducer((s) => !s, false)\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n  useOnClickOutside(dropdownRef, showDropdown ? toggleShowDropdown : undefined)\r\n\r\n  const priceDropdownOptions: DropDownOption[] = useMemo(\r\n    () => [\r\n      {\r\n        displayText: 'Custom',\r\n        isSelected: globalPriceMethod === SetPriceMethod.CUSTOM,\r\n        onClick: () => {\r\n          setGlobalPriceMethod(SetPriceMethod.CUSTOM)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'Floor price',\r\n        isSelected: globalPriceMethod === SetPriceMethod.FLOOR_PRICE,\r\n        onClick: () => {\r\n          setGlobalPriceMethod(SetPriceMethod.FLOOR_PRICE)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'Last price',\r\n        isSelected: globalPriceMethod === SetPriceMethod.LAST_PRICE,\r\n        onClick: () => {\r\n          setGlobalPriceMethod(SetPriceMethod.LAST_PRICE)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'Same price',\r\n        isSelected: globalPriceMethod === SetPriceMethod.SAME_PRICE,\r\n        onClick: () => {\r\n          setGlobalPriceMethod(SetPriceMethod.SAME_PRICE)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n    ],\r\n    [globalPriceMethod]\r\n  )\r\n\r\n  let prompt\r\n  switch (globalPriceMethod) {\r\n    case SetPriceMethod.CUSTOM:\r\n      prompt = <Trans>Custom</Trans>\r\n      break\r\n    case SetPriceMethod.FLOOR_PRICE:\r\n      prompt = <Trans>Floor price</Trans>\r\n      break\r\n    case SetPriceMethod.LAST_PRICE:\r\n      prompt = <Trans>Last Price</Trans>\r\n      break\r\n    case SetPriceMethod.SAME_PRICE:\r\n      prompt = <Trans>Same Price</Trans>\r\n      break\r\n    default:\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Column>\r\n      <TableHeader>\r\n        <NFTHeader>\r\n          <Trans>NFT</Trans>\r\n        </NFTHeader>\r\n        <PriceHeaders>\r\n          <FloorPriceHeader>\r\n            <Trans>Floor</Trans>\r\n          </FloorPriceHeader>\r\n          <LastPriceHeader>\r\n            <Trans>Last</Trans>\r\n          </LastPriceHeader>\r\n\r\n          <DropdownAndHeaderWrapper ref={dropdownRef}>\r\n            <Trans>Price</Trans>\r\n            <DropdownPromptContainer>\r\n              <DropdownPrompt onClick={toggleShowDropdown}>\r\n                {prompt} <DropdownChevron isOpen={showDropdown} />\r\n              </DropdownPrompt>\r\n              {showDropdown && (\r\n                <DropdownContainer>\r\n                  <Dropdown dropDownOptions={priceDropdownOptions} width={200} />\r\n                </DropdownContainer>\r\n              )}\r\n            </DropdownPromptContainer>\r\n          </DropdownAndHeaderWrapper>\r\n\r\n          <FeeHeader>\r\n            <Trans>Fees</Trans>\r\n          </FeeHeader>\r\n          <UserReceivesHeader>\r\n            <Trans>You receive</Trans>\r\n          </UserReceivesHeader>\r\n        </PriceHeaders>\r\n      </TableHeader>\r\n      {sellAssets.map((asset) => {\r\n        return (\r\n          <>\r\n            <NFTListRow\r\n              asset={asset}\r\n              globalPriceMethod={globalPriceMethod}\r\n              globalPrice={globalPrice}\r\n              setGlobalPrice={setGlobalPrice}\r\n              selectedMarkets={selectedMarkets}\r\n            />\r\n            {sellAssets.indexOf(asset) < sellAssets.length - 1 && <RowDivider />}\r\n          </>\r\n        )\r\n      })}\r\n    </Column>\r\n  )\r\n}\r\n","import { SMALL_MEDIA_BREAKPOINT } from 'components/Tokens/constants'\r\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { ChevronUpIcon } from 'nft/components/icons'\r\nimport { Checkbox } from 'nft/components/layout/Checkbox'\r\nimport { buttonTextMedium, caption } from 'nft/css/common.css'\r\nimport { themeVars } from 'nft/css/sprinkles.css'\r\nimport { ListingMarket } from 'nft/types'\r\nimport { ListingMarkets } from 'nft/utils/listNfts'\r\nimport { Dispatch, FormEvent, useMemo, useReducer, useRef } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\n\r\nconst MarketplaceRowWrapper = styled(Row)`\r\n  gap: 6px;\r\n  height: 44px;\r\n  width: 100%;\r\n  cursor: pointer;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.backgroundInteractive};\r\n  }\r\n  border-radius: 12px;\r\n`\r\n\r\nconst MarketplaceDropdownIcon = styled.img`\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 4px;\r\n  object-fit: cover;\r\n`\r\n\r\nconst FeeText = styled.div`\r\n  color: ${({ theme }) => theme.textSecondary};\r\n`\r\n\r\ninterface MarketplaceRowProps {\r\n  market: ListingMarket\r\n  setSelectedMarkets: Dispatch<ListingMarket[]>\r\n  selectedMarkets: ListingMarket[]\r\n}\r\n\r\nconst MarketplaceRow = ({ market, setSelectedMarkets, selectedMarkets }: MarketplaceRowProps) => {\r\n  const isSelected = selectedMarkets.includes(market)\r\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\r\n\r\n  const toggleSelected = () => {\r\n    if (selectedMarkets.length === 1 && isSelected) return\r\n    isSelected\r\n      ? setSelectedMarkets(selectedMarkets.filter((selected: ListingMarket) => selected !== market))\r\n      : setSelectedMarkets([...selectedMarkets, market])\r\n  }\r\n\r\n  const handleCheckbox = (e: FormEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n  }\r\n  return (\r\n    <MarketplaceRowWrapper onMouseEnter={toggleHovered} onMouseLeave={toggleHovered} onClick={toggleSelected}>\r\n      <Row gap=\"12\" onClick={toggleSelected}>\r\n        <MarketplaceDropdownIcon alt={market.name} src={market.icon} />\r\n        <Column>\r\n          <ThemedText.BodyPrimary>{market.name}</ThemedText.BodyPrimary>\r\n          <FeeText className={caption}>{market.fee}% fee</FeeText>\r\n        </Column>\r\n      </Row>\r\n\r\n      <Checkbox hovered={hovered} checked={isSelected} onClick={handleCheckbox}>\r\n        <span />\r\n      </Checkbox>\r\n    </MarketplaceRowWrapper>\r\n  )\r\n}\r\n\r\nconst HeaderButtonWrap = styled(Row)`\r\n  padding: 12px;\r\n  border-radius: 12px;\r\n  width: 180px;\r\n  justify-content: space-between;\r\n  background: ${({ theme }) => theme.backgroundInteractive};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n  @media screen and (min-width: ${SMALL_MEDIA_BREAKPOINT}) {\r\n    width: 220px;\r\n  }\r\n`\r\n\r\nconst HeaderButtonContentWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst MarketIcon = styled.img<{ index: number; totalSelected: number }>`\r\n  height: 20px;\r\n  width: 20px;\r\n  margin-right: 8px;\r\n  border: 1px solid;\r\n  border-color: ${({ theme }) => theme.backgroundInteractive};\r\n  border-radius: 4px;\r\n  z-index: ${({ index, totalSelected }) => totalSelected - index};\r\n  margin-left: ${({ index }) => `${index === 0 ? 0 : -18}px`};\r\n`\r\n\r\nconst Chevron = styled(ChevronUpIcon)<{ isOpen: boolean }>`\r\n  height: 20px;\r\n  width: 20px;\r\n  fill: ${({ theme }) => theme.textPrimary};\r\n  transition: ${({\r\n    theme: {\r\n      transition: { duration },\r\n    },\r\n  }) => `${duration.fast} transform`};\r\n  transform: ${({ isOpen }) => `rotate(${isOpen ? 0 : 180}deg)`};\r\n`\r\n\r\nconst ModalWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n`\r\n\r\nconst DropdownWrapper = styled(Column)<{ isOpen: boolean }>`\r\n  padding: 16px 0px;\r\n  background-color: ${({ theme }) => theme.backgroundSurface};\r\n  display: ${({ isOpen }) => (isOpen ? 'flex' : 'none')};\r\n  position: absolute;\r\n  top: 52px;\r\n  width: 100%;\r\n  border-radius: 12px;\r\n  gap: 12px;\r\n  z-index: ${Z_INDEX.modalBackdrop};\r\n  box-shadow: ${({ theme }) => theme.deepShadow};\r\n  border: 0.5px solid ${({ theme }) => theme.backgroundOutline};\r\n`\r\n\r\nexport const SelectMarketplacesDropdown = ({\r\n  setSelectedMarkets,\r\n  selectedMarkets,\r\n}: {\r\n  setSelectedMarkets: Dispatch<ListingMarket[]>\r\n  selectedMarkets: ListingMarket[]\r\n}) => {\r\n  const [isOpen, toggleIsOpen] = useReducer((s) => !s, false)\r\n  const dropdownDisplayText = useMemo(\r\n    () => (selectedMarkets.length === 1 ? selectedMarkets[0].name : 'Multiple'),\r\n    [selectedMarkets]\r\n  )\r\n  const ref = useRef<HTMLDivElement>(null)\r\n  useOnClickOutside(ref, () => isOpen && toggleIsOpen())\r\n  return (\r\n    <ModalWrapper ref={ref}>\r\n      <HeaderButtonWrap className={buttonTextMedium} onClick={toggleIsOpen}>\r\n        <HeaderButtonContentWrapper>\r\n          {selectedMarkets.map((market, index) => {\r\n            return (\r\n              <MarketIcon\r\n                key={index}\r\n                alt={market.name}\r\n                src={market.icon}\r\n                totalSelected={selectedMarkets.length}\r\n                index={index}\r\n              />\r\n            )\r\n          })}\r\n          {dropdownDisplayText}\r\n        </HeaderButtonContentWrapper>\r\n\r\n        <Chevron isOpen={isOpen} secondaryColor={themeVars.colors.textPrimary} />\r\n      </HeaderButtonWrap>\r\n      <DropdownWrapper isOpen={isOpen}>\r\n        {ListingMarkets.map((market) => {\r\n          return MarketplaceRow({ market, setSelectedMarkets, selectedMarkets })\r\n        })}\r\n      </DropdownWrapper>\r\n    </ModalWrapper>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\r\nimport { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\r\nimport { formatCurrencyAmount, NumberType } from '@uniswap/conedison/format'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\r\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { ListingButton } from 'nft/components/profile/list/ListingButton'\r\nimport {\r\n  approveCollectionRow,\r\n  getTotalEthValue,\r\n  useSubscribeListingState,\r\n  verifyStatus,\r\n} from 'nft/components/profile/list/utils'\r\nimport { useIsMobile, useNFTList, useProfilePageState, useSellAsset } from 'nft/hooks'\r\nimport { LIST_PAGE_MARGIN, LIST_PAGE_MARGIN_MOBILE } from 'nft/pages/profile/shared'\r\nimport { looksRareNonceFetcher } from 'nft/queries'\r\nimport { ProfilePageStateType } from 'nft/types'\r\nimport { formatEth } from 'nft/utils'\r\nimport { ListingMarkets } from 'nft/utils/listNfts'\r\nimport { useEffect, useMemo, useReducer, useState } from 'react'\r\nimport { ArrowLeft } from 'react-feather'\r\nimport styled from 'styled-components/macro'\r\nimport { BREAKPOINTS, ThemedText } from 'theme'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport { ListModal } from './Modal/ListModal'\r\nimport { NFTListingsGrid } from './NFTListingsGrid'\r\nimport { SelectMarketplacesDropdown } from './SelectMarketplacesDropdown'\r\nimport { SetDurationModal } from './SetDurationModal'\r\n\r\nconst ListingHeader = styled(Column)`\r\n  gap: 16px;\r\n  margin-top: 36px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.xs}px) {\r\n    gap: 4px;\r\n  }\r\n`\r\n\r\nconst ArrowContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 4px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\r\n    height: 40px;\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst BackArrow = styled(ArrowLeft)`\r\n  height: 16px;\r\n  width: 16px;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.textSecondary};\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\r\n    height: 20px;\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst TitleWrapper = styled(Row)`\r\n  gap: 4px;\r\n  margin-bottom: 12px;\r\n  white-space: nowrap;\r\n  width: min-content;\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 28px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.xs}px) {\r\n    margin-bottom: 0px;\r\n    font-weight: 500;\r\n    font-size: 28px;\r\n    line-height: 36px;\r\n  }\r\n`\r\n\r\nconst ButtonsWrapper = styled(Row)`\r\n  gap: 12px;\r\n  width: min-content;\r\n`\r\n\r\nconst MarketWrap = styled.section`\r\n  gap: 48px;\r\n  margin: 0px auto;\r\n  width: 100%;\r\n  max-width: 1200px;\r\n`\r\n\r\nconst ListingHeaderRow = styled(Row)`\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\r\n    padding-left: 40px;\r\n  }\r\n`\r\n\r\nconst GridWrapper = styled.div`\r\n  margin-top: 24px;\r\n  margin-bottom: 48px;\r\n`\r\n\r\nconst FloatingConfirmationBar = styled(Row)<{ issues: boolean }>`\r\n  padding: 12px 12px 12px 32px;\r\n  border: 1px solid;\r\n  border-color: ${({ theme, issues }) => (issues ? theme.backgroundOutline : theme.accentAction)};\r\n  border-radius: 20px;\r\n  white-space: nowrap;\r\n  justify-content: space-between;\r\n  background: ${({ theme }) => theme.backgroundSurface};\r\n  position: fixed;\r\n  bottom: 32px;\r\n  width: calc(100vw - ${LIST_PAGE_MARGIN * 2}px);\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  max-width: 1200px;\r\n  z-index: ${Z_INDEX.under_dropdown};\r\n  box-shadow: ${({ theme }) => theme.shallowShadow};\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.lg}px) {\r\n    bottom: 68px;\r\n  }\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    width: calc(100% - ${LIST_PAGE_MARGIN_MOBILE * 2}px);\r\n    padding: 8px 8px 8px 16px;\r\n  }\r\n`\r\n\r\nconst Overlay = styled.div`\r\n  position: fixed;\r\n  bottom: 0px;\r\n  height: 158px;\r\n  width: 100vw;\r\n  background: ${({ theme }) => `linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, ${theme.backgroundBackdrop} 100%)`};\r\n`\r\n\r\nconst UsdValue = styled(ThemedText.SubHeader)`\r\n  line-height: 24px;\r\n  color: ${({ theme }) => theme.textSecondary};\r\n  display: none;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst ProceedsAndButtonWrapper = styled(Row)`\r\n  width: min-content;\r\n  gap: 40px;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    gap: 20px;\r\n  }\r\n`\r\n\r\nconst ProceedsWrapper = styled(Row)`\r\n  width: min-content;\r\n  gap: 16px;\r\n`\r\n\r\nconst EthValueWrapper = styled.span<{ totalEthListingValue: boolean }>`\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 28px;\r\n  color: ${({ theme, totalEthListingValue }) => (totalEthListingValue ? theme.textPrimary : theme.textSecondary)};\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    font-size: 16px;\r\n    line-height: 24px;\r\n  }\r\n`\r\n\r\nexport const ListPage = () => {\r\n  const { setProfilePageState: setSellPageState } = useProfilePageState()\r\n  const { provider } = useWeb3React()\r\n  const isMobile = useIsMobile()\r\n  const trace = useTrace({ modal: InterfaceModalName.NFT_LISTING })\r\n  const { setGlobalMarketplaces, sellAssets, issues } = useSellAsset(\r\n    ({ setGlobalMarketplaces, sellAssets, issues }) => ({\r\n      setGlobalMarketplaces,\r\n      sellAssets,\r\n      issues,\r\n    }),\r\n    shallow\r\n  )\r\n  const { listings, collectionsRequiringApproval, setLooksRareNonce, setCollectionStatusAndCallback } = useNFTList(\r\n    ({ listings, collectionsRequiringApproval, setLooksRareNonce, setCollectionStatusAndCallback }) => ({\r\n      listings,\r\n      collectionsRequiringApproval,\r\n      setLooksRareNonce,\r\n      setCollectionStatusAndCallback,\r\n    }),\r\n    shallow\r\n  )\r\n\r\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\r\n  const nativeCurrency = useNativeCurrency()\r\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\r\n  const usdcValue = useStablecoinValue(parsedAmount)\r\n  const usdcAmount = formatCurrencyAmount(usdcValue, NumberType.FiatTokenPrice)\r\n  const [showListModal, toggleShowListModal] = useReducer((s) => !s, false)\r\n  const [selectedMarkets, setSelectedMarkets] = useState([ListingMarkets[0]]) // default marketplace: x2y2\r\n  const signer = provider?.getSigner()\r\n\r\n  // instantiate listings and collections to approve when users modify input data\r\n  useSubscribeListingState()\r\n\r\n  useEffect(() => {\r\n    setGlobalMarketplaces(selectedMarkets)\r\n  }, [selectedMarkets, setGlobalMarketplaces])\r\n\r\n  const startListingEventProperties = {\r\n    collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\r\n    token_ids: sellAssets.map((asset) => asset.tokenId),\r\n    marketplaces: Array.from(new Set(listings.map((asset) => asset.marketplace.name))),\r\n    list_quantity: listings.length,\r\n    usd_value: usdcAmount,\r\n    ...trace,\r\n  }\r\n\r\n  const startListingFlow = async () => {\r\n    if (!signer) return\r\n    sendAnalyticsEvent(NFTEventName.NFT_SELL_START_LISTING, { ...startListingEventProperties })\r\n    const signerAddress = await signer.getAddress()\r\n    const nonce = await looksRareNonceFetcher(signerAddress)\r\n    setLooksRareNonce(nonce ?? 0)\r\n\r\n    // for all unique collection, marketplace combos -> approve collections\r\n    for (const collectionRow of collectionsRequiringApproval) {\r\n      verifyStatus(collectionRow.status) &&\r\n        (isMobile\r\n          ? await approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback)\r\n          : approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback))\r\n    }\r\n  }\r\n\r\n  const showModalAndStartListing = () => {\r\n    toggleShowListModal()\r\n    startListingFlow()\r\n  }\r\n\r\n  const BannerText = isMobile ? (\r\n    <ThemedText.SubHeader lineHeight=\"24px\">\r\n      <Trans>Receive</Trans>\r\n    </ThemedText.SubHeader>\r\n  ) : (\r\n    <ThemedText.HeadlineSmall lineHeight=\"28px\">\r\n      <Trans>You receive</Trans>\r\n    </ThemedText.HeadlineSmall>\r\n  )\r\n\r\n  return (\r\n    <Column>\r\n      <MarketWrap>\r\n        <ListingHeader>\r\n          <Row>\r\n            <ArrowContainer>\r\n              <BackArrow onClick={() => setSellPageState(ProfilePageStateType.VIEWING)} />\r\n            </ArrowContainer>\r\n            <ThemedText.BodySmall lineHeight=\"20px\" color=\"textSecondary\">\r\n              <Trans>My NFTs</Trans>\r\n            </ThemedText.BodySmall>\r\n          </Row>\r\n          <ListingHeaderRow>\r\n            <TitleWrapper>\r\n              <Trans>Sell NFTs</Trans>\r\n            </TitleWrapper>\r\n            <ButtonsWrapper>\r\n              <SelectMarketplacesDropdown setSelectedMarkets={setSelectedMarkets} selectedMarkets={selectedMarkets} />\r\n              <SetDurationModal />\r\n            </ButtonsWrapper>\r\n          </ListingHeaderRow>\r\n        </ListingHeader>\r\n        <GridWrapper>\r\n          <NFTListingsGrid selectedMarkets={selectedMarkets} />\r\n        </GridWrapper>\r\n      </MarketWrap>\r\n\r\n      <FloatingConfirmationBar issues={!!issues}>\r\n        {BannerText}\r\n        <ProceedsAndButtonWrapper>\r\n          <ProceedsWrapper>\r\n            <EthValueWrapper totalEthListingValue={!!totalEthListingValue}>\r\n              {totalEthListingValue > 0 ? formatEth(totalEthListingValue) : '-'} ETH\r\n            </EthValueWrapper>\r\n            {!!usdcValue && <UsdValue>{usdcAmount}</UsdValue>}\r\n          </ProceedsWrapper>\r\n          <ListingButton onClick={showModalAndStartListing} />\r\n        </ProceedsAndButtonWrapper>\r\n      </FloatingConfirmationBar>\r\n      <Overlay />\r\n\r\n      {showListModal && <ListModal overlayClick={toggleShowListModal} />}\r\n    </Column>\r\n  )\r\n}\r\n","import { PureComponent } from 'react';\n\nfunction isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n\nfunction isRangeVisible(_ref) {\n  var lastRenderedStartIndex = _ref.lastRenderedStartIndex,\n      lastRenderedStopIndex = _ref.lastRenderedStopIndex,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  return !(startIndex > lastRenderedStopIndex || stopIndex < lastRenderedStartIndex);\n}\n\nfunction scanForUnloadedRanges(_ref) {\n  var isItemLoaded = _ref.isItemLoaded,\n      itemCount = _ref.itemCount,\n      minimumBatchSize = _ref.minimumBatchSize,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  var unloadedRanges = [];\n\n  var rangeStartIndex = null;\n  var rangeStopIndex = null;\n\n  for (var _index = startIndex; _index <= stopIndex; _index++) {\n    var loaded = isItemLoaded(_index);\n\n    if (!loaded) {\n      rangeStopIndex = _index;\n      if (rangeStartIndex === null) {\n        rangeStartIndex = _index;\n      }\n    } else if (rangeStopIndex !== null) {\n      unloadedRanges.push(rangeStartIndex, rangeStopIndex);\n\n      rangeStartIndex = rangeStopIndex = null;\n    }\n  }\n\n  // If :rangeStopIndex is not null it means we haven't ran out of unloaded rows.\n  // Scan forward to try filling our :minimumBatchSize.\n  if (rangeStopIndex !== null) {\n    var potentialStopIndex = Math.min(Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1), itemCount - 1);\n\n    for (var _index2 = rangeStopIndex + 1; _index2 <= potentialStopIndex; _index2++) {\n      if (!isItemLoaded(_index2)) {\n        rangeStopIndex = _index2;\n      } else {\n        break;\n      }\n    }\n\n    unloadedRanges.push(rangeStartIndex, rangeStopIndex);\n  }\n\n  // Check to see if our first range ended prematurely.\n  // In this case we should scan backwards to try filling our :minimumBatchSize.\n  if (unloadedRanges.length) {\n    while (unloadedRanges[1] - unloadedRanges[0] + 1 < minimumBatchSize && unloadedRanges[0] > 0) {\n      var _index3 = unloadedRanges[0] - 1;\n\n      if (!isItemLoaded(_index3)) {\n        unloadedRanges[0] = _index3;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return unloadedRanges;\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar InfiniteLoader = function (_PureComponent) {\n  inherits(InfiniteLoader, _PureComponent);\n\n  function InfiniteLoader() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, InfiniteLoader);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = InfiniteLoader.__proto__ || Object.getPrototypeOf(InfiniteLoader)).call.apply(_ref, [this].concat(args))), _this), _this._lastRenderedStartIndex = -1, _this._lastRenderedStopIndex = -1, _this._memoizedUnloadedRanges = [], _this._onItemsRendered = function (_ref2) {\n      var visibleStartIndex = _ref2.visibleStartIndex,\n          visibleStopIndex = _ref2.visibleStopIndex;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!isInteger(visibleStartIndex) || !isInteger(visibleStopIndex)) {\n          console.warn('Invalid onItemsRendered signature; please refer to InfiniteLoader documentation.');\n        }\n\n        if (typeof _this.props.loadMoreRows === 'function') {\n          console.warn('InfiniteLoader \"loadMoreRows\" prop has been renamed to \"loadMoreItems\".');\n        }\n      }\n\n      _this._lastRenderedStartIndex = visibleStartIndex;\n      _this._lastRenderedStopIndex = visibleStopIndex;\n\n      _this._ensureRowsLoaded(visibleStartIndex, visibleStopIndex);\n    }, _this._setRef = function (listRef) {\n      _this._listRef = listRef;\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(InfiniteLoader, [{\n    key: 'resetloadMoreItemsCache',\n    value: function resetloadMoreItemsCache() {\n      var autoReload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      this._memoizedUnloadedRanges = [];\n\n      if (autoReload) {\n        this._ensureRowsLoaded(this._lastRenderedStartIndex, this._lastRenderedStopIndex);\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._listRef == null) {\n          console.warn('Invalid list ref; please refer to InfiniteLoader documentation.');\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var children = this.props.children;\n\n\n      return children({\n        onItemsRendered: this._onItemsRendered,\n        ref: this._setRef\n      });\n    }\n  }, {\n    key: '_ensureRowsLoaded',\n    value: function _ensureRowsLoaded(startIndex, stopIndex) {\n      var _props = this.props,\n          isItemLoaded = _props.isItemLoaded,\n          itemCount = _props.itemCount,\n          _props$minimumBatchSi = _props.minimumBatchSize,\n          minimumBatchSize = _props$minimumBatchSi === undefined ? 10 : _props$minimumBatchSi,\n          _props$threshold = _props.threshold,\n          threshold = _props$threshold === undefined ? 15 : _props$threshold;\n\n\n      var unloadedRanges = scanForUnloadedRanges({\n        isItemLoaded: isItemLoaded,\n        itemCount: itemCount,\n        minimumBatchSize: minimumBatchSize,\n        startIndex: Math.max(0, startIndex - threshold),\n        stopIndex: Math.min(itemCount - 1, stopIndex + threshold)\n      });\n\n      // Avoid calling load-rows unless range has changed.\n      // This shouldn't be strictly necessary, but is maybe nice to do.\n      if (this._memoizedUnloadedRanges.length !== unloadedRanges.length || this._memoizedUnloadedRanges.some(function (startOrStop, index) {\n        return unloadedRanges[index] !== startOrStop;\n      })) {\n        this._memoizedUnloadedRanges = unloadedRanges;\n        this._loadUnloadedRanges(unloadedRanges);\n      }\n    }\n  }, {\n    key: '_loadUnloadedRanges',\n    value: function _loadUnloadedRanges(unloadedRanges) {\n      var _this2 = this;\n\n      // loadMoreRows was renamed to loadMoreItems in v1.0.3; will be removed in v2.0\n      var loadMoreItems = this.props.loadMoreItems || this.props.loadMoreRows;\n\n      var _loop = function _loop(i) {\n        var startIndex = unloadedRanges[i];\n        var stopIndex = unloadedRanges[i + 1];\n        var promise = loadMoreItems(startIndex, stopIndex);\n        if (promise != null) {\n          promise.then(function () {\n            // Refresh the visible rows if any of them have just been loaded.\n            // Otherwise they will remain in their unloaded visual state.\n            if (isRangeVisible({\n              lastRenderedStartIndex: _this2._lastRenderedStartIndex,\n              lastRenderedStopIndex: _this2._lastRenderedStopIndex,\n              startIndex: startIndex,\n              stopIndex: stopIndex\n            })) {\n              // Handle an unmount while promises are still in flight.\n              if (_this2._listRef == null) {\n                return;\n              }\n\n              // Resize cached row sizes for VariableSizeList,\n              // otherwise just re-render the list.\n              if (typeof _this2._listRef.resetAfterIndex === 'function') {\n                _this2._listRef.resetAfterIndex(startIndex, true);\n              } else {\n                // HACK reset temporarily cached item styles to force PureComponent to re-render.\n                // This is pretty gross, but I'm okay with it for now.\n                // Don't judge me.\n                if (typeof _this2._listRef._getItemStyleCache === 'function') {\n                  _this2._listRef._getItemStyleCache(-1);\n                }\n                _this2._listRef.forceUpdate();\n              }\n            }\n          });\n        }\n      };\n\n      for (var i = 0; i < unloadedRanges.length; i += 2) {\n        _loop(i);\n      }\n    }\n  }]);\n  return InfiniteLoader;\n}(PureComponent);\n\nexport default InfiniteLoader;\n","import { ScrollBarStyles } from 'components/Common'\r\nimport { LoadingBubble } from 'components/Tokens/loading'\r\nimport { AnimatedBox, Box } from 'nft/components/Box'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { XMarkIcon } from 'nft/components/icons'\r\nimport { Checkbox } from 'nft/components/layout/Checkbox'\r\nimport { checkbox } from 'nft/components/layout/Checkbox.css'\r\nimport { Input } from 'nft/components/layout/Input'\r\nimport { subhead } from 'nft/css/common.css'\r\nimport { themeVars } from 'nft/css/sprinkles.css'\r\nimport { useFiltersExpanded, useIsMobile, useWalletCollections } from 'nft/hooks'\r\nimport { WalletCollection } from 'nft/types'\r\nimport {\r\n  CSSProperties,\r\n  Dispatch,\r\n  FormEvent,\r\n  SetStateAction,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useReducer,\r\n  useState,\r\n} from 'react'\r\nimport { easings, useSpring } from 'react-spring'\r\nimport AutoSizer from 'react-virtualized-auto-sizer'\r\nimport { FixedSizeList, ListOnItemsRenderedProps } from 'react-window'\r\nimport InfiniteLoader from 'react-window-infinite-loader'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\nimport { TRANSITION_DURATIONS } from 'theme/styles'\r\n\r\nimport { WALLET_COLLECTIONS_PAGINATION_LIMIT } from './ProfilePage'\r\nimport * as styles from './ProfilePage.css'\r\n\r\nconst COLLECTION_ROW_HEIGHT = 44\r\n\r\nconst ItemsContainer = styled(Column)`\r\n  ${ScrollBarStyles}\r\n  height: 100vh;\r\n`\r\n\r\nconst LongLoadingBubble = styled(LoadingBubble)`\r\n  min-height: 15px;\r\n  width: 75%;\r\n`\r\n\r\nconst SmallLoadingBubble = styled(LoadingBubble)`\r\n  height: 20px;\r\n  width: 20px;\r\n  margin-right: 8px;\r\n`\r\n\r\nconst MobileMenuHeader = styled(Row)`\r\n  justify-content: space-between;\r\n  padding-bottom: 8px;\r\n`\r\n\r\nconst LoadingCollectionItem = ({ style }: { style?: CSSProperties }) => {\r\n  return (\r\n    <Row display=\"flex\" justifyContent=\"space-between\" style={style} paddingLeft=\"12\" paddingRight=\"16\">\r\n      <Row display=\"flex\" flex=\"1\">\r\n        <SmallLoadingBubble />\r\n        <LongLoadingBubble />\r\n      </Row>\r\n      <Box as=\"span\" borderColor=\"backgroundOutline\" className={checkbox} aria-hidden=\"true\" />\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface CollectionFilterRowProps {\r\n  index: number\r\n  style: CSSProperties\r\n}\r\n\r\ninterface FilterSidebarProps {\r\n  fetchNextPage: () => void\r\n  hasNextPage?: boolean\r\n  isFetchingNextPage: boolean\r\n  walletCollections: WalletCollection[]\r\n}\r\n\r\nexport const FilterSidebar = ({\r\n  fetchNextPage,\r\n  hasNextPage,\r\n  isFetchingNextPage,\r\n  walletCollections,\r\n}: FilterSidebarProps) => {\r\n  const collectionFilters = useWalletCollections((state) => state.collectionFilters)\r\n  const setCollectionFilters = useWalletCollections((state) => state.setCollectionFilters)\r\n\r\n  const [isFiltersExpanded, setFiltersExpanded] = useFiltersExpanded()\r\n  const isMobile = useIsMobile()\r\n\r\n  const { sidebarX } = useSpring({\r\n    sidebarX: isFiltersExpanded ? 0 : -360,\r\n    config: {\r\n      duration: TRANSITION_DURATIONS.medium,\r\n      easing: easings.easeOutSine,\r\n    },\r\n  })\r\n\r\n  const hideSearch = useMemo(\r\n    () => (walletCollections && walletCollections?.length >= WALLET_COLLECTIONS_PAGINATION_LIMIT) || isFetchingNextPage,\r\n    [walletCollections, isFetchingNextPage]\r\n  )\r\n\r\n  return (\r\n    // @ts-ignore\r\n    <AnimatedBox\r\n      position={{ sm: 'fixed', md: 'sticky' }}\r\n      top={{ sm: '0', md: '72' }}\r\n      left={{ sm: '0', md: 'unset' }}\r\n      width={{ sm: 'full', md: '332', lg: '332' }}\r\n      height={{ sm: 'full', md: 'auto' }}\r\n      zIndex={{ sm: 'modal', md: 'auto' }}\r\n      display={isFiltersExpanded ? 'flex' : 'none'}\r\n      style={{ transform: isMobile ? undefined : sidebarX.to((x) => `translateX(${x}px)`) }}\r\n      background=\"backgroundBackdrop\"\r\n    >\r\n      <Box\r\n        paddingTop={{ sm: '24', md: '0' }}\r\n        paddingLeft={{ sm: '16', md: '0' }}\r\n        paddingRight=\"16\"\r\n        width={{ sm: 'full', md: '332', lg: '332' }}\r\n      >\r\n        {isMobile && (\r\n          <MobileMenuHeader>\r\n            <ThemedText.HeadlineSmall>Filter</ThemedText.HeadlineSmall>\r\n            <XMarkIcon\r\n              height={28}\r\n              width={28}\r\n              fill={themeVars.colors.textPrimary}\r\n              onClick={() => setFiltersExpanded(false)}\r\n            />\r\n          </MobileMenuHeader>\r\n        )}\r\n        <CollectionSelect\r\n          collections={walletCollections}\r\n          collectionFilters={collectionFilters}\r\n          setCollectionFilters={setCollectionFilters}\r\n          fetchNextPage={fetchNextPage}\r\n          hasNextPage={hasNextPage}\r\n          isFetchingNextPage={isFetchingNextPage}\r\n          hideSearch={hideSearch}\r\n        />\r\n      </Box>\r\n    </AnimatedBox>\r\n  )\r\n}\r\n\r\nconst CollectionSelect = ({\r\n  collections,\r\n  collectionFilters,\r\n  setCollectionFilters,\r\n  fetchNextPage,\r\n  hasNextPage,\r\n  isFetchingNextPage,\r\n  hideSearch,\r\n}: {\r\n  collections: WalletCollection[]\r\n  collectionFilters: Array<string>\r\n  setCollectionFilters: (address: string) => void\r\n  fetchNextPage: () => void\r\n  hasNextPage?: boolean\r\n  isFetchingNextPage: boolean\r\n  hideSearch: boolean\r\n}) => {\r\n  const [collectionSearchText, setCollectionSearchText] = useState('')\r\n  const [displayCollections, setDisplayCollections] = useState(collections)\r\n\r\n  useEffect(() => {\r\n    if (collectionSearchText) {\r\n      const filtered = collections.filter((collection) =>\r\n        collection.name?.toLowerCase().includes(collectionSearchText.toLowerCase())\r\n      )\r\n      setDisplayCollections(filtered)\r\n    } else {\r\n      setDisplayCollections(collections)\r\n    }\r\n  }, [collectionSearchText, collections])\r\n\r\n  const itemKey = useCallback((index: number, data: WalletCollection[]) => {\r\n    if (!data) return index\r\n    const collection = data[index]\r\n    return `${collection.address}_${index}`\r\n  }, [])\r\n\r\n  // If there are more items to be loaded then add an extra row to hold a loading indicator.\r\n  const itemCount = hasNextPage ? displayCollections.length + 1 : displayCollections.length\r\n\r\n  // Only load 1 page of items at a time.\r\n  // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\r\n  const loadMoreItems = isFetchingNextPage ? () => null : fetchNextPage\r\n\r\n  // Every row is loaded except for our loading indicator row.\r\n  const isItemLoaded = useCallback(\r\n    (index: number) => !hasNextPage || index < displayCollections.length,\r\n    [displayCollections.length, hasNextPage]\r\n  )\r\n\r\n  const CollectionFilterRow = useCallback(\r\n    ({ index, style }: CollectionFilterRowProps) => {\r\n      const collection = !!displayCollections && displayCollections[index]\r\n      if (!collection || isFetchingNextPage) {\r\n        return <LoadingCollectionItem style={style} key={index} />\r\n      }\r\n      return (\r\n        <CollectionItem\r\n          style={style}\r\n          key={itemKey(index, displayCollections)}\r\n          collection={displayCollections[index]}\r\n          collectionFilters={collectionFilters}\r\n          setCollectionFilters={setCollectionFilters}\r\n        />\r\n      )\r\n    },\r\n    [displayCollections, isFetchingNextPage, itemKey, collectionFilters, setCollectionFilters]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Box className={subhead} marginTop=\"12\" marginBottom=\"16\" width=\"276\">\r\n        Collections\r\n      </Box>\r\n      <Box paddingBottom=\"12\" borderRadius=\"8\">\r\n        <Column as=\"ul\" paddingLeft=\"0\" gap=\"10\" style={{ maxHeight: '80vh' }}>\r\n          {!hideSearch && (\r\n            <CollectionFilterSearch\r\n              collectionSearchText={collectionSearchText}\r\n              setCollectionSearchText={setCollectionSearchText}\r\n            />\r\n          )}\r\n          <ItemsContainer>\r\n            <AutoSizer disableWidth>\r\n              {({ height }) => (\r\n                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                  {({\r\n                    onItemsRendered,\r\n                    ref,\r\n                  }: {\r\n                    onItemsRendered: (props: ListOnItemsRenderedProps) => any\r\n                    ref: any\r\n                  }) => (\r\n                    <FixedSizeList\r\n                      height={height}\r\n                      width=\"100%\"\r\n                      itemCount={itemCount}\r\n                      itemSize={COLLECTION_ROW_HEIGHT}\r\n                      onItemsRendered={onItemsRendered}\r\n                      itemKey={itemKey}\r\n                      ref={ref}\r\n                    >\r\n                      {CollectionFilterRow}\r\n                    </FixedSizeList>\r\n                  )}\r\n                </InfiniteLoader>\r\n              )}\r\n            </AutoSizer>\r\n          </ItemsContainer>\r\n        </Column>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nconst CollectionFilterSearch = ({\r\n  collectionSearchText,\r\n  setCollectionSearchText,\r\n}: {\r\n  collectionSearchText: string\r\n  setCollectionSearchText: Dispatch<SetStateAction<string>>\r\n}) => {\r\n  return (\r\n    <Input\r\n      placeholder=\"Search\"\r\n      marginTop=\"8\"\r\n      marginBottom=\"8\"\r\n      autoComplete=\"off\"\r\n      position=\"static\"\r\n      width=\"full\"\r\n      value={collectionSearchText}\r\n      onChange={(e: FormEvent<HTMLInputElement>) => setCollectionSearchText(e.currentTarget.value)}\r\n    />\r\n  )\r\n}\r\n\r\nconst CollectionItem = ({\r\n  collection,\r\n  collectionFilters,\r\n  setCollectionFilters,\r\n  style,\r\n}: {\r\n  collection: WalletCollection\r\n  collectionFilters: Array<string>\r\n  setCollectionFilters: (address: string) => void\r\n  style?: CSSProperties\r\n}) => {\r\n  const [isCheckboxSelected, setCheckboxSelected] = useState(false)\r\n  const [hovered, toggleHovered] = useReducer((state) => {\r\n    return !state\r\n  }, false)\r\n  const isChecked = useCallback(\r\n    (address: string) => {\r\n      return collectionFilters.some((collection) => collection === address)\r\n    },\r\n    [collectionFilters]\r\n  )\r\n  const handleCheckbox = () => {\r\n    setCheckboxSelected(!isCheckboxSelected)\r\n    setCollectionFilters(collection.address)\r\n  }\r\n  return (\r\n    <Row\r\n      maxWidth=\"full\"\r\n      overflowX=\"hidden\"\r\n      overflowY=\"hidden\"\r\n      fontWeight=\"normal\"\r\n      className={styles.subRowHover}\r\n      justifyContent=\"space-between\"\r\n      cursor=\"pointer\"\r\n      paddingLeft=\"12\"\r\n      paddingRight=\"16\"\r\n      borderRadius=\"12\"\r\n      style={{\r\n        paddingBottom: '22px',\r\n        paddingTop: '22px',\r\n        ...style,\r\n      }}\r\n      maxHeight={`${COLLECTION_ROW_HEIGHT}`}\r\n      as=\"li\"\r\n      onMouseEnter={toggleHovered}\r\n      onMouseLeave={toggleHovered}\r\n      onClick={handleCheckbox}\r\n    >\r\n      <Row>\r\n        <Box as=\"img\" borderRadius=\"round\" width=\"20\" height=\"20\" src={collection.image} />\r\n        <Box\r\n          as=\"span\"\r\n          whiteSpace=\"nowrap\"\r\n          textOverflow=\"ellipsis\"\r\n          overflow=\"hidden\"\r\n          paddingLeft=\"12\"\r\n          paddingRight=\"14\"\r\n          style={{ minHeight: 15, maxWidth: '180px' }}\r\n        >\r\n          {collection.name}{' '}\r\n        </Box>\r\n      </Row>\r\n\r\n      <Checkbox checked={isChecked(collection.address)} hovered={hovered} onChange={handleCheckbox}>\r\n        <Box as=\"span\" color=\"textTertiary\" marginRight=\"12\" marginLeft=\"auto\">\r\n          {collection.count}\r\n        </Box>\r\n      </Checkbox>\r\n    </Row>\r\n  )\r\n}\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/profile/view/ProfilePage.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/profile/view/ProfilePage.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xYnc1ZGxyMSB7CiAgbWF4LXdpZHRoOiAxMDAwcHg7CiAgbWFyZ2luOiAwIGF1dG87Cn0KLl8xYnc1ZGxyMiB7CiAgbWFyZ2luLWJvdHRvbTogLTNweDsKfQouXzFidzVkbHIzOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtYmFja2dyb3VuZEludGVyYWN0aXZlKTsKfQouXzFidzVkbHI0IHsKICBoZWlnaHQ6IDEycHg7CiAgd2lkdGg6IDEycHg7CiAgbWFyZ2luLWxlZnQ6IDJweDsKICBtYXJnaW4tYm90dG9tOiAtMnB4OwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7Cn0KLl8xYnc1ZGxyNSB7CiAgd2lkdGg6IDE5MHB4Owp9Ci5fMWJ3NWRscjYgewogIGJveC1zaGFkb3c6IHZhcigtLXJndzZlem0pOwp9Ci5fMWJ3NWRscjcgewogIGJveC1zaGFkb3c6IDAgMTRweCAxNnB4IDAgcmdiYSg3MCwgMTE1LCAyNTAsIDAuNCk7Cn0KLl8xYnc1ZGxyOCB7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICBtYXgtd2lkdGg6IDEwMHB4OwogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOwogIG92ZXJmbG93OiBoaWRkZW47Cn0=\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var section = '_1bw5dlr1 rgw6ez2qu rgw6ez2p5 rgw6ez2x9 rgw6ez2vk';\nexport var ethIcon = '_1bw5dlr2';\nexport var subRowHover = '_1bw5dlr3 rgw6ezeg rgw6ezc4 rgw6ezfm';\nexport var verifiedBadge = '_1bw5dlr4';\nexport var dropDown = '_1bw5dlr5';\nexport var activeDropDown = '_1bw5dlr6';\nexport var activeDropDownItems = '_1bw5dlr7';\nexport var collectionFilterBubbleText = '_1bw5dlr8';","import { Box } from 'nft/components/Box'\r\nimport { assetList } from 'nft/components/collection/CollectionNfts.css'\r\nimport { loadingAsset } from 'nft/css/loading.css'\r\nimport { ScreenBreakpointsPaddings } from 'nft/pages/collection/index.css'\r\nimport styled from 'styled-components/macro'\r\n\r\nimport { DEFAULT_WALLET_ASSET_QUERY_AMOUNT } from './ProfilePage'\r\n\r\nconst SkeletonPageWrapper = styled.div`\r\n  ${ScreenBreakpointsPaddings};\r\n  padding-top: 40px;\r\n  width: 100%;\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    padding-top: 16px;\r\n  }\r\n`\r\n\r\nconst SkeletonBodyWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  gap: 18px;\r\n`\r\n\r\nconst SkeletonRowWrapper = styled.div`\r\n  display: flex;\r\n  flex-direct: row;\r\n  width: 100%;\r\n`\r\n\r\nconst AccountDetailsSkeletonWrapper = styled(SkeletonRowWrapper)`\r\n  gap: 12px;\r\n  margin-bottom: 30px;\r\n`\r\n\r\nconst ProfileDetailsSkeleton = styled.div`\r\n  width: 180px;\r\n  height: 36px;\r\n  border-radius: 12px;\r\n`\r\n\r\nconst FilterBarSkeletonWrapper = styled(SkeletonRowWrapper)`\r\n  justify-content: space-between;\r\n`\r\n\r\nconst FilterButtonSkeleton = styled.div`\r\n  width: 92px;\r\n  height: 44px;\r\n  border-radius: 12px;\r\n`\r\n\r\nconst SellButtonSkeleton = styled.div`\r\n  width: 80px;\r\n  height: 44px;\r\n  border-radius: 12px;\r\n`\r\n\r\nconst ProfileAssetCardSkeleton = styled.div`\r\n  width: 100%;\r\n  height: 330px;\r\n  border-radius: 20px;\r\n`\r\n\r\nconst ProfileAssetCardDisplaySectionSkeleton = () => {\r\n  return (\r\n    <Box width=\"full\" className={assetList}>\r\n      {Array.from(Array(DEFAULT_WALLET_ASSET_QUERY_AMOUNT), (_, index) => (\r\n        <ProfileAssetCardSkeleton key={index} className={loadingAsset} />\r\n      ))}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport const ProfileBodyLoadingSkeleton = () => {\r\n  return (\r\n    <SkeletonBodyWrapper>\r\n      <AccountDetailsSkeletonWrapper>\r\n        <ProfileDetailsSkeleton className={loadingAsset} />\r\n      </AccountDetailsSkeletonWrapper>\r\n      <FilterBarSkeletonWrapper>\r\n        <FilterButtonSkeleton className={loadingAsset} />\r\n        <SellButtonSkeleton className={loadingAsset} />\r\n      </FilterBarSkeletonWrapper>\r\n      <ProfileAssetCardDisplaySectionSkeleton />\r\n    </SkeletonBodyWrapper>\r\n  )\r\n}\r\n\r\nexport const ProfilePageLoadingSkeleton = () => {\r\n  return (\r\n    <SkeletonPageWrapper>\r\n      <ProfileBodyLoadingSkeleton />\r\n    </SkeletonPageWrapper>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { useTrace } from '@uniswap/analytics'\r\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\r\nimport { NFTEventName } from '@uniswap/analytics-events'\r\nimport { NftCard, NftCardDisplayProps } from 'nft/components/card'\r\nimport { detailsHref } from 'nft/components/card/utils'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { useBag, useIsMobile, useSellAsset } from 'nft/hooks'\r\nimport { WalletAsset } from 'nft/types'\r\nimport { useMemo } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\ninterface ViewMyNftsAssetProps {\r\n  asset: WalletAsset\r\n  mediaShouldBePlaying: boolean\r\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\r\n  hideDetails: boolean\r\n}\r\n\r\nexport const ViewMyNftsAsset = ({\r\n  asset,\r\n  mediaShouldBePlaying,\r\n  setCurrentTokenPlayingMedia,\r\n  hideDetails,\r\n}: ViewMyNftsAssetProps) => {\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const selectSellAsset = useSellAsset((state) => state.selectSellAsset)\r\n  const removeSellAsset = useSellAsset((state) => state.removeSellAsset)\r\n  const cartExpanded = useBag((state) => state.bagExpanded)\r\n  const toggleCart = useBag((state) => state.toggleBag)\r\n  const isMobile = useIsMobile()\r\n  const navigate = useNavigate()\r\n\r\n  const isSelected = useMemo(() => {\r\n    return sellAssets.some(\r\n      (item) => item.tokenId === asset.tokenId && item.asset_contract.address === asset.asset_contract.address\r\n    )\r\n  }, [asset, sellAssets])\r\n\r\n  const trace = useTrace()\r\n  const toggleSelect = () => handleSelect(isSelected)\r\n\r\n  const handleSelect = (removeAsset: boolean) => {\r\n    if (removeAsset) {\r\n      removeSellAsset(asset)\r\n    } else {\r\n      selectSellAsset(asset)\r\n      sendAnalyticsEvent(NFTEventName.NFT_SELL_ITEM_ADDED, {\r\n        collection_address: asset.asset_contract.address,\r\n        token_id: asset.tokenId,\r\n        ...trace,\r\n      })\r\n    }\r\n    if (\r\n      !cartExpanded &&\r\n      !sellAssets.find(\r\n        (x) => x.tokenId === asset.tokenId && x.asset_contract.address === asset.asset_contract.address\r\n      ) &&\r\n      !isMobile\r\n    )\r\n      toggleCart()\r\n  }\r\n\r\n  const isDisabled = asset.susFlag\r\n\r\n  const display: NftCardDisplayProps = useMemo(() => {\r\n    return {\r\n      primaryInfo: !!asset.asset_contract.name && asset.asset_contract.name,\r\n      primaryInfoIcon: asset.collectionIsVerified && <VerifiedIcon height=\"16px\" width=\"16px\" />,\r\n      secondaryInfo: asset.name || asset.tokenId ? asset.name ?? `#${asset.tokenId}` : null,\r\n      selectedInfo: <Trans>Remove from bag</Trans>,\r\n      notSelectedInfo: <Trans>List for sale</Trans>,\r\n      disabledInfo: <Trans>Unavailable for listing</Trans>,\r\n    }\r\n  }, [asset.asset_contract.name, asset.collectionIsVerified, asset.name, asset.tokenId])\r\n\r\n  return (\r\n    <NftCard\r\n      asset={asset}\r\n      display={display}\r\n      isSelected={isSelected}\r\n      isDisabled={Boolean(isDisabled)}\r\n      selectAsset={() => handleSelect(false)}\r\n      unselectAsset={() => handleSelect(true)}\r\n      onButtonClick={toggleSelect}\r\n      onCardClick={() => {\r\n        if (!hideDetails) navigate(detailsHref(asset))\r\n      }}\r\n      mediaShouldBePlaying={mediaShouldBePlaying}\r\n      setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\r\n      testId=\"nft-profile-asset\"\r\n    />\r\n  )\r\n}\r\n","import { useNftBalance } from 'graphql/data/nft/NftBalance'\r\nimport { AnimatedBox, Box } from 'nft/components/Box'\r\nimport { LoadingAssets } from 'nft/components/collection/CollectionAssetLoading'\r\nimport { assetList } from 'nft/components/collection/CollectionNfts.css'\r\nimport { FilterButton } from 'nft/components/collection/FilterButton'\r\nimport { ClearAllButton } from 'nft/components/collection/shared'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { CrossIcon } from 'nft/components/icons'\r\nimport { FilterSidebar } from 'nft/components/profile/view/FilterSidebar'\r\nimport { subhead } from 'nft/css/common.css'\r\nimport {\r\n  useBag,\r\n  useFiltersExpanded,\r\n  useIsMobile,\r\n  useSellAsset,\r\n  useWalletBalance,\r\n  useWalletCollections,\r\n} from 'nft/hooks'\r\nimport { ScreenBreakpointsPaddings } from 'nft/pages/collection/index.css'\r\nimport { OSCollectionsFetcher } from 'nft/queries'\r\nimport { WalletCollection } from 'nft/types'\r\nimport { Dispatch, SetStateAction, Suspense, useCallback, useEffect, useMemo, useState } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { useInfiniteQuery } from 'react-query'\r\nimport { easings, useSpring } from 'react-spring'\r\nimport styled from 'styled-components/macro'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport { EmptyWalletModule } from './EmptyWalletContent'\r\nimport * as styles from './ProfilePage.css'\r\nimport { ProfileBodyLoadingSkeleton } from './ProfilePageLoadingSkeleton'\r\nimport { ViewMyNftsAsset } from './ViewMyNftsAsset'\r\n\r\nconst ProfilePageColumn = styled(Column)`\r\n  ${ScreenBreakpointsPaddings}\r\n`\r\n\r\nconst ProfileHeader = styled.div`\r\n  font-size: 28px;\r\n  font-weight: 500;\r\n  line-height: 38px;\r\n  padding-bottom: 16px;\r\n  margin-bottom: 8px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    font-size: 20px;\r\n    line-height: 28px;\r\n    margin-bottom: 0px;\r\n  }\r\n`\r\n\r\nconst EmptyStateContainer = styled.div`\r\n  margin-top: 164px;\r\n`\r\n\r\nexport const DEFAULT_WALLET_ASSET_QUERY_AMOUNT = 25\r\nexport const WALLET_COLLECTIONS_PAGINATION_LIMIT = 300\r\nconst FILTER_SIDEBAR_WIDTH = 300\r\nconst PADDING = 16\r\n\r\nexport const ProfilePage = () => {\r\n  const { address } = useWalletBalance()\r\n  const walletCollections = useWalletCollections((state) => state.walletCollections)\r\n  const setWalletCollections = useWalletCollections((state) => state.setWalletCollections)\r\n  const { resetSellAssets } = useSellAsset(\r\n    ({ reset }) => ({\r\n      resetSellAssets: reset,\r\n    }),\r\n    shallow\r\n  )\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const toggleBag = useBag((state) => state.toggleBag)\r\n  const [isFiltersExpanded, setFiltersExpanded] = useFiltersExpanded()\r\n  const isMobile = useIsMobile()\r\n\r\n  const getOwnerCollections = async ({ pageParam = 0 }) => {\r\n    const res = await OSCollectionsFetcher({\r\n      params: {\r\n        asset_owner: address,\r\n        offset: `${pageParam * WALLET_COLLECTIONS_PAGINATION_LIMIT}`,\r\n        limit: `${WALLET_COLLECTIONS_PAGINATION_LIMIT}`,\r\n      },\r\n    })\r\n    return {\r\n      data: res,\r\n      nextPage: pageParam + 1,\r\n    }\r\n  }\r\n\r\n  const {\r\n    data: ownerCollectionsData,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    isFetchingNextPage,\r\n    isSuccess,\r\n  } = useInfiniteQuery(['ownerCollections', { address }], getOwnerCollections, {\r\n    getNextPageParam: (lastGroup) => (lastGroup.data.length === 0 ? undefined : lastGroup.nextPage),\r\n    refetchInterval: 15000,\r\n    refetchIntervalInBackground: false,\r\n    refetchOnWindowFocus: false,\r\n    refetchOnMount: false,\r\n  })\r\n\r\n  const ownerCollections = useMemo(\r\n    () => (isSuccess ? ownerCollectionsData?.pages.map((page) => page.data).flat() : null),\r\n    [isSuccess, ownerCollectionsData]\r\n  )\r\n\r\n  useEffect(() => {\r\n    ownerCollections && setWalletCollections(ownerCollections)\r\n  }, [ownerCollections, setWalletCollections])\r\n\r\n  return (\r\n    <ProfilePageColumn width=\"full\" paddingTop={{ sm: `${PADDING}`, md: '40' }}>\r\n      <>\r\n        <ProfileHeader>My NFTs</ProfileHeader>\r\n        <Row alignItems=\"flex-start\" position=\"relative\">\r\n          <FilterSidebar\r\n            fetchNextPage={fetchNextPage}\r\n            hasNextPage={hasNextPage}\r\n            isFetchingNextPage={isFetchingNextPage}\r\n            walletCollections={walletCollections}\r\n          />\r\n          {(!isMobile || !isFiltersExpanded) && (\r\n            <Suspense fallback={<ProfileBodyLoadingSkeleton />}>\r\n              <ProfilePageNfts\r\n                walletCollections={walletCollections}\r\n                isFiltersExpanded={isFiltersExpanded}\r\n                setFiltersExpanded={setFiltersExpanded}\r\n              />\r\n            </Suspense>\r\n          )}\r\n        </Row>\r\n      </>\r\n      {sellAssets.length > 0 && (\r\n        <Row\r\n          display={{ sm: 'flex', md: 'none' }}\r\n          position=\"fixed\"\r\n          left=\"16\"\r\n          height=\"56\"\r\n          borderRadius=\"12\"\r\n          paddingX=\"16\"\r\n          paddingY=\"12\"\r\n          background=\"backgroundSurface\"\r\n          borderStyle=\"solid\"\r\n          borderColor=\"backgroundOutline\"\r\n          borderWidth=\"1px\"\r\n          style={{ bottom: '68px', width: 'calc(100% - 32px)', lineHeight: '24px' }}\r\n          className={subhead}\r\n        >\r\n          {sellAssets.length} NFT{sellAssets.length === 1 ? '' : 's'}\r\n          <Box\r\n            fontWeight=\"semibold\"\r\n            fontSize=\"14\"\r\n            cursor=\"pointer\"\r\n            color=\"textSecondary\"\r\n            marginRight=\"20\"\r\n            marginLeft=\"auto\"\r\n            onClick={resetSellAssets}\r\n            lineHeight=\"16\"\r\n          >\r\n            Clear\r\n          </Box>\r\n          <Box\r\n            color=\"white\"\r\n            marginRight=\"0\"\r\n            fontWeight=\"medium\"\r\n            fontSize=\"14\"\r\n            cursor=\"pointer\"\r\n            backgroundColor=\"accentAction\"\r\n            onClick={toggleBag}\r\n            lineHeight=\"16\"\r\n            borderRadius=\"12\"\r\n            paddingY=\"8\"\r\n            paddingX=\"28\"\r\n          >\r\n            List for sale\r\n          </Box>\r\n        </Row>\r\n      )}\r\n    </ProfilePageColumn>\r\n  )\r\n}\r\n\r\nconst ProfilePageNfts = ({\r\n  walletCollections,\r\n  isFiltersExpanded,\r\n  setFiltersExpanded,\r\n}: {\r\n  walletCollections: WalletCollection[]\r\n  isFiltersExpanded: boolean\r\n  setFiltersExpanded: (filtersExpanded: boolean) => void\r\n}) => {\r\n  const { address } = useWalletBalance()\r\n  const setCollectionFilters = useWalletCollections((state) => state.setCollectionFilters)\r\n  const collectionFilters = useWalletCollections((state) => state.collectionFilters)\r\n  const clearCollectionFilters = useWalletCollections((state) => state.clearCollectionFilters)\r\n  const isBagExpanded = useBag((state) => state.bagExpanded)\r\n  const [currentTokenPlayingMedia, setCurrentTokenPlayingMedia] = useState<string | undefined>()\r\n  const isMobile = useIsMobile()\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n\r\n  const {\r\n    walletAssets: ownerAssets,\r\n    loading,\r\n    hasNext,\r\n    loadMore,\r\n  } = useNftBalance(address, collectionFilters, [], DEFAULT_WALLET_ASSET_QUERY_AMOUNT)\r\n\r\n  const { gridX } = useSpring({\r\n    gridX: isFiltersExpanded ? FILTER_SIDEBAR_WIDTH : -PADDING,\r\n    config: {\r\n      duration: 250,\r\n      easing: easings.easeOutSine,\r\n    },\r\n  })\r\n\r\n  if (loading) return <ProfileBodyLoadingSkeleton />\r\n\r\n  return (\r\n    <Column width=\"full\">\r\n      {ownerAssets?.length === 0 ? (\r\n        <EmptyStateContainer>\r\n          <EmptyWalletModule />\r\n        </EmptyStateContainer>\r\n      ) : (\r\n        <AnimatedBox\r\n          flexShrink=\"0\"\r\n          position={isMobile && isBagExpanded ? 'fixed' : 'static'}\r\n          style={{\r\n            transform: gridX.to(\r\n              (x) => `translate(${Number(x) - (!isMobile && isFiltersExpanded ? FILTER_SIDEBAR_WIDTH : -PADDING)}px)`\r\n            ),\r\n          }}\r\n          paddingY=\"20\"\r\n        >\r\n          <Row gap=\"8\" flexWrap=\"nowrap\" justifyContent=\"space-between\">\r\n            <FilterButton\r\n              isMobile={isMobile}\r\n              isFiltersExpanded={isFiltersExpanded}\r\n              onClick={() => setFiltersExpanded(!isFiltersExpanded)}\r\n            />\r\n          </Row>\r\n          <Row>\r\n            <CollectionFiltersRow\r\n              collections={walletCollections}\r\n              collectionFilters={collectionFilters}\r\n              setCollectionFilters={setCollectionFilters}\r\n              clearCollectionFilters={clearCollectionFilters}\r\n            />\r\n          </Row>\r\n          <InfiniteScroll\r\n            next={loadMore}\r\n            hasMore={hasNext ?? false}\r\n            loader={\r\n              Boolean(hasNext && ownerAssets?.length) && <LoadingAssets count={DEFAULT_WALLET_ASSET_QUERY_AMOUNT} />\r\n            }\r\n            dataLength={ownerAssets?.length ?? 0}\r\n            className={ownerAssets?.length ? assetList : undefined}\r\n            style={{ overflow: 'unset' }}\r\n          >\r\n            {ownerAssets?.length\r\n              ? ownerAssets.map((asset, index) => (\r\n                  <div key={index}>\r\n                    <ViewMyNftsAsset\r\n                      asset={asset}\r\n                      mediaShouldBePlaying={asset.tokenId === currentTokenPlayingMedia}\r\n                      setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\r\n                      hideDetails={sellAssets.length > 0}\r\n                    />\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </InfiniteScroll>\r\n        </AnimatedBox>\r\n      )}\r\n    </Column>\r\n  )\r\n}\r\n\r\nconst CollectionFiltersRow = ({\r\n  collections,\r\n  collectionFilters,\r\n  setCollectionFilters,\r\n  clearCollectionFilters,\r\n}: {\r\n  collections: WalletCollection[]\r\n  collectionFilters: Array<string>\r\n  setCollectionFilters: (address: string) => void\r\n  clearCollectionFilters: Dispatch<SetStateAction<void>>\r\n}) => {\r\n  const getCollection = (collectionAddress: string) => {\r\n    return collections?.find((collection) => collection.address === collectionAddress)\r\n  }\r\n  const handleClearAllClick = useCallback(() => clearCollectionFilters(), [clearCollectionFilters])\r\n  return (\r\n    <Row paddingY=\"18\" gap=\"8\" flexWrap=\"wrap\">\r\n      {Boolean(collectionFilters?.length) &&\r\n        collectionFilters.map((collectionAddress, index) => (\r\n          <CollectionFilterItem\r\n            collection={getCollection(collectionAddress)}\r\n            key={`CollectionFilterItem-${collectionAddress}-${index}`}\r\n            setCollectionFilters={setCollectionFilters}\r\n          />\r\n        ))}\r\n      {Boolean(collectionFilters?.length) && <ClearAllButton onClick={handleClearAllClick}>Clear all</ClearAllButton>}\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst CollectionFilterItem = ({\r\n  collection,\r\n  setCollectionFilters,\r\n}: {\r\n  collection: WalletCollection | undefined\r\n  setCollectionFilters: (address: string) => void\r\n}) => {\r\n  if (!collection) return null\r\n  return (\r\n    <Row\r\n      justifyContent=\"center\"\r\n      paddingTop=\"6\"\r\n      paddingRight=\"6\"\r\n      paddingBottom=\"6\"\r\n      paddingLeft=\"12\"\r\n      borderRadius=\"8\"\r\n      background=\"backgroundOutline\"\r\n      fontSize=\"14\"\r\n    >\r\n      <Box as=\"img\" borderRadius=\"round\" width=\"20\" height=\"20\" src={collection.image} />\r\n      <Box marginLeft=\"6\" className={styles.collectionFilterBubbleText}>\r\n        {collection?.name}\r\n      </Box>\r\n      <Box\r\n        color=\"textSecondary\"\r\n        background=\"none\"\r\n        height=\"28\"\r\n        width=\"28\"\r\n        padding=\"0\"\r\n        as=\"button\"\r\n        border=\"none\"\r\n        cursor=\"pointer\"\r\n        onClick={() => setCollectionFilters(collection.address)}\r\n      >\r\n        <CrossIcon />\r\n      </Box>\r\n    </Row>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Trace } from '@uniswap/analytics'\r\nimport { InterfacePageName } from '@uniswap/analytics-events'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\r\nimport { ButtonPrimary } from 'components/Button'\r\nimport { XXXL_BAG_WIDTH } from 'nft/components/bag/Bag'\r\nimport { ListPage } from 'nft/components/profile/list/ListPage'\r\nimport { ProfilePage } from 'nft/components/profile/view/ProfilePage'\r\nimport { ProfilePageLoadingSkeleton } from 'nft/components/profile/view/ProfilePageLoadingSkeleton'\r\nimport { useBag, useProfilePageState, useSellAsset, useWalletCollections } from 'nft/hooks'\r\nimport { ProfilePageStateType } from 'nft/types'\r\nimport { Suspense, useEffect, useRef } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { BREAKPOINTS, ThemedText } from 'theme'\r\n\r\nimport { LIST_PAGE_MARGIN, LIST_PAGE_MARGIN_MOBILE } from './shared'\r\n\r\nconst ProfilePageWrapper = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  scrollbar-width: none;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\r\n    height: auto;\r\n  }\r\n`\r\n\r\nconst LoadedAccountPage = styled.div<{ cartExpanded: boolean; isListingNfts: boolean }>`\r\n  width: calc(\r\n    100% -\r\n      ${({ cartExpanded, isListingNfts }) =>\r\n        isListingNfts ? LIST_PAGE_MARGIN * 2 : cartExpanded ? XXXL_BAG_WIDTH : 0}px\r\n  );\r\n  margin: 0px ${({ isListingNfts }) => (isListingNfts ? LIST_PAGE_MARGIN : 0)}px;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    width: calc(100% - ${({ isListingNfts }) => (isListingNfts ? LIST_PAGE_MARGIN_MOBILE * 2 : 0)}px);\r\n    margin: 0px ${({ isListingNfts }) => (isListingNfts ? LIST_PAGE_MARGIN_MOBILE : 0)}px;\r\n  }\r\n`\r\n\r\nconst Center = styled.div`\r\n  left: 50%;\r\n  top: 40%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: fixed;\r\n  white-space: nowrap;\r\n`\r\n\r\nconst ConnectWalletButton = styled(ButtonPrimary)`\r\n  width: min-content;\r\n  white-space: nowrap;\r\n  border-radius: 12px;\r\n  padding: 14px 18px;\r\n  border: none;\r\n`\r\n\r\nconst ProfileContent = () => {\r\n  const sellPageState = useProfilePageState((state) => state.state)\r\n  const setSellPageState = useProfilePageState((state) => state.setProfilePageState)\r\n  const resetSellAssets = useSellAsset((state) => state.reset)\r\n  const clearCollectionFilters = useWalletCollections((state) => state.clearCollectionFilters)\r\n\r\n  const { account } = useWeb3React()\r\n  const accountRef = useRef(account)\r\n  const toggleWalletDrawer = useToggleAccountDrawer()\r\n\r\n  useEffect(() => {\r\n    if (accountRef.current !== account) {\r\n      accountRef.current = account\r\n      resetSellAssets()\r\n      setSellPageState(ProfilePageStateType.VIEWING)\r\n      clearCollectionFilters()\r\n    }\r\n  }, [account, resetSellAssets, setSellPageState, clearCollectionFilters])\r\n  const cartExpanded = useBag((state) => state.bagExpanded)\r\n  const isListingNfts = sellPageState === ProfilePageStateType.LISTING\r\n\r\n  return (\r\n    <Trace page={InterfacePageName.NFT_PROFILE_PAGE} shouldLogImpression>\r\n      <ProfilePageWrapper>\r\n        {account ? (\r\n          <LoadedAccountPage cartExpanded={cartExpanded} isListingNfts={isListingNfts}>\r\n            {!isListingNfts ? <ProfilePage /> : <ListPage />}\r\n          </LoadedAccountPage>\r\n        ) : (\r\n          <Center>\r\n            <ThemedText.HeadlineMedium lineHeight=\"36px\" color=\"textSecondary\" fontWeight=\"600\" marginBottom=\"24px\">\r\n              <Trans>No items to display</Trans>\r\n            </ThemedText.HeadlineMedium>\r\n            <ConnectWalletButton onClick={toggleWalletDrawer}>\r\n              <ThemedText.SubHeader color=\"white\" lineHeight=\"20px\">\r\n                <Trans>Connect Wallet</Trans>\r\n              </ThemedText.SubHeader>\r\n            </ConnectWalletButton>\r\n          </Center>\r\n        )}\r\n      </ProfilePageWrapper>\r\n    </Trace>\r\n  )\r\n}\r\n\r\nconst Profile = () => {\r\n  return (\r\n    <Suspense fallback={<ProfilePageLoadingSkeleton />}>\r\n      <ProfileContent />\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","export const LIST_PAGE_MARGIN = 40\r\nexport const LIST_PAGE_MARGIN_MOBILE = 16\r\n"],"sourceRoot":""}