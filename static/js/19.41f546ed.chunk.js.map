{"version":3,"sources":["nft/components/explore/CollectionTable.tsx","nft/components/explore/Carousel.tsx","nft/components/explore/CarouselCard.tsx","nft/components/explore/Banner.tsx","nft/components/explore/Cells/Cells.tsx","nft/components/explore/Cells/Cells.css.ts","nft/components/explore/Explore.css.ts","nft/components/explore/Table.tsx","nft/components/explore/TrendingCollections.tsx","nft/pages/explore/index.tsx"],"names":["ColumnHeaders","CarouselContainer","styled","div","CarouselCardContainer","theme","breakpoint","md","CarouselItemCard","a","CarouselItemIcon","textPrimary","sm","opacity","hover","MAX_CARD_WIDTH","Carousel","children","activeIndex","toggleNextSlide","idx","useCallback","x","l","length","calculateCardIndex","getPos","i","firstVis","firstVisIdx","calculateFirstCardIndex","useSprings","springs","set","prev","useRef","runSprings","y","vy","Math","floor","position","prevPosition","current","rank","calculateRank","immediate","config","tension","friction","direction","useEffect","toggleSlide","next","interval","setInterval","clearInterval","onClick","width","height","map","style","LoadingCarousel","CarouselCardBorder","transition","duration","fast","timing","inOut","backgroundOutline","deepShadow","CardHeaderContainer","src","LoadingCardHeaderContainer","loadingAnimation","backgroundInteractive","CardHeaderColumn","IconContainer","CollectionNameContainer","LoadingCollectionNameContainer","LoadingBubble","HeaderOverlay","CollectionImage","img","accentTextLightPrimary","LoadingCollectionImage","LoadingTableElement","TableElement","FirstColumnTextWrapper","CardBottomContainer","MarketplaceIcon","backgroundSurface","xs","MarketplaceRow","marketplace","floorInEth","listings","toLowerCase","alt","BodySmall","color","Number","formatNumberOrString","NumberType","NFTTokenFloorPriceTrailingZeros","MARKETS_TO_CHECK","Markets","Opensea","X2Y2","LooksRare","MARKETS_ENUM_TO_NAME","CarouselCard","collection","useCollection","address","gqlCollection","data","loading","isNftGraphqlEnabled","useNftGraphqlEnabled","SubHeaderSmall","ethNumberStandardFormatter","formatWeiToDecimal","toString","marketplaceCount","reduce","acc","cur","count","market","find","floorPrice","LoadingTable","Array","index","CollectionName","ThemedText","MediumHeader","CarouselCardHeader","bannerImageUrl","imageUrl","fontWeight","name","isVerified","LoadingCarouselCard","BannerContainer","AbsoluteFill","BannerBackground","props","backgroundImage","darkMode","PlainBackground","opacify","userThemeColor","BannerMainArea","HeaderContainer","lg","EXCLUDED_COLLECTIONS","Banner","navigate","useNavigate","useQuery","fetchTrendingCollections","volumeType","timePeriod","TimePeriod","OneDay","size","refetchOnReconnect","refetchOnWindowFocus","refetchOnMount","gqlData","useTrendingCollections","HistoryDuration","Day","collections","useMemo","gatedData","filter","includes","slice","useState","activeCollectionIdx","setActiveCollectionIdx","onToggleNextSlide","activeCollection","TruncatedText","TruncatedSubHeader","SubHeader","TruncatedSubHeaderSmall","RoundedImage","backgroundModule","ChangeCellContainer","change","accentSuccess","accentFailure","EthContainer","CollectionTitleCell","value","isMobile","useIsMobile","logo","className","DiscreteNumberCell","volumeFormatter","getDenominatedValue","denomination","inWei","usdPrice","Denomination","ETH","parseFloat","formatEther","EthCell","denominatedValue","formattedValue","TextComponent","BodyPrimary","TextCell","VolumeCell","ChangeCell","Caption","abs","round","table","thead","th","RankCellContainer","StyledRow","tr","stateOverlayHover","stateOverlayPressed","StyledLoadingRow","StyledHeader","disabled","click","StyledLoadingHolder","StyledCollectionNameHolder","StyledImageHolder","StyledRankHolder","Table","columns","smallHiddenColumns","mediumHiddenColumns","largeHiddenColumns","useTheme","chainId","useWeb3React","useWindowSize","useTable","initialState","sortBy","desc","id","Volume","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setHiddenColumns","visibleColumns","styles","headerGroup","getHeaderGroupProps","key","headers","column","getHeaderProps","getSortByToggleProps","textAlign","paddingLeft","disableSortBy","Box","as","isSorted","isSortedDesc","transform","render","row","events","BrowserEvent","NFTEventName","NFT_TRENDING_ROW_SELECTED","properties","collection_address","original","chain_id","element","InterfaceElementName","NFT_TRENDING_ROW","getRowProps","cells","cell","cellIndex","getCellProps","maxWidth","BodySecondary","fontSize","lineHeight","_","compareFloats","b","CollectionTable","floorSort","rowA","rowB","aFloor","BigNumber","from","bFloor","gte","floorChangeSort","volumeSort","volume","volumeChangeSort","Header","accessor","Cell","Floor","sortType","AllTime","FloorChange","sortDescFirst","VolumeChange","Items","totalSupply","Owners","owners","timeOptions","label","SevenDays","ThirtyDays","ExploreContainer","FiltersRow","Filter","Selector","active","OpacityHoverState","StyledSelectorText","textSecondary","TrendingCollections","setTimePeriod","isEthToggled","setEthToggled","refetchInterval","isSuccess","Week","Month","Max","convertTimePeriodToHistoryDuration","fetchPrice","trendingCollections","d","volumeChange","type","floorChange","sales","USD","timeOption","NftExplore","setBagExpanded","useBag","state","bagExpanded","manualClose","page","InterfacePageName","NFT_EXPLORE_PAGE","shouldLogImpression"],"mappings":"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","file":"static/js/19.41f546ed.chunk.js","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\r\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\r\nimport { CollectionTableColumn, TimePeriod } from 'nft/types'\r\nimport { useMemo } from 'react'\r\nimport { CellProps, Column, Row } from 'react-table'\r\nimport { MediumOnly } from 'theme/components'\r\n\r\nimport { ChangeCell, CollectionTitleCell, DiscreteNumberCell, EthCell, TextCell, VolumeCell } from './Cells/Cells'\r\nimport { Table } from './Table'\r\n\r\nexport enum ColumnHeaders {\r\n  Volume = 'Volume',\r\n  VolumeChange = 'Volume change',\r\n  Floor = 'Floor',\r\n  FloorChange = 'Floor change',\r\n  Sales = 'Sales',\r\n  Items = 'Items',\r\n  Owners = 'Owners',\r\n}\r\n\r\nconst VOLUME_CHANGE_MAX_VALUE = 9999\r\n\r\nconst compareFloats = (a?: number, b?: number): 1 | -1 => {\r\n  if (!a) return -1\r\n  if (!b) return 1\r\n  return Math.round(a * 100000) >= Math.round(b * 100000) ? 1 : -1\r\n}\r\n\r\nconst CollectionTable = ({ data, timePeriod }: { data: CollectionTableColumn[]; timePeriod: TimePeriod }) => {\r\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\r\n  const floorSort = useMemo(() => {\r\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\r\n      if (isNftGraphqlEnabled) {\r\n        return compareFloats(rowA.original.floor.value, rowB.original.floor.value)\r\n      } else {\r\n        const aFloor = BigNumber.from(rowA.original.floor.value ?? 0)\r\n        const bFloor = BigNumber.from(rowB.original.floor.value ?? 0)\r\n\r\n        return aFloor.gte(bFloor) ? 1 : -1\r\n      }\r\n    }\r\n  }, [isNftGraphqlEnabled])\r\n\r\n  const floorChangeSort = useMemo(() => {\r\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\r\n      return compareFloats(rowA.original.floor.change, rowB.original.floor.change)\r\n    }\r\n  }, [])\r\n\r\n  const volumeSort = useMemo(() => {\r\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\r\n      return compareFloats(rowA.original.volume.value, rowB.original.volume.value)\r\n    }\r\n  }, [])\r\n\r\n  const volumeChangeSort = useMemo(() => {\r\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\r\n      return compareFloats(rowA.original.volume.change, rowB.original.volume.change)\r\n    }\r\n  }, [])\r\n\r\n  const columns: Column<CollectionTableColumn>[] = useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Collection name',\r\n        accessor: 'collection',\r\n        Cell: CollectionTitleCell,\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        id: ColumnHeaders.Floor,\r\n        Header: ColumnHeaders.Floor,\r\n        accessor: ({ floor }) => floor.value,\r\n        sortType: floorSort,\r\n        Cell: function ethCell(cell: CellProps<CollectionTableColumn>) {\r\n          return (\r\n            <>\r\n              <EthCell\r\n                value={cell.row.original.floor.value}\r\n                denomination={cell.row.original.denomination}\r\n                usdPrice={cell.row.original.usdPrice}\r\n              />\r\n              {timePeriod !== TimePeriod.AllTime && (\r\n                <MediumOnly>\r\n                  <ChangeCell change={cell.row.original.floor.change} />\r\n                </MediumOnly>\r\n              )}\r\n            </>\r\n          )\r\n        },\r\n      },\r\n      {\r\n        id: ColumnHeaders.FloorChange,\r\n        Header: ColumnHeaders.FloorChange,\r\n        accessor: ({ floor }) => floor.value,\r\n        sortDescFirst: true,\r\n        disableSortBy: timePeriod === TimePeriod.AllTime,\r\n        sortType: floorChangeSort,\r\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\r\n          return timePeriod === TimePeriod.AllTime ? (\r\n            <TextCell value=\"-\" />\r\n          ) : (\r\n            <ChangeCell change={cell.row.original.floor.change} />\r\n          )\r\n        },\r\n      },\r\n      {\r\n        id: ColumnHeaders.Volume,\r\n        Header: ColumnHeaders.Volume,\r\n        accessor: ({ volume }) => volume.value,\r\n        sortDescFirst: true,\r\n        sortType: volumeSort,\r\n        Cell: function volumeCell(cell: CellProps<CollectionTableColumn>) {\r\n          return (\r\n            <VolumeCell\r\n              value={cell.row.original.volume.value}\r\n              denomination={cell.row.original.denomination}\r\n              usdPrice={cell.row.original.usdPrice}\r\n            />\r\n          )\r\n        },\r\n      },\r\n      {\r\n        id: ColumnHeaders.VolumeChange,\r\n        Header: ColumnHeaders.VolumeChange,\r\n        accessor: ({ volume }) => volume.value,\r\n        sortDescFirst: true,\r\n        disableSortBy: timePeriod === TimePeriod.AllTime,\r\n        sortType: volumeChangeSort,\r\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\r\n          const { change } = cell.row.original.volume\r\n          return timePeriod === TimePeriod.AllTime ? (\r\n            <TextCell value=\"-\" />\r\n          ) : change && change >= VOLUME_CHANGE_MAX_VALUE ? (\r\n            <ChangeCell change={change}>{`>${VOLUME_CHANGE_MAX_VALUE}`}%</ChangeCell>\r\n          ) : (\r\n            <ChangeCell change={change} />\r\n          )\r\n        },\r\n      },\r\n      {\r\n        id: ColumnHeaders.Items,\r\n        Header: ColumnHeaders.Items,\r\n        accessor: 'totalSupply',\r\n        sortDescFirst: true,\r\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\r\n          return <DiscreteNumberCell value={{ value: cell.row.original.totalSupply }} />\r\n        },\r\n      },\r\n      {\r\n        Header: ColumnHeaders.Owners,\r\n        accessor: ({ owners }) => owners.value,\r\n        sortDescFirst: true,\r\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\r\n          return <DiscreteNumberCell value={cell.row.original.owners} />\r\n        },\r\n      },\r\n    ],\r\n    [floorChangeSort, floorSort, volumeChangeSort, volumeSort, timePeriod]\r\n  )\r\n  return (\r\n    <>\r\n      <Table\r\n        smallHiddenColumns={[\r\n          ColumnHeaders.Items,\r\n          ColumnHeaders.FloorChange,\r\n          ColumnHeaders.Volume,\r\n          ColumnHeaders.VolumeChange,\r\n          ColumnHeaders.Owners,\r\n        ]}\r\n        mediumHiddenColumns={[\r\n          ColumnHeaders.Items,\r\n          ColumnHeaders.FloorChange,\r\n          ColumnHeaders.VolumeChange,\r\n          ColumnHeaders.Owners,\r\n        ]}\r\n        largeHiddenColumns={[ColumnHeaders.Items, ColumnHeaders.Owners]}\r\n        {...{ data, columns }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollectionTable\r\n","import { ChevronLeftIcon, ChevronRightIcon } from 'nft/components/icons'\r\nimport { calculateCardIndex, calculateFirstCardIndex, calculateRank } from 'nft/utils'\r\nimport { ReactNode, useCallback, useEffect, useRef } from 'react'\r\nimport { a, useSprings } from 'react-spring'\r\nimport styled from 'styled-components/macro'\r\n\r\nconst CarouselContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst CarouselCardContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  overflow-x: hidden;\r\n  max-width: 100%;\r\n  height: 390px;\r\n\r\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\r\n    max-width: 600px;\r\n  }\r\n`\r\n\r\nconst CarouselItemCard = styled(a.div)`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 4px 12px 32px;\r\n  position: absolute;\r\n  will-change: transform;\r\n  width: calc(100%);\r\n  height: calc(100%);\r\n\r\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\r\n    padding: 4px 32px 32px;\r\n  }\r\n`\r\n\r\nconst CarouselItemIcon = styled.div`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  cursor: pointer;\r\n  display: none;\r\n  user-select: none;\r\n  height: calc(100%);\r\n  padding: 4px 0 32px;\r\n\r\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    display: flex;\r\n  }\r\n\r\n  :hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n`\r\n\r\ninterface CarouselProps {\r\n  children: ReactNode[]\r\n  activeIndex: number\r\n  toggleNextSlide: (idx: number) => void\r\n}\r\n\r\nconst MAX_CARD_WIDTH = 800\r\n\r\nexport const Carousel = ({ children, activeIndex, toggleNextSlide }: CarouselProps) => {\r\n  const idx = useCallback((x: number, l = children.length) => calculateCardIndex(x, l), [children])\r\n  const getPos = useCallback(\r\n    (i: number, firstVis: number, firstVisIdx: number) => calculateFirstCardIndex(i, firstVis, firstVisIdx, idx),\r\n    [idx]\r\n  )\r\n  const [springs, set] = useSprings(children.length, (i) => ({\r\n    x: (i < children.length - 1 ? i : -1) * MAX_CARD_WIDTH,\r\n  }))\r\n  const prev = useRef([0, 1])\r\n\r\n  const runSprings = useCallback(\r\n    (y: number, vy: number) => {\r\n      const firstVis = idx(Math.floor(y / MAX_CARD_WIDTH) % children.length)\r\n      const firstVisIdx = vy < 0 ? children.length - 2 : 1\r\n      set((i) => {\r\n        const position = getPos(i, firstVis, firstVisIdx)\r\n        const prevPosition = getPos(i, prev.current[0], prev.current[1])\r\n        const rank = calculateRank(firstVis, firstVisIdx, position, children.length, y)\r\n        return {\r\n          x: (-y % (MAX_CARD_WIDTH * children.length)) + MAX_CARD_WIDTH * rank,\r\n          immediate: vy < 0 ? prevPosition > position : prevPosition < position,\r\n          config: { tension: 250, friction: 30 },\r\n        }\r\n      })\r\n      prev.current = [firstVis, firstVisIdx]\r\n    },\r\n    [idx, getPos, set, children.length]\r\n  )\r\n\r\n  const direction = useRef(0)\r\n\r\n  useEffect(() => {\r\n    runSprings(activeIndex * MAX_CARD_WIDTH, direction.current)\r\n  }, [activeIndex, runSprings])\r\n\r\n  const toggleSlide = useCallback(\r\n    (next: -1 | 1) => {\r\n      direction.current = next\r\n      toggleNextSlide(next)\r\n    },\r\n    [toggleNextSlide]\r\n  )\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      toggleSlide(1)\r\n    }, 7_000)\r\n    return () => {\r\n      clearInterval(interval)\r\n    }\r\n  }, [toggleSlide, activeIndex])\r\n\r\n  return (\r\n    <CarouselContainer>\r\n      <CarouselItemIcon onClick={() => toggleSlide(-1)}>\r\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\r\n      </CarouselItemIcon>\r\n      <CarouselCardContainer>\r\n        {springs.map(({ x }, i) => (\r\n          <CarouselItemCard key={i} style={{ x }}>\r\n            {children[i]}\r\n          </CarouselItemCard>\r\n        ))}\r\n      </CarouselCardContainer>\r\n      <CarouselItemIcon onClick={() => toggleSlide(1)}>\r\n        <ChevronRightIcon width=\"16px\" height=\"16px\" />\r\n      </CarouselItemIcon>\r\n    </CarouselContainer>\r\n  )\r\n}\r\n\r\nexport const LoadingCarousel = ({ children }: { children: ReactNode }) => (\r\n  <Carousel activeIndex={0} toggleNextSlide={() => undefined}>\r\n    {[children]}\r\n  </Carousel>\r\n)\r\n","import { formatNumberOrString, NumberType } from '@uniswap/conedison/format'\r\nimport { loadingAnimation } from 'components/Loader/styled'\r\nimport { LoadingBubble } from 'components/Tokens/loading'\r\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\r\nimport { useCollection } from 'graphql/data/nft/Collection'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { Markets, TrendingCollection } from 'nft/types'\r\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme/components/text'\r\n\r\nconst CarouselCardBorder = styled.div`\r\n  width: 100%;\r\n  position: relative;\r\n  border-radius: 21px;\r\n  cursor: pointer;\r\n  border: 1px solid transparent;\r\n  transition-property: border-color;\r\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\r\n  transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\r\n\r\n  :hover {\r\n    border: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  }\r\n\r\n  ::after {\r\n    content: '';\r\n    opacity: 0;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    border-radius: 21px;\r\n    z-index: -1;\r\n    box-shadow: ${({ theme }) => theme.deepShadow};\r\n    transition-property: opacity;\r\n    transition-duration: ${({ theme }) => theme.transition.duration.fast};\r\n    transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\r\n  }\r\n\r\n  :hover::after {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst CardHeaderContainer = styled.div<{ src: string }>`\r\n  position: relative;\r\n  background-image: ${({ src }) => `url(${src})`};\r\n  background-size: cover;\r\n  background-position: center;\r\n`\r\n\r\nconst LoadingCardHeaderContainer = styled.div`\r\n  position: relative;\r\n  animation: ${loadingAnimation} 1.5s infinite;\r\n  animation-fill-mode: both;\r\n  background: linear-gradient(\r\n    to left,\r\n    ${({ theme }) => theme.backgroundInteractive} 25%,\r\n    ${({ theme }) => theme.backgroundOutline} 50%,\r\n    ${({ theme }) => theme.backgroundInteractive} 75%\r\n  );\r\n  will-change: background-position;\r\n  background-size: 400%;\r\n`\r\n\r\nconst CardHeaderColumn = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  height: 202px;\r\n  justify-content: center;\r\n  padding: 0 40px;\r\n  z-index: 1;\r\n`\r\nconst IconContainer = styled.div`\r\n  display: inline;\r\n  vertical-align: text-bottom;\r\n  margin-left: 2px;\r\n`\r\nconst CollectionNameContainer = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  text-align: center;\r\n  max-height: 56px;\r\n`\r\n\r\nconst LoadingCollectionNameContainer = styled(LoadingBubble)`\r\n  width: 50%;\r\n`\r\n\r\nconst HeaderOverlay = styled.div`\r\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%, rgba(0, 0, 0, 0.08));\r\n  bottom: 0px;\r\n  left: 0px;\r\n  position: absolute;\r\n  right: 0px;\r\n  top: 0px;\r\n  z-index: 0;\r\n\r\n  // overlay workaround for firefox only\r\n  @supports (-moz-appearance: none) {\r\n    bottom: -1px;\r\n  }\r\n`\r\n\r\nconst CollectionImage = styled.img`\r\n  width: 86px;\r\n  height: 86px;\r\n  background: ${({ theme }) => theme.accentTextLightPrimary};\r\n  border: 2px solid ${({ theme }) => theme.accentTextLightPrimary};\r\n  border-radius: 100px;\r\n`\r\n\r\nconst LoadingCollectionImage = styled.div`\r\n  width: 86px;\r\n  height: 86px;\r\n  border-radius: 100px;\r\n  animation: ${loadingAnimation} 1.5s infinite;\r\n  animation-fill-mode: both;\r\n  background: linear-gradient(\r\n    to left,\r\n    ${({ theme }) => theme.backgroundInteractive} 25%,\r\n    ${({ theme }) => theme.backgroundOutline} 50%,\r\n    ${({ theme }) => theme.backgroundInteractive} 75%\r\n  );\r\n  will-change: background-position;\r\n  background-size: 400%;\r\n`\r\n\r\nconst LoadingTableElement = styled(LoadingBubble)`\r\n  width: 50px;\r\n`\r\n\r\nconst TableElement = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n`\r\n\r\nconst FirstColumnTextWrapper = styled.div``\r\n\r\nconst CardBottomContainer = styled.div`\r\n  display: grid;\r\n  flex: 1;\r\n  gap: 8px;\r\n  grid-template-columns: auto auto auto;\r\n  padding: 16px 16px 20px;\r\n`\r\n\r\nconst MarketplaceIcon = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n`\r\n\r\nconst CarouselCardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.backgroundSurface};\r\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  border-radius: 20px;\r\n  overflow: hidden;\r\n  height: 100%;\r\n\r\n  ${TableElement}:nth-child(3n-1), ${LoadingTableElement}:nth-child(3n-1) {\r\n    justify-self: center;\r\n  }\r\n\r\n  ${TableElement}:nth-child(3n), ${LoadingTableElement}:nth-child(3n) {\r\n    justify-self: right;\r\n  }\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.xs}px) or ((min-width: ${({ theme }) =>\r\n      theme.breakpoint.sm}px) and (max-width: 880px)) {\r\n    ${FirstColumnTextWrapper} {\r\n      display: none;\r\n    }\r\n    ${TableElement} {\r\n      justify-self: left !important;\r\n    }\r\n    ${CardHeaderColumn} {\r\n      padding: 0 20px;\r\n    }\r\n  }\r\n`\r\n\r\ninterface MarketplaceRowProps {\r\n  marketplace: string\r\n  floorInEth?: number\r\n  listings?: number\r\n}\r\n\r\nconst MarketplaceRow = ({ marketplace, floorInEth, listings }: MarketplaceRowProps) => {\r\n  return (\r\n    <>\r\n      <TableElement>\r\n        <MarketplaceIcon\r\n          src={`/nft/svgs/marketplaces/${marketplace.toLowerCase()}-grey.svg`}\r\n          alt={`${marketplace} icon`}\r\n        />\r\n        <FirstColumnTextWrapper>\r\n          <ThemedText.BodySmall color=\"textSecondary\">{marketplace}</ThemedText.BodySmall>\r\n        </FirstColumnTextWrapper>\r\n      </TableElement>\r\n      <TableElement>\r\n        <ThemedText.BodySmall color=\"textSecondary\">\r\n          {Number(floorInEth) > 0\r\n            ? `${formatNumberOrString(floorInEth, NumberType.NFTTokenFloorPriceTrailingZeros)} ETH`\r\n            : '-'}\r\n        </ThemedText.BodySmall>\r\n      </TableElement>\r\n      <TableElement>\r\n        <ThemedText.BodySmall color=\"textSecondary\">{Number(listings) > 0 ? listings : 'None'}</ThemedText.BodySmall>\r\n      </TableElement>\r\n    </>\r\n  )\r\n}\r\n\r\ninterface CarouselCardProps {\r\n  collection: TrendingCollection\r\n  onClick: () => void\r\n}\r\n\r\nconst MARKETS_TO_CHECK = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare] as const\r\nconst MARKETS_ENUM_TO_NAME = {\r\n  [Markets.Opensea]: 'OpenSea',\r\n  [Markets.X2Y2]: 'X2Y2',\r\n  [Markets.LooksRare]: 'LooksRare',\r\n}\r\n\r\nexport const CarouselCard = ({ collection, onClick }: CarouselCardProps) => {\r\n  const { data: gqlCollection, loading } = useCollection(collection.address ?? '')\r\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\r\n\r\n  if (loading) return <LoadingCarouselCard />\r\n\r\n  return (\r\n    <CarouselCardBorder>\r\n      <CarouselCardContainer onClick={onClick}>\r\n        <CarouselCardHeader collection={collection} />\r\n        <CardBottomContainer>\r\n          <>\r\n            <TableElement>\r\n              <MarketplaceIcon src=\"/nft/svgs/marketplaces/uniswap-magenta.svg\" alt=\"Uniswap icon\" />\r\n              <FirstColumnTextWrapper>\r\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">Uniswap</ThemedText.SubHeaderSmall>\r\n              </FirstColumnTextWrapper>\r\n            </TableElement>\r\n            <TableElement>\r\n              {collection.floor && (\r\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">\r\n                  {isNftGraphqlEnabled\r\n                    ? ethNumberStandardFormatter(collection.floor)\r\n                    : formatWeiToDecimal(collection.floor.toString())}{' '}\r\n                  ETH Floor\r\n                </ThemedText.SubHeaderSmall>\r\n              )}\r\n            </TableElement>\r\n            <TableElement>\r\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\r\n                {gqlCollection.marketplaceCount?.reduce((acc, cur) => acc + cur.count, 0)} Listings\r\n              </ThemedText.SubHeaderSmall>\r\n            </TableElement>\r\n            {MARKETS_TO_CHECK.map((market) => {\r\n              const marketplace = gqlCollection.marketplaceCount?.find(\r\n                (marketplace) => marketplace.marketplace === market\r\n              )\r\n              if (!marketplace) {\r\n                return null\r\n              }\r\n              return (\r\n                <MarketplaceRow\r\n                  key={`CarouselCard-key-${collection.address}-${marketplace.marketplace}`}\r\n                  marketplace={MARKETS_ENUM_TO_NAME[market]}\r\n                  listings={marketplace.count}\r\n                  floorInEth={marketplace.floorPrice}\r\n                />\r\n              )\r\n            })}\r\n          </>\r\n        </CardBottomContainer>\r\n      </CarouselCardContainer>\r\n    </CarouselCardBorder>\r\n  )\r\n}\r\n\r\nconst DEFAULT_TABLE_ELEMENTS = 12\r\n\r\nconst LoadingTable = () => {\r\n  return (\r\n    <>\r\n      {[...Array(DEFAULT_TABLE_ELEMENTS)].map((index) => (\r\n        <LoadingTableElement key={index} />\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nconst CollectionName = styled(ThemedText.MediumHeader)`\r\n  display: inline;\r\n  vertical-align: text-bottom;\r\n  line-height: 28px;\r\n`\r\n\r\nconst CarouselCardHeader = ({ collection }: { collection: TrendingCollection }) => {\r\n  return (\r\n    <CardHeaderContainer src={collection.bannerImageUrl ?? ''}>\r\n      <CardHeaderColumn>\r\n        <CollectionImage src={collection.imageUrl} />\r\n        <CollectionNameContainer>\r\n          <CollectionName color=\"accentTextLightPrimary\" fontWeight=\"500\">\r\n            {collection.name}\r\n          </CollectionName>\r\n          {collection.isVerified && (\r\n            <IconContainer>\r\n              <VerifiedIcon width=\"24px\" height=\"24px\" />\r\n            </IconContainer>\r\n          )}\r\n        </CollectionNameContainer>\r\n      </CardHeaderColumn>\r\n      <HeaderOverlay />\r\n    </CardHeaderContainer>\r\n  )\r\n}\r\n\r\nexport const LoadingCarouselCard = ({ collection }: { collection?: TrendingCollection }) => {\r\n  return (\r\n    <CarouselCardBorder>\r\n      <CarouselCardContainer>\r\n        {collection ? (\r\n          <CarouselCardHeader collection={collection} />\r\n        ) : (\r\n          <LoadingCardHeaderContainer>\r\n            <CardHeaderColumn>\r\n              <LoadingCollectionImage />\r\n              <LoadingCollectionNameContainer />\r\n            </CardHeaderColumn>\r\n            <HeaderOverlay />\r\n          </LoadingCardHeaderContainer>\r\n        )}\r\n        <CardBottomContainer>\r\n          <LoadingTable />\r\n        </CardBottomContainer>\r\n      </CarouselCardContainer>\r\n    </CarouselCardBorder>\r\n  )\r\n}\r\n","import { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\r\nimport { HistoryDuration } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { useTrendingCollections } from 'graphql/data/nft/TrendingCollections'\r\nimport { fetchTrendingCollections } from 'nft/queries'\r\nimport { TimePeriod } from 'nft/types'\r\nimport { calculateCardIndex } from 'nft/utils'\r\nimport { useCallback, useMemo, useState } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport styled from 'styled-components/macro'\r\nimport { opacify } from 'theme/utils'\r\n\r\nimport { Carousel, LoadingCarousel } from './Carousel'\r\nimport { CarouselCard, LoadingCarouselCard } from './CarouselCard'\r\n\r\nconst BannerContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n  padding-top: 22px;\r\n  position: relative;\r\n\r\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    padding: 32px 16px;\r\n  }\r\n`\r\n\r\nconst AbsoluteFill = styled.div`\r\n  position: absolute;\r\n  top: -96px;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n`\r\n\r\n// Safari has issues with blur / overflow, forcing GPU rendering with `translate3d` fixes it\r\n// https://stackoverflow.com/a/71353198\r\nconst BannerBackground = styled(AbsoluteFill)<{ backgroundImage: string }>`\r\n  transform: translate3d(0, 0, 0) scaleY(1.1);\r\n\r\n  background-image: ${(props) => `url(${props.backgroundImage})`};\r\n  filter: blur(62px);\r\n\r\n  opacity: ${({ theme }) => (theme.darkMode ? 0.3 : 0.2)};\r\n`\r\n\r\nconst PlainBackground = styled(AbsoluteFill)`\r\n  background: ${({ theme }) => `linear-gradient(${opacify(10, theme.userThemeColor)}, transparent)`};\r\n`\r\n\r\nconst BannerMainArea = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  height: 100%;\r\n  gap: 36px;\r\n  max-width: 1200px;\r\n  justify-content: space-between;\r\n  z-index: 2;\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    flex-direction: column;\r\n    height: 100%;\r\n    gap: 14px;\r\n    margin-top: 4px;\r\n    margin-bottom: 6px;\r\n  }\r\n`\r\n\r\nconst HeaderContainer = styled.div`\r\n  display: flex;\r\n  max-width: 500px;\r\n  font-weight: 500;\r\n  font-size: 72px;\r\n  line-height: 88px;\r\n  align-self: center;\r\n  flex-shrink: 0;\r\n  padding-bottom: 32px;\r\n\r\n  color: ${({ theme }) => theme.textPrimary};\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\r\n    font-size: 48px;\r\n    line-height: 67px;\r\n  }\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\r\n    font-size: 36px;\r\n    line-height: 50px;\r\n  }\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    line-height: 43px;\r\n    text-align: center;\r\n    padding-bottom: 16px;\r\n\r\n    br {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  /* Custom breakpoint to split into two lines on smaller screens */\r\n  @media only screen and (max-width: 550px) {\r\n    font-size: 28px;\r\n    line-height: 34px;\r\n    padding-bottom: 0;\r\n\r\n    br {\r\n      display: unset;\r\n    }\r\n  }\r\n`\r\n\r\n// Exclude collections that are not available in any of the following - OpenSea, X2Y2 and LooksRare:\r\nconst EXCLUDED_COLLECTIONS = ['0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb']\r\nconst TRENDING_COLLECTION_SIZE = 5\r\n\r\nconst Banner = () => {\r\n  const navigate = useNavigate()\r\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\r\n\r\n  const { data } = useQuery(\r\n    ['trendingCollections'],\r\n    () => {\r\n      return fetchTrendingCollections({\r\n        volumeType: 'eth',\r\n        timePeriod: TimePeriod.OneDay,\r\n        size: TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\r\n      })\r\n    },\r\n    {\r\n      refetchOnReconnect: false,\r\n      refetchOnWindowFocus: false,\r\n      refetchOnMount: false,\r\n    }\r\n  )\r\n  const { data: gqlData } = useTrendingCollections(\r\n    TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\r\n    HistoryDuration.Day\r\n  )\r\n\r\n  const collections = useMemo(() => {\r\n    const gatedData = isNftGraphqlEnabled ? gqlData : data\r\n    return gatedData\r\n      ?.filter((collection) => collection.address && !EXCLUDED_COLLECTIONS.includes(collection.address))\r\n      .slice(0, 5)\r\n  }, [data, gqlData, isNftGraphqlEnabled])\r\n\r\n  const [activeCollectionIdx, setActiveCollectionIdx] = useState(0)\r\n  const onToggleNextSlide = useCallback(\r\n    (direction: number) => {\r\n      if (!collections) return\r\n      setActiveCollectionIdx((idx) => calculateCardIndex(idx + direction, collections.length))\r\n    },\r\n    [collections]\r\n  )\r\n\r\n  const activeCollection = collections?.[activeCollectionIdx]\r\n\r\n  return (\r\n    <BannerContainer>\r\n      {activeCollection ? (\r\n        activeCollection.bannerImageUrl ? (\r\n          <BannerBackground backgroundImage={activeCollection.bannerImageUrl} />\r\n        ) : (\r\n          <PlainBackground />\r\n        )\r\n      ) : null}\r\n      <BannerMainArea>\r\n        <HeaderContainer>\r\n          Better prices. <br />\r\n          More listings.\r\n        </HeaderContainer>\r\n        {collections ? (\r\n          <Carousel activeIndex={activeCollectionIdx} toggleNextSlide={onToggleNextSlide}>\r\n            {collections.map((collection) => (\r\n              <CarouselCard\r\n                key={collection.address}\r\n                collection={collection}\r\n                onClick={() => navigate(`/nfts/collection/${collection.address}`)}\r\n              />\r\n            ))}\r\n          </Carousel>\r\n        ) : (\r\n          <LoadingCarousel>\r\n            <LoadingCarouselCard />\r\n          </LoadingCarousel>\r\n        )}\r\n      </BannerMainArea>\r\n    </BannerContainer>\r\n  )\r\n}\r\n\r\nexport default Banner\r\n","import { formatEther } from '@ethersproject/units'\r\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\r\nimport { SquareArrowDownIcon, SquareArrowUpIcon, VerifiedIcon } from 'nft/components/icons'\r\nimport { useIsMobile } from 'nft/hooks'\r\nimport { Denomination } from 'nft/types'\r\nimport { volumeFormatter } from 'nft/utils'\r\nimport { ReactNode } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\n\r\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from '../../../utils/currency'\r\nimport * as styles from './Cells.css'\r\n\r\nconst TruncatedText = styled.div`\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst CollectionNameContainer = styled(TruncatedText)`\r\n  display: flex;\r\n  padding: 14px 0px 14px 8px;\r\n  align-items: center;\r\n`\r\n\r\nconst CollectionName = styled(TruncatedText)`\r\n  margin-left: 8px;\r\n`\r\n\r\nconst TruncatedSubHeader = styled(ThemedText.SubHeader)`\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\nconst TruncatedSubHeaderSmall = styled(ThemedText.SubHeaderSmall)`\r\n  color: ${({ theme }) => `${theme.textPrimary}`};\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst RoundedImage = styled.div<{ src?: string }>`\r\n  height: 36px;\r\n  width: 36px;\r\n  border-radius: 36px;\r\n  background: ${({ src, theme }) => (src ? `url(${src})` : theme.backgroundModule)};\r\n  background-size: cover;\r\n  background-position: center;\r\n  flex-shrink: 0;\r\n`\r\n\r\nconst ChangeCellContainer = styled.div<{ change: number }>`\r\n  display: flex;\r\n  color: ${({ theme, change }) => (change >= 0 ? theme.accentSuccess : theme.accentFailure)};\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  gap: 2px;\r\n`\r\n\r\nconst EthContainer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`\r\n\r\ninterface CellProps {\r\n  value: {\r\n    logo?: string\r\n    name?: string\r\n    address?: string\r\n    isVerified?: boolean\r\n    value?: number\r\n    change?: number\r\n  }\r\n}\r\n\r\nexport const CollectionTitleCell = ({ value }: CellProps) => {\r\n  const isMobile = useIsMobile()\r\n  return (\r\n    <CollectionNameContainer>\r\n      <RoundedImage src={value.logo} />\r\n      <CollectionName>\r\n        {isMobile ? (\r\n          <TruncatedSubHeaderSmall>{value.name}</TruncatedSubHeaderSmall>\r\n        ) : (\r\n          <TruncatedSubHeader>{value.name}</TruncatedSubHeader>\r\n        )}\r\n      </CollectionName>\r\n      {value.isVerified && (\r\n        <span className={styles.verifiedBadge}>\r\n          <VerifiedIcon />\r\n        </span>\r\n      )}\r\n    </CollectionNameContainer>\r\n  )\r\n}\r\n\r\nexport const DiscreteNumberCell = ({ value }: CellProps) => (\r\n  <span>{value.value ? volumeFormatter(value.value) : '-'}</span>\r\n)\r\n\r\nconst getDenominatedValue = (denomination: Denomination, inWei: boolean, value?: number, usdPrice?: number) => {\r\n  if (denomination === Denomination.ETH) return value\r\n  if (usdPrice && value) return usdPrice * (inWei ? parseFloat(formatEther(value)) : value)\r\n\r\n  return undefined\r\n}\r\n\r\nexport const EthCell = ({\r\n  value,\r\n  denomination,\r\n  usdPrice,\r\n}: {\r\n  value?: number\r\n  denomination: Denomination\r\n  usdPrice?: number\r\n}) => {\r\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\r\n  const denominatedValue = getDenominatedValue(denomination, !isNftGraphqlEnabled, value, usdPrice)\r\n  const formattedValue = denominatedValue\r\n    ? denomination === Denomination.ETH\r\n      ? isNftGraphqlEnabled\r\n        ? ethNumberStandardFormatter(denominatedValue.toString(), false, true, false) + ' ETH'\r\n        : formatWeiToDecimal(denominatedValue.toString(), true) + ' ETH'\r\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\r\n    : '-'\r\n\r\n  const isMobile = useIsMobile()\r\n  const TextComponent = isMobile ? ThemedText.BodySmall : ThemedText.BodyPrimary\r\n\r\n  return (\r\n    <EthContainer>\r\n      <TextComponent>{value ? formattedValue : '-'}</TextComponent>\r\n    </EthContainer>\r\n  )\r\n}\r\n\r\nexport const TextCell = ({ value }: { value: string }) => <ThemedText.BodyPrimary>{value}</ThemedText.BodyPrimary>\r\n\r\nexport const VolumeCell = ({\r\n  value,\r\n  denomination,\r\n  usdPrice,\r\n}: {\r\n  value?: number\r\n  denomination: Denomination\r\n  usdPrice?: number\r\n}) => {\r\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\r\n\r\n  const formattedValue = denominatedValue\r\n    ? denomination === Denomination.ETH\r\n      ? ethNumberStandardFormatter(denominatedValue.toString(), false, false, true) + ' ETH'\r\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\r\n    : '-'\r\n\r\n  return (\r\n    <EthContainer>\r\n      <ThemedText.BodyPrimary>{value ? formattedValue : '-'}</ThemedText.BodyPrimary>\r\n    </EthContainer>\r\n  )\r\n}\r\n\r\nexport const ChangeCell = ({ change, children }: { children?: ReactNode; change?: number }) => {\r\n  const isMobile = useIsMobile()\r\n  const TextComponent = isMobile ? ThemedText.Caption : ThemedText.BodyPrimary\r\n  return (\r\n    <ChangeCellContainer change={change ?? 0}>\r\n      {!change || change > 0 ? (\r\n        <SquareArrowUpIcon width=\"20px\" height=\"20px\" />\r\n      ) : (\r\n        <SquareArrowDownIcon width=\"20px\" height=\"20px\" />\r\n      )}\r\n      <TextComponent color=\"currentColor\">{children || `${change ? Math.abs(Math.round(change)) : 0}%`}</TextComponent>\r\n    </ChangeCellContainer>\r\n  )\r\n}\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var logo = 'rgw6ez7zp';\nexport var title = 'rgw6eze9 rgw6ezcb rgw6ezg7 rgw6ez52p rgw6ez4tb rgw6ez8a9 rgw6ez4sx rgw6ez4t4 rgw6ez2qg rgw6ez2vw';\nexport var address = 'rgw6eze9 rgw6ezcb rgw6ezg7 rgw6ez52p rgw6ez4tb rgw6ez8a9 rgw6ez4sx rgw6ez4t4 rgw6ez2qg rgw6ez2vw rgw6ezok rgw6ez3k rgw6ez1ur rgw6ez1du';\nexport var verifiedBadge = 'rgw6ezo6 rgw6ez4sc rgw6ez32i rgw6ez1gr rgw6ez18s rgw6ez4tb';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/explore/Explore.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/explore/Explore.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbW9yN3ZlMSB7CiAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgbWFyZ2luOiAwIGF1dG87CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGZsZXgtd3JhcDogbm93cmFwOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouXzFtb3I3dmUzIHsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC40cyBlYXNlOwp9Ci5fMW1vcjd2ZTggewogIHZlcnRpY2FsLWFsaWduOiBib3R0b207Cn0KLl8xbW9yN3ZlYSB7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgxNTMsIDE2MSwgMTg5LCAwLjI0KTsKICBib3JkZXItc3BhY2luZzogMHB4IDQwcHg7Cn0KLl8xbW9yN3ZlZDpudGgtbGFzdC1jaGlsZCgxKSB7CiAgcGFkZGluZy1yaWdodDogMjBweDsKfQouXzFtb3I3dmVmOm50aC1sYXN0LWNoaWxkKDEpIHsKICBwYWRkaW5nLXJpZ2h0OiAyMHB4Owp9Ci5fMW1vcjd2ZWg6bnRoLWxhc3QtY2hpbGQoMSkgewogIHBhZGRpbmctcmlnaHQ6IDIwcHg7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var section = '_1mor7ve1 rgw6ez2qu rgw6ez2p6 rgw6ez2x9 rgw6ez2vl';\nexport var activityRow = '_1mor7ve3 rgw6ez4wf rgw6ez3d rgw6ez3m';\nexport var activeRow = 'rgw6ez78v';\nexport var timestamp = 'rgw6ez4wf rgw6ezbx rgw6ez587 rgw6ez3xt rgw6ez3t0 rgw6ez3pg rgw6ez3rg rgw6ez40j rgw6ez44a';\nexport var marketplaceIcon = '_1mor7ve8 rgw6ez17t rgw6ez1fs rgw6ez7zd rgw6ez4js rgw6ezok';\nexport var table = '_1mor7vea rgw6ez5dj rgw6ez1dg rgw6ez7zp rgw6ez7yd';\nexport var thead = 'rgw6ezvd rgw6ez5ov rgw6ez87x rgw6ez7yx';\nexport var th = '_1mor7ved rgw6eze9 rgw6ezc4 rgw6ezg0 rgw6ez52v rgw6ez33a rgw6ez2k1';\nexport var td = '_1mor7vef rgw6eze9 rgw6ezcb rgw6ezg7 rgw6ez32i rgw6ez2j9 rgw6ez1s1 rgw6ez4ti rgw6ez4wt';\nexport var loadingTd = '_1mor7veh rgw6eze9 rgw6ezcb rgw6ezg7 rgw6ez32w rgw6ez2jn rgw6ez1s1 rgw6ez4ti rgw6ez4wt';","import { TraceEvent } from '@uniswap/analytics'\r\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { LoadingBubble } from 'components/Tokens/loading'\r\nimport { useWindowSize } from 'hooks/useWindowSize'\r\nimport { useIsMobile } from 'nft/hooks'\r\nimport { useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Column, ColumnInstance, HeaderGroup, IdType, useSortBy, useTable } from 'react-table'\r\nimport styled, { useTheme } from 'styled-components/macro'\r\nimport { GlowEffect, ThemedText } from 'theme'\r\n\r\nimport { Box } from '../../components/Box'\r\nimport { CollectionTableColumn } from '../../types'\r\nimport { ArrowRightIcon } from '../icons'\r\nimport { ColumnHeaders } from './CollectionTable'\r\nimport * as styles from './Explore.css'\r\n\r\n// Default table cell max width\r\nconst CELL_WIDTH = '160px'\r\n// Collection Name cell max widths\r\nconst MOBILE_CELL_WIDTH = '240px'\r\nconst DESKTOP_CELL_WIDTH = '360px'\r\n\r\nconst RankCellContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-left: 24px;\r\n  gap: 12px;\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    padding-left: 8px;\r\n  }\r\n`\r\n\r\nconst StyledRow = styled.tr`\r\n  cursor: pointer;\r\n  :hover {\r\n    background: ${({ theme }) => theme.stateOverlayHover};\r\n  }\r\n  :active {\r\n    background: ${({ theme }) => theme.stateOverlayPressed};\r\n  }\r\n`\r\n\r\nconst StyledLoadingRow = styled.tr`\r\n  height: 80px;\r\n`\r\n\r\nconst StyledHeader = styled.th<{ disabled?: boolean }>`\r\n  ${({ disabled }) => !disabled && `cursor: pointer;`}\r\n\r\n  :hover {\r\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.hover};`}\r\n  }\r\n\r\n  :active {\r\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.click};`}\r\n  }\r\n`\r\n\r\nconst StyledLoadingHolder = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n`\r\n\r\nconst StyledCollectionNameHolder = styled.div`\r\n  display: flex;\r\n  margin-left: 24px;\r\n  gap: 8px;\r\n  align-items: center;\r\n`\r\n\r\nconst StyledImageHolder = styled(LoadingBubble)`\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 36px;\r\n`\r\n\r\nconst StyledRankHolder = styled(LoadingBubble)`\r\n  width: 8px;\r\n  height: 16px;\r\n  margin-right: 12px;\r\n`\r\n\r\nconst DEFAULT_TRENDING_TABLE_QUERY_AMOUNT = 10\r\n\r\ninterface TableProps<D extends Record<string, unknown>> {\r\n  columns: Column<CollectionTableColumn>[]\r\n  data: CollectionTableColumn[]\r\n  smallHiddenColumns: IdType<D>[]\r\n  mediumHiddenColumns: IdType<D>[]\r\n  largeHiddenColumns: IdType<D>[]\r\n}\r\nexport function Table<D extends Record<string, unknown>>({\r\n  columns,\r\n  data,\r\n  smallHiddenColumns,\r\n  mediumHiddenColumns,\r\n  largeHiddenColumns,\r\n  ...props\r\n}: TableProps<D>) {\r\n  const theme = useTheme()\r\n  const { chainId } = useWeb3React()\r\n  const { width } = useWindowSize()\r\n  const isMobile = useIsMobile()\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns, visibleColumns } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        initialState: {\r\n          sortBy: [\r\n            {\r\n              desc: true,\r\n              id: ColumnHeaders.Volume,\r\n            },\r\n          ],\r\n        },\r\n        ...props,\r\n      },\r\n      useSortBy\r\n    )\r\n\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    if (!width) return\r\n\r\n    if (width <= theme.breakpoint.sm) {\r\n      setHiddenColumns(smallHiddenColumns)\r\n    } else if (width <= theme.breakpoint.md) {\r\n      setHiddenColumns(mediumHiddenColumns)\r\n    } else if (width <= theme.breakpoint.lg) {\r\n      setHiddenColumns(largeHiddenColumns)\r\n    } else {\r\n      setHiddenColumns([])\r\n    }\r\n  }, [width, setHiddenColumns, columns, smallHiddenColumns, mediumHiddenColumns, largeHiddenColumns, theme.breakpoint])\r\n\r\n  if (data.length === 0) {\r\n    return <LoadingTable headerGroups={headerGroups} visibleColumns={visibleColumns} {...getTableProps()} />\r\n  }\r\n\r\n  return (\r\n    <GlowEffect>\r\n      <table {...getTableProps()} className={styles.table}>\r\n        <thead className={styles.thead}>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\r\n              {headerGroup.headers.map((column, index) => {\r\n                return (\r\n                  <StyledHeader\r\n                    className={styles.th}\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    style={{\r\n                      textAlign: index === 0 ? 'left' : 'right',\r\n                      paddingLeft: index === 0 ? (isMobile ? '16px' : '52px') : 0,\r\n                    }}\r\n                    disabled={column.disableSortBy}\r\n                    key={index}\r\n                  >\r\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\r\n                      {column.isSorted ? (\r\n                        column.isSortedDesc ? (\r\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\r\n                        ) : (\r\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\r\n                        )\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </Box>\r\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\r\n                      {column.render('Header')}\r\n                    </Box>\r\n                  </StyledHeader>\r\n                )\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row)\r\n\r\n            return (\r\n              <TraceEvent\r\n                events={[BrowserEvent.onClick]}\r\n                name={NFTEventName.NFT_TRENDING_ROW_SELECTED}\r\n                properties={{ collection_address: row.original.collection.address, chain_id: chainId }}\r\n                element={InterfaceElementName.NFT_TRENDING_ROW}\r\n                key={i}\r\n              >\r\n                <StyledRow\r\n                  {...row.getRowProps()}\r\n                  key={row.id}\r\n                  onClick={() => navigate(`/nfts/collection/${row.original.collection.address}`)}\r\n                  data-testid=\"nft-trending-collection\"\r\n                >\r\n                  {row.cells.map((cell, cellIndex) => {\r\n                    return (\r\n                      <td\r\n                        className={styles.td}\r\n                        {...cell.getCellProps()}\r\n                        key={cellIndex}\r\n                        style={{\r\n                          maxWidth: cellIndex === 0 ? (isMobile ? MOBILE_CELL_WIDTH : DESKTOP_CELL_WIDTH) : CELL_WIDTH,\r\n                        }}\r\n                      >\r\n                        {cellIndex === 0 ? (\r\n                          <RankCellContainer>\r\n                            {!isMobile && (\r\n                              <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\r\n                                {i + 1}\r\n                              </ThemedText.BodySecondary>\r\n                            )}\r\n                            {cell.render('Cell')}\r\n                          </RankCellContainer>\r\n                        ) : (\r\n                          cell.render('Cell')\r\n                        )}\r\n                      </td>\r\n                    )\r\n                  })}\r\n                </StyledRow>\r\n              </TraceEvent>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </GlowEffect>\r\n  )\r\n}\r\n\r\ninterface LoadingTableProps {\r\n  headerGroups: HeaderGroup<CollectionTableColumn>[]\r\n  visibleColumns: ColumnInstance<CollectionTableColumn>[]\r\n}\r\n\r\nfunction LoadingTable({ headerGroups, visibleColumns, ...props }: LoadingTableProps) {\r\n  return (\r\n    <GlowEffect>\r\n      <table {...props} className={styles.table}>\r\n        <thead className={styles.thead}>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\r\n              {headerGroup.headers.map((column, index) => {\r\n                return (\r\n                  <StyledHeader\r\n                    className={styles.th}\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    style={{\r\n                      textAlign: index === 0 ? 'left' : 'right',\r\n                      paddingLeft: index === 0 ? '52px' : 0,\r\n                    }}\r\n                    disabled={index === 0}\r\n                    key={index}\r\n                  >\r\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\r\n                      {column.isSorted ? (\r\n                        column.isSortedDesc ? (\r\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\r\n                        ) : (\r\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\r\n                        )\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </Box>\r\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\r\n                      {column.render('Header')}\r\n                    </Box>\r\n                  </StyledHeader>\r\n                )\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...props}>\r\n          {[...Array(DEFAULT_TRENDING_TABLE_QUERY_AMOUNT)].map((_, index) => (\r\n            <StyledLoadingRow key={index}>\r\n              {[...Array(visibleColumns.length)].map((_, cellIndex) => {\r\n                return (\r\n                  <td className={styles.loadingTd} key={cellIndex}>\r\n                    {cellIndex === 0 ? (\r\n                      <StyledCollectionNameHolder>\r\n                        <StyledRankHolder />\r\n                        <StyledImageHolder />\r\n                        <LoadingBubble />\r\n                      </StyledCollectionNameHolder>\r\n                    ) : (\r\n                      <StyledLoadingHolder>\r\n                        <LoadingBubble />\r\n                      </StyledLoadingHolder>\r\n                    )}\r\n                  </td>\r\n                )\r\n              })}\r\n            </StyledLoadingRow>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </GlowEffect>\r\n  )\r\n}\r\n","import { OpacityHoverState } from 'components/Common'\r\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\r\nimport { HistoryDuration } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { useTrendingCollections } from 'graphql/data/nft/TrendingCollections'\r\nimport ms from 'ms.macro'\r\nimport { CollectionTableColumn, Denomination, TimePeriod, VolumeType } from 'nft/types'\r\nimport { fetchPrice } from 'nft/utils'\r\nimport { useMemo, useState } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\n\r\nimport { fetchTrendingCollections } from '../../queries'\r\nimport CollectionTable from './CollectionTable'\r\n\r\nconst timeOptions: { label: string; value: TimePeriod }[] = [\r\n  { label: '1D', value: TimePeriod.OneDay },\r\n  { label: '1W', value: TimePeriod.SevenDays },\r\n  { label: '1M', value: TimePeriod.ThirtyDays },\r\n  { label: 'All', value: TimePeriod.AllTime },\r\n]\r\n\r\nconst ExploreContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  padding: 0 16px;\r\n`\r\n\r\nconst StyledHeader = styled.div`\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  font-size: 36px;\r\n  line-height: 44px;\r\n  font-weight: 500;\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    font-size: 20px;\r\n    line-height: 28px;\r\n  }\r\n`\r\n\r\nconst FiltersRow = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 36px;\r\n  margin-bottom: 20px;\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    margin-bottom: 16px;\r\n    margin-top: 16px;\r\n  }\r\n`\r\n\r\nconst Filter = styled.div`\r\n  display: flex;\r\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  border-radius: 16px;\r\n  padding: 4px;\r\n`\r\n\r\nconst Selector = styled.div<{ active: boolean }>`\r\n  padding: 8px 12px;\r\n  border-radius: 12px;\r\n  background: ${({ active, theme }) => (active ? theme.backgroundInteractive : 'none')};\r\n  cursor: pointer;\r\n\r\n  ${OpacityHoverState}\r\n`\r\n\r\nconst StyledSelectorText = styled(ThemedText.SubHeader)<{ active: boolean }>`\r\n  color: ${({ theme, active }) => (active ? theme.textPrimary : theme.textSecondary)};\r\n`\r\n\r\nfunction convertTimePeriodToHistoryDuration(timePeriod: TimePeriod): HistoryDuration {\r\n  switch (timePeriod) {\r\n    case TimePeriod.OneDay:\r\n      return HistoryDuration.Day\r\n    case TimePeriod.SevenDays:\r\n      return HistoryDuration.Week\r\n    case TimePeriod.ThirtyDays:\r\n      return HistoryDuration.Month\r\n    case TimePeriod.AllTime:\r\n      return HistoryDuration.Max\r\n    default:\r\n      return HistoryDuration.Day\r\n  }\r\n}\r\n\r\nconst TrendingCollections = () => {\r\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.OneDay)\r\n  const [isEthToggled, setEthToggled] = useState(true)\r\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\r\n\r\n  const { isSuccess, data } = useQuery(\r\n    ['trendingCollections', timePeriod],\r\n    () => {\r\n      return fetchTrendingCollections({ volumeType: 'eth', timePeriod, size: 100 })\r\n    },\r\n    {\r\n      refetchOnReconnect: false,\r\n      refetchOnWindowFocus: false,\r\n      refetchOnMount: false,\r\n      refetchInterval: 5000,\r\n    }\r\n  )\r\n\r\n  const { data: gqlData, loading } = useTrendingCollections(100, convertTimePeriodToHistoryDuration(timePeriod))\r\n\r\n  const { data: usdPrice } = useQuery(['fetchPrice', {}], () => fetchPrice(), {\r\n    refetchOnReconnect: false,\r\n    refetchOnWindowFocus: false,\r\n    refetchOnMount: false,\r\n    refetchInterval: ms`1m`,\r\n  })\r\n\r\n  const trendingCollections = useMemo(() => {\r\n    const gatedData = isNftGraphqlEnabled ? gqlData : data\r\n    const dataLoaded = isNftGraphqlEnabled ? !loading : isSuccess\r\n    if (dataLoaded && gatedData) {\r\n      return gatedData.map((d) => ({\r\n        ...d,\r\n        collection: {\r\n          name: d.name,\r\n          logo: d.imageUrl,\r\n          address: d.address,\r\n          isVerified: d.isVerified,\r\n        },\r\n        volume: {\r\n          value: d.volume,\r\n          change: d.volumeChange,\r\n          type: 'eth' as VolumeType,\r\n        },\r\n        floor: {\r\n          value: d.floor,\r\n          change: d.floorChange,\r\n        },\r\n        owners: {\r\n          value: d.owners,\r\n        },\r\n        sales: d.sales,\r\n        totalSupply: d.totalSupply,\r\n        denomination: isEthToggled ? Denomination.ETH : Denomination.USD,\r\n        usdPrice,\r\n      }))\r\n    } else return [] as CollectionTableColumn[]\r\n  }, [isNftGraphqlEnabled, gqlData, data, loading, isSuccess, isEthToggled, usdPrice])\r\n\r\n  return (\r\n    <ExploreContainer>\r\n      <StyledHeader>Trending NFT collections</StyledHeader>\r\n      <FiltersRow>\r\n        <Filter>\r\n          {timeOptions.map((timeOption) => {\r\n            return (\r\n              <Selector\r\n                key={timeOption.value}\r\n                active={timeOption.value === timePeriod}\r\n                onClick={() => setTimePeriod(timeOption.value)}\r\n              >\r\n                <StyledSelectorText lineHeight=\"20px\" active={timeOption.value === timePeriod}>\r\n                  {timeOption.label}\r\n                </StyledSelectorText>\r\n              </Selector>\r\n            )\r\n          })}\r\n        </Filter>\r\n        <Filter onClick={() => setEthToggled(!isEthToggled)}>\r\n          <Selector active={isEthToggled}>\r\n            <StyledSelectorText lineHeight=\"20px\" active={isEthToggled}>\r\n              ETH\r\n            </StyledSelectorText>\r\n          </Selector>\r\n          <Selector active={!isEthToggled}>\r\n            <StyledSelectorText lineHeight=\"20px\" active={!isEthToggled}>\r\n              USD\r\n            </StyledSelectorText>\r\n          </Selector>\r\n        </Filter>\r\n      </FiltersRow>\r\n      <CollectionTable data={trendingCollections} timePeriod={timePeriod} />\r\n    </ExploreContainer>\r\n  )\r\n}\r\n\r\nexport default TrendingCollections\r\n","import { Trace } from '@uniswap/analytics'\r\nimport { InterfacePageName } from '@uniswap/analytics-events'\r\nimport Banner from 'nft/components/explore/Banner'\r\nimport TrendingCollections from 'nft/components/explore/TrendingCollections'\r\nimport { useBag } from 'nft/hooks'\r\nimport { useEffect } from 'react'\r\nimport styled from 'styled-components/macro'\r\n\r\nconst ExploreContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\r\n    gap: 16px;\r\n  }\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    gap: 0px;\r\n  }\r\n`\r\n\r\nconst NftExplore = () => {\r\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\r\n\r\n  useEffect(() => {\r\n    setBagExpanded({ bagExpanded: false, manualClose: false })\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <>\r\n      <Trace page={InterfacePageName.NFT_EXPLORE_PAGE} shouldLogImpression>\r\n        <ExploreContainer>\r\n          <Banner />\r\n          <TrendingCollections />\r\n        </ExploreContainer>\r\n      </Trace>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NftExplore\r\n"],"sourceRoot":""}