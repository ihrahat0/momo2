{"version":3,"sources":["featureFlags/flags/payWithAnyToken.ts","nft/utils/bag.ts","nft/utils/nftRoute.ts","nft/hooks/useTokenInput.ts","nft/hooks/useFetchAssets.ts","nft/hooks/usePurchaseAssets.ts","nft/utils/tokenRoutes.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/BagFooter.tsx","nft/hooks/useSubscribeTransactionState.ts","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePermit2Approval.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts","nft/hooks/useBagTotalEthPrice.ts"],"names":["usePayWithAnyTokenEnabled","useBaseFlag","FeatureFlag","payWithAnyToken","BaseVariant","Enabled","getPurchasableAssets","itemsInBag","filter","item","status","BagItemStatus","UNAVAILABLE","map","asset","getNextBagState","wishAssetsToBuy","route","purchasingWithErc20","compareAssetsWithTransactionRoute","hasPriceAdjustment","updatedAssets","shouldRefetchCalldata","filterUpdatedAssetsByState","unchanged","priceChanged","unavailable","hasAssets","length","hasAssetsInReview","hasUnavailableAssets","shouldReview","newBagItems","unavailableAsset","changedAsset","REVIEWING_PRICE_CHANGE","unchangedAsset","REVIEWED","createBagFromUpdatedAssets","nextBagStatus","BagStatus","IN_REVIEW","CONFIRM_REVIEW","CONFIRM_QUOTE","CONFIRMING_IN_WALLET","ADDING_TO_BAG","evaluateNextBagState","buildRoutingItem","routingItem","action","RoutingActions","Buy","marketplace","toLowerCase","amountIn","price","value","assetIn","ETHPrice","baseAsset","currency","basePrice","baseDecimals","amountOut","amount","toString","assetOut","id","decimals","address","contractAddress","priceInfo","tokenType","tokenId","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","undefined","sendAmount","data","calldata","to","toAddress","useTokenInput","create","devtools","set","inputCurrency","tokenTradeInput","setInputCurrency","clearInputCurrency","setTokenTradeInput","name","useFetchAssets","account","useWeb3React","useBag","setBagStatus","didOpenUnavailableAssets","setDidOpenUnavailableAssets","isLocked","setLocked","setItemsInBag","shallow","uncheckedItemsInBag","bagIsLocked","setBagLocked","state","useMemo","recalculateBagUsingPooledAssets","useNftRouteLazyQuery","fetchGqlRoute","purchaseAssets","provider","sendTransaction","useSendTransaction","setTransactionResponse","useTransactionResponse","setBagExpanded","reset","resetBag","useCallback","routingData","assetsToBuy","getSigner","purchaseResponse","bagExpanded","usePurchaseAssets","resetStateBeforeFetch","FETCHING_ROUTE","a","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","nftRoute","buildTradeRouteInput","swap","inputAmount","swapAmounts","outputAmount","quotient","token","isToken","chainId","isNative","pools","pool","isPool","pair","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","hasRoutes","routes","hasInputAmount","hasAllowance","useEffect","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","usePriceImpact","theme","useTheme","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","accentCritical","accentWarning","priceImpactSeverity","type","color","displayPercentage","priceImpact","sign","lessThan","Number","numerator","denominator","number","parseFloat","toFixed","toHumanReadablePercent","FooterContainer","styled","div","Footer","backgroundOutline","textPrimary","FooterHeader","Column","usingPayWithAnyToken","CurrencyRow","Row","TotalColumn","WarningIcon","AlertTriangle","WarningText","ThemedText","BodyPrimary","$color","HelperText","Caption","CurrencyInput","PayButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","ActionButton","disabled","children","onClick","backgroundColor","textColor","Warning","fontSize","lineHeight","Helper","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","TradeState","LOADING","fontWeight","SYNCING","ethNumberStandardFormatter","toExact","formatWeiToDecimal","symbol","FiatValue","usdcValue","text","size","BodySmall","style","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","FETCHING_FINAL_ROUTE","PROCESSING_TRANSACTION","BagFooter","setModalIsOpen","eventProperties","toggleWalletDrawer","useToggleAccountDrawer","connector","connected","Boolean","useBagTotalEthPrice","shouldUsePayWithAnyToken","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","bagStatus","useState","tokenSelectorOpen","setTokenSelectorOpen","isPending","includes","SupportedChainId","MAINNET","transactionState","setTransactionState","setState","transactionStateRef","useRef","subscribe","current","TxStateType","Confirming","Denied","Invalid","WARNING","New","useSubscribeTransactionState","fetchAssets","parsedOutputAmount","tryParseCurrencyAmount","formatEther","useBestTrade","TradeType","EXACT_OUTPUT","useAutoSlippageTolerance","maximumAmountIn","useDerivedPayWithAnyTokenSwapInfo","maximumAmount","enabled","usePermit2Allowance","UNIVERSAL_ROUTER_ADDRESS","isApprovalLoading","AllowanceState","REQUIRED","isAllowancePending","setIsAllowancePending","updateAllowance","invariant","approveAndPermit","sendAnalyticsEvent","InterfaceEventName","APPROVE_TOKEN_TXN_SUBMITTED","chain_id","token_symbol","token_address","console","error","usePermit2Approval","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balanceInEth","useWalletBalance","balance","sufficientBalance","parseEther","gte","handleClick","buttonText","warningText","warningTextColor","helperText","helperTextColor","textSecondary","buttonColor","accentAction","buttonTextColor","accentTextLightPrimary","switchChain","VALID","backgroundInteractive","traceEventProperties","usd_value","using_erc20","gap","SubHeaderSmall","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","HeadlineSmall","marginBottom","justify","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","selectedCurrency","onlyShowCurrenciesWithBalance","dash","keyframes","Circle","circle","TimedLoader","Box","display","position","height","width","strokeWidth","strokeLinecap","transform","transformOrigin","fill","r","cx","cy","bagRow","bagRowImage","grayscaleImage","assetName","collectionName","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","NoContentContainer","background","className","styles","textAlign","left","top","BagRow","usdPrice","removeAsset","showRemove","grayscale","isMobile","loadedImage","setImageLoaded","smallImageUrl","noImageAvailable","setNoImageAvailable","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","handleRemoveClick","e","preventDefault","stopPropagation","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","as","src","alt","clsx","onLoad","onError","visibility","loadingBlock","overflow","whiteSpace","susFlag","collectionIsVerified","emphasis","ButtonEmphasis","medium","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","BigNumber","from","gt","handleRemove","handleKeep","borderTopColor","marginLeft","marginRight","justifyContent","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","UnavailableAssetsHeaderRow","clearUnavailableAssets","useReducer","s","toggleOpen","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","cursor","bodySmall","slice","BagContent","removeAssetsFromBag","useIsMobile","fetchedPriceData","useQuery","fetchPrice","unchangedAssets","ADDED_TO_BAG","priceChangedAssets","unavailableAssets","availableItems","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","reverse","ClearButton","ButtonText","IconWrapper","OpacityHoverState","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","numberOfCharacters","getCircleSizing","StyledColumn","EmptyState","useIsNftProfilePage","themeVars","colors","textTertiary","subhead","ProfileAssetRow","useSellAsset","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","asset_contract","ProfileBagContent","sellAssets","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","backgroundSurface","shallowShadow","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","sm","xxxl","DetailsPageBackground","ContinueButton","transition","duration","opacity","hover","ScrollingIndicator","show","marginX","borderBottomColor","Bag","resetSellAssets","setProfilePageState","useProfilePageState","toggleBag","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","isModalOpen","userCanScroll","setUserCanScroll","scrollProgress","setScrollProgress","handleCloseBag","manualClose","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","ref","node","canScroll","scrollHeight","clientHeight","onScroll","event","scrollTop","currentTarget","containerHeight","ProfilePageStateType","LISTING","NFT_PROFILE_PAGE_START_SELL","list_quantity","collection_addresses","token_ids","Overlay","reduce","total","add","useBagTotalUsdPrice"],"mappings":"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","file":"static/js/1.4938c554.chunk.js","sourcesContent":["import { BaseVariant, FeatureFlag, useBaseFlag } from '../index'\r\n\r\nexport function usePayWithAnyTokenFlag(): BaseVariant {\r\n  return useBaseFlag(FeatureFlag.payWithAnyToken, BaseVariant.Enabled)\r\n}\r\n\r\nexport function usePayWithAnyTokenEnabled(): boolean {\r\n  return usePayWithAnyTokenFlag() === BaseVariant.Enabled\r\n}\r\n\r\nexport { BaseVariant as PayWithAnyTokenVariant }\r\n","import { BagItem, BagItemStatus, BagStatus, RoutingItem, UpdatedGenieAsset } from 'nft/types'\r\n\r\nimport { compareAssetsWithTransactionRoute } from './txRoute/combineItemsWithTxRoute'\r\nimport { filterUpdatedAssetsByState } from './updatedAssets'\r\n\r\nexport function getPurchasableAssets(itemsInBag: BagItem[]): UpdatedGenieAsset[] {\r\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\r\n}\r\n\r\nfunction createBagFromUpdatedAssets(\r\n  unavailable: UpdatedGenieAsset[],\r\n  priceChanged: UpdatedGenieAsset[],\r\n  unchanged: UpdatedGenieAsset[]\r\n): BagItem[] {\r\n  return [\r\n    ...unavailable.map((unavailableAsset) => ({\r\n      asset: unavailableAsset,\r\n      status: BagItemStatus.UNAVAILABLE,\r\n    })),\r\n    ...priceChanged.map((changedAsset) => ({\r\n      asset: changedAsset,\r\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE,\r\n    })),\r\n    ...unchanged.map((unchangedAsset) => ({\r\n      asset: unchangedAsset,\r\n      status: BagItemStatus.REVIEWED,\r\n    })),\r\n  ]\r\n}\r\n\r\nfunction evaluateNextBagState(\r\n  hasAssets: boolean,\r\n  shouldReview: boolean,\r\n  hasAssetsInReview: boolean,\r\n  shouldRefetchCalldata: boolean\r\n): BagStatus {\r\n  if (!hasAssets) {\r\n    return BagStatus.ADDING_TO_BAG\r\n  }\r\n\r\n  if (shouldReview) {\r\n    if (hasAssetsInReview) {\r\n      return BagStatus.IN_REVIEW\r\n    }\r\n\r\n    return BagStatus.CONFIRM_REVIEW\r\n  }\r\n\r\n  if (shouldRefetchCalldata) {\r\n    return BagStatus.CONFIRM_QUOTE\r\n  }\r\n\r\n  return BagStatus.CONFIRMING_IN_WALLET\r\n}\r\n\r\nexport function getNextBagState(\r\n  wishAssetsToBuy: UpdatedGenieAsset[],\r\n  route: RoutingItem[],\r\n  purchasingWithErc20: boolean\r\n): { newBagItems: BagItem[]; nextBagStatus: BagStatus } {\r\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route)\r\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\r\n\r\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\r\n\r\n  const hasAssets = updatedAssets.length > 0\r\n  const hasAssetsInReview = priceChanged.length > 0\r\n  const hasUnavailableAssets = unavailable.length > 0\r\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets\r\n\r\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged)\r\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata)\r\n\r\n  return { newBagItems, nextBagStatus }\r\n}\r\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\r\n\r\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\r\n  return {\r\n    action: RoutingActions.Buy,\r\n    marketplace: routingItem.marketplace.toLowerCase(),\r\n    amountIn: routingItem.price.value,\r\n    assetIn: {\r\n      ETHPrice: routingItem.price.value,\r\n      baseAsset: routingItem.price.currency,\r\n      basePrice: routingItem.price.value,\r\n      baseDecimals: '18',\r\n    },\r\n    amountOut: routingItem.amount.toString(),\r\n    assetOut: {\r\n      id: routingItem.id,\r\n      decimals: 18,\r\n      address: routingItem.contractAddress,\r\n      priceInfo: {\r\n        ETHPrice: routingItem.price.value,\r\n        baseAsset: routingItem.price.currency,\r\n        basePrice: routingItem.price.value,\r\n        baseDecimals: '18',\r\n      },\r\n      tokenType: routingItem.tokenType as unknown as TokenType,\r\n      tokenId: routingItem.tokenId,\r\n      amount: routingItem.amount.toString(),\r\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\r\n      orderSource: 'api',\r\n    },\r\n  }\r\n}\r\n\r\nfunction buildRoutingItems(routingItems: NftTrade[]): RoutingItem[] {\r\n  return routingItems.map(buildRoutingItem)\r\n}\r\n\r\nexport function buildRouteResponse(\r\n  routeResponse: NftRouteResponse,\r\n  useErc20Token: boolean\r\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\r\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\r\n  return {\r\n    route,\r\n    routeResponse: {\r\n      route,\r\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\r\n      data: routeResponse.calldata,\r\n      to: routeResponse.toAddress,\r\n    },\r\n  }\r\n}\r\n","import { Currency } from '@uniswap/sdk-core'\r\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { create } from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\ninterface TokenInputState {\r\n  inputCurrency: Currency | undefined\r\n  setInputCurrency: (currency: Currency | undefined) => void\r\n  clearInputCurrency: () => void\r\n  tokenTradeInput: TokenTradeInput | undefined\r\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\r\n}\r\n\r\nexport const useTokenInput = create<TokenInputState>()(\r\n  devtools(\r\n    (set) => ({\r\n      inputCurrency: undefined,\r\n      tokenTradeInput: undefined,\r\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\r\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\r\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\r\n    }),\r\n    { name: 'useTokenInput' }\r\n  )\r\n)\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { BagStatus } from 'nft/types'\r\nimport { buildNftTradeInputFromBagItems, recalculateBagUsingPooledAssets } from 'nft/utils'\r\nimport { getNextBagState, getPurchasableAssets } from 'nft/utils/bag'\r\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport { useBag } from './useBag'\r\nimport { usePurchaseAssets } from './usePurchaseAssets'\r\nimport { useTokenInput } from './useTokenInput'\r\n\r\nexport function useFetchAssets(): () => Promise<void> {\r\n  const { account } = useWeb3React()\r\n\r\n  const {\r\n    itemsInBag: uncheckedItemsInBag,\r\n    setBagStatus,\r\n    didOpenUnavailableAssets,\r\n    setDidOpenUnavailableAssets,\r\n    isLocked: bagIsLocked,\r\n    setLocked: setBagLocked,\r\n    setItemsInBag,\r\n  } = useBag(\r\n    ({\r\n      itemsInBag,\r\n      setBagStatus,\r\n      didOpenUnavailableAssets,\r\n      setDidOpenUnavailableAssets,\r\n      isLocked,\r\n      setLocked,\r\n      setItemsInBag,\r\n    }) => ({\r\n      itemsInBag,\r\n      setBagStatus,\r\n      didOpenUnavailableAssets,\r\n      setDidOpenUnavailableAssets,\r\n      isLocked,\r\n      setLocked,\r\n      setItemsInBag,\r\n    }),\r\n    shallow\r\n  )\r\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\r\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\r\n\r\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\r\n  const purchaseAssets = usePurchaseAssets()\r\n\r\n  const resetStateBeforeFetch = useCallback(() => {\r\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\r\n    !bagIsLocked && setBagLocked(true)\r\n    setBagStatus(BagStatus.FETCHING_ROUTE)\r\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets])\r\n\r\n  return useCallback(async () => {\r\n    resetStateBeforeFetch()\r\n\r\n    fetchGqlRoute({\r\n      variables: {\r\n        senderAddress: account ? account : '',\r\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\r\n        tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\r\n      },\r\n      onCompleted: (data) => {\r\n        if (!data.nftRoute || !data.nftRoute.route) {\r\n          setBagStatus(BagStatus.ADDING_TO_BAG)\r\n          setBagLocked(false)\r\n          return\r\n        }\r\n\r\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag)\r\n        const purchasingWithErc20 = !!tokenTradeInput\r\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\r\n\r\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20)\r\n\r\n        setItemsInBag(newBagItems)\r\n        setBagStatus(nextBagStatus)\r\n\r\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\r\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20)\r\n          setBagLocked(true)\r\n          return\r\n        }\r\n\r\n        setBagLocked(false)\r\n      },\r\n    })\r\n  }, [\r\n    account,\r\n    fetchGqlRoute,\r\n    itemsInBag,\r\n    purchaseAssets,\r\n    resetStateBeforeFetch,\r\n    setBagLocked,\r\n    setBagStatus,\r\n    setItemsInBag,\r\n    tokenTradeInput,\r\n  ])\r\n}\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { RouteResponse, UpdatedGenieAsset } from 'nft/types'\r\nimport { useCallback } from 'react'\r\nimport shallow from 'zustand/shallow'\r\n\r\nimport { useBag } from './useBag'\r\nimport { useSendTransaction } from './useSendTransaction'\r\nimport { useTransactionResponse } from './useTransactionResponse'\r\n\r\nexport function usePurchaseAssets(): (\r\n  routingData: RouteResponse,\r\n  assetsToBuy: UpdatedGenieAsset[],\r\n  purchasingWithErc20?: boolean\r\n) => Promise<void> {\r\n  const { provider } = useWeb3React()\r\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\r\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\r\n\r\n  const {\r\n    setLocked: setBagLocked,\r\n    setBagExpanded,\r\n    reset: resetBag,\r\n  } = useBag(\r\n    ({ setLocked, setBagExpanded, reset }) => ({\r\n      setLocked,\r\n      setBagExpanded,\r\n      reset,\r\n    }),\r\n    shallow\r\n  )\r\n\r\n  return useCallback(\r\n    async (routingData: RouteResponse, assetsToBuy: UpdatedGenieAsset[], purchasingWithErc20 = false) => {\r\n      if (!provider) return\r\n\r\n      const purchaseResponse = await sendTransaction(\r\n        provider.getSigner(),\r\n        assetsToBuy,\r\n        routingData,\r\n        purchasingWithErc20\r\n      )\r\n\r\n      if (purchaseResponse) {\r\n        setBagLocked(false)\r\n        setTransactionResponse(purchaseResponse)\r\n        setBagExpanded({ bagExpanded: false })\r\n        resetBag()\r\n      }\r\n    },\r\n    [provider, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\r\n  )\r\n}\r\n","import { IRoute, Protocol } from '@uniswap/router-sdk'\r\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { Pool } from '@uniswap/v3-sdk'\r\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { InterfaceTrade } from 'state/routing/types'\r\n\r\ninterface SwapAmounts {\r\n  inputAmount: CurrencyAmount<Currency>\r\n  outputAmount: CurrencyAmount<Currency>\r\n}\r\n\r\ninterface TradeTokenInputAmounts {\r\n  inputAmount: TokenAmountInput\r\n  outputAmount: TokenAmountInput\r\n}\r\n\r\ninterface Swap {\r\n  route: IRoute<Currency, Currency, Pair | Pool>\r\n  inputAmount: CurrencyAmount<Currency>\r\n  outputAmount: CurrencyAmount<Currency>\r\n}\r\n\r\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\r\n  return {\r\n    inputAmount: {\r\n      amount: swapAmounts.inputAmount.quotient.toString(),\r\n      token: {\r\n        address: swapAmounts.inputAmount.currency.isToken\r\n          ? swapAmounts.inputAmount.currency.address\r\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\r\n        chainId: swapAmounts.inputAmount.currency.chainId,\r\n        decimals: swapAmounts.inputAmount.currency.decimals,\r\n        isNative: swapAmounts.inputAmount.currency.isNative,\r\n      },\r\n    },\r\n    outputAmount: {\r\n      amount: swapAmounts.outputAmount.quotient.toString(),\r\n      token: {\r\n        address: swapAmounts.outputAmount.currency.isToken\r\n          ? swapAmounts.outputAmount.currency.address\r\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\r\n        chainId: swapAmounts.outputAmount.currency.chainId,\r\n        decimals: swapAmounts.outputAmount.currency.decimals,\r\n        isNative: swapAmounts.outputAmount.currency.isNative,\r\n      },\r\n    },\r\n  }\r\n}\r\n\r\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\r\n  const isPool = 'fee' in pool\r\n\r\n  return {\r\n    pair: !isPool\r\n      ? {\r\n          tokenAmountA: {\r\n            amount: pool.reserve0.quotient.toString(),\r\n            token: {\r\n              address: pool.token0.address,\r\n              chainId: pool.token0.chainId,\r\n              decimals: pool.token0.decimals,\r\n              isNative: pool.token0.isNative,\r\n            },\r\n          },\r\n          tokenAmountB: {\r\n            amount: pool.reserve1.quotient.toString(),\r\n            token: {\r\n              address: pool.token1.address,\r\n              chainId: pool.token1.chainId,\r\n              decimals: pool.token1.decimals,\r\n              isNative: pool.token1.isNative,\r\n            },\r\n          },\r\n        }\r\n      : undefined,\r\n    pool: isPool\r\n      ? {\r\n          fee: pool.fee,\r\n          liquidity: pool.liquidity.toString(),\r\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\r\n          tickCurrent: pool.tickCurrent.toString(),\r\n          tokenA: {\r\n            address: pool.token0.address,\r\n            chainId: pool.token0.chainId,\r\n            decimals: pool.token0.decimals,\r\n            isNative: pool.token0.isNative,\r\n          },\r\n          tokenB: {\r\n            address: pool.token1.address,\r\n            chainId: pool.token1.chainId,\r\n            decimals: pool.token1.decimals,\r\n            isNative: pool.token1.isNative,\r\n          },\r\n        }\r\n      : undefined,\r\n  }\r\n}\r\n\r\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\r\n  return pools.map((pool) => buildPool(pool))\r\n}\r\n\r\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\r\n  return {\r\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\r\n    pools: buildPools(swap.route.pools),\r\n  }\r\n}\r\n\r\nexport function buildAllTradeRouteInputs(trade: InterfaceTrade<Currency, Currency, TradeType>): {\r\n  mixedTokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\r\n  v2TokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\r\n  v3TokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\r\n} {\r\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\r\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\r\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\r\n\r\n  const swaps = trade.swaps\r\n\r\n  for (const swap of swaps) {\r\n    if (swap.route.protocol === Protocol.MIXED) {\r\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\r\n    } else if (swap.route.protocol === Protocol.V2) {\r\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\r\n    } else {\r\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\r\n    }\r\n  }\r\n\r\n  return {\r\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\r\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\r\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\r\n  }\r\n}\r\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\r\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\r\nimport { Allowance } from 'hooks/usePermit2Allowance'\r\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\r\nimport { useEffect } from 'react'\r\nimport { InterfaceTrade } from 'state/routing/types'\r\n\r\nimport { useTokenInput } from './useTokenInput'\r\n\r\nexport default function usePayWithAnyTokenSwap(\r\n  trade?: InterfaceTrade<Currency, Currency, TradeType> | undefined,\r\n  allowance?: Allowance,\r\n  allowedSlippage?: Percent\r\n) {\r\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\r\n  const hasRoutes = !!trade && trade.routes\r\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\r\n  const hasAllowance = !!allowedSlippage && !!allowance\r\n\r\n  useEffect(() => {\r\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\r\n      setTokenTradeInput(undefined)\r\n      return\r\n    }\r\n\r\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\r\n\r\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\r\n      buildAllTradeRouteInputs(trade)\r\n\r\n    const routes: TokenTradeRoutesInput = {\r\n      mixedRoutes: mixedTokenTradeRouteInputs,\r\n      tradeType: TokenTradeType.ExactOutput,\r\n      v2Routes: v2TokenTradeRouteInputs,\r\n      v3Routes: v3TokenTradeRouteInputs,\r\n    }\r\n\r\n    const permitInput: PermitInput | undefined =\r\n      'permitSignature' in allowance && allowance.permitSignature\r\n        ? {\r\n            details: {\r\n              amount: allowance.permitSignature.details.amount.toString(),\r\n              expiration: allowance.permitSignature.details.expiration.toString(),\r\n              nonce: allowance.permitSignature.details.nonce.toString(),\r\n              token: allowance.permitSignature.details.token,\r\n            },\r\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\r\n            signature: allowance.permitSignature.signature,\r\n            spender: allowance.permitSignature.spender,\r\n          }\r\n        : undefined\r\n\r\n    setTokenTradeInput({\r\n      permit: permitInput,\r\n      routes,\r\n      slippageToleranceBasisPoints: slippage,\r\n      tokenAmount: {\r\n        amount: trade.inputAmount.quotient.toString(),\r\n        token: {\r\n          address: trade.inputAmount.currency.address,\r\n          chainId: trade.inputAmount.currency.chainId,\r\n          decimals: trade.inputAmount.currency.decimals,\r\n          isNative: trade.inputAmount.currency.isNative,\r\n        },\r\n      },\r\n    })\r\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\r\n}\r\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\r\nimport { useMemo } from 'react'\r\nimport { InterfaceTrade } from 'state/routing/types'\r\nimport { useTheme } from 'styled-components/macro'\r\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\r\n\r\nexport interface PriceImpact {\r\n  priceImpactSeverity: PriceImpactSeverity\r\n  displayPercentage(): string\r\n}\r\n\r\ninterface PriceImpactSeverity {\r\n  type: 'warning' | 'error'\r\n  color: string\r\n}\r\n\r\nexport function usePriceImpact(trade?: InterfaceTrade<Currency, Currency, TradeType>): PriceImpact | undefined {\r\n  const theme = useTheme()\r\n\r\n  return useMemo(() => {\r\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\r\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\r\n    const warningColor =\r\n      priceImpactWarning === 'error'\r\n        ? theme.accentCritical\r\n        : priceImpactWarning === 'warning'\r\n        ? theme.accentWarning\r\n        : undefined\r\n\r\n    return marketPriceImpact && priceImpactWarning && warningColor\r\n      ? {\r\n          priceImpactSeverity: {\r\n            type: priceImpactWarning,\r\n            color: warningColor,\r\n          },\r\n          displayPercentage: () => toHumanReadablePercent(marketPriceImpact),\r\n        }\r\n      : undefined\r\n  }, [theme.accentCritical, theme.accentWarning, trade])\r\n}\r\n\r\nfunction toHumanReadablePercent(priceImpact: Percent): string {\r\n  const sign = priceImpact.lessThan(0) ? '+' : ''\r\n  const exactFloat = (Number(priceImpact.numerator) / Number(priceImpact.denominator)) * 100\r\n  if (exactFloat < 0.005) {\r\n    return '0.00%'\r\n  }\r\n  const number = parseFloat(priceImpact.multiply(-1)?.toFixed(2))\r\n  return `${sign}${number}%`\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther, parseEther } from '@ethersproject/units'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport { sendAnalyticsEvent, TraceEvent } from '@uniswap/analytics'\r\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\r\nimport { Currency, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\r\nimport Column from 'components/Column'\r\nimport Loader from 'components/Icons/LoadingSpinner'\r\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\r\nimport Row from 'components/Row'\r\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\r\nimport { LoadingBubble } from 'components/Tokens/loading'\r\nimport { MouseoverTooltip } from 'components/Tooltip'\r\nimport { SupportedChainId } from 'constants/chains'\r\nimport { usePayWithAnyTokenEnabled } from 'featureFlags/flags/payWithAnyToken'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { AllowanceState } from 'hooks/usePermit2Allowance'\r\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\r\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { useBag } from 'nft/hooks/useBag'\r\nimport { useBagTotalEthPrice } from 'nft/hooks/useBagTotalEthPrice'\r\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\r\nimport { useFetchAssets } from 'nft/hooks/useFetchAssets'\r\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\r\nimport usePermit2Approval from 'nft/hooks/usePermit2Approval'\r\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\r\nimport { useSubscribeTransactionState } from 'nft/hooks/useSubscribeTransactionState'\r\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\r\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\r\nimport { BagStatus } from 'nft/types'\r\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\r\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\r\nimport { AlertTriangle, ChevronDown } from 'react-feather'\r\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\r\nimport styled, { useTheme } from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\nimport { switchChain } from 'utils/switchChain'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nconst FooterContainer = styled.div`\r\n  padding: 0px 12px;\r\n`\r\n\r\nconst Footer = styled.div`\r\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0px 16px 8px;\r\n  padding: 12px 0px;\r\n  border-bottom-left-radius: 12px;\r\n  border-bottom-right-radius: 12px;\r\n`\r\n\r\nconst FooterHeader = styled(Column)<{ usingPayWithAnyToken?: boolean }>`\r\n  padding-top: 8px;\r\n  padding-bottom: ${({ usingPayWithAnyToken }) => (usingPayWithAnyToken ? '16px' : '20px')};\r\n`\r\n\r\nconst CurrencyRow = styled(Row)`\r\n  justify-content: space-between;\r\n  align-items: start;\r\n  gap: 8px;\r\n`\r\n\r\nconst TotalColumn = styled(Column)`\r\n  text-align: end;\r\n  overflow-x: hidden;\r\n`\r\n\r\nconst WarningIcon = styled(AlertTriangle)`\r\n  width: 14px;\r\n  margin-right: 4px;\r\n  color: inherit;\r\n`\r\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\r\n  align-items: center;\r\n  color: ${({ $color }) => $color};\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 10px !important;\r\n  text-align: center;\r\n`\r\n\r\nconst HelperText = styled(ThemedText.Caption)<{ $color: string }>`\r\n  color: ${({ $color }) => $color};\r\n  display: flex;\r\n  justify-content: center;\r\n  text-align: center;\r\n  margin-bottom: 10px !important;\r\n`\r\n\r\nconst CurrencyInput = styled(Row)`\r\n  gap: 8px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst PayButton = styled.button<{ $backgroundColor: string; $color: string }>`\r\n  display: flex;\r\n  background: ${({ $backgroundColor }) => $backgroundColor};\r\n  color: ${({ $color }) => $color};\r\n  font-weight: 600;\r\n  line-height: 24px;\r\n  font-size: 16px;\r\n  gap: 16px;\r\n  justify-content: center;\r\n  border: none;\r\n  border-radius: 12px;\r\n  padding: 12px 0px;\r\n  cursor: pointer;\r\n  align-items: center;\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: auto;\r\n  }\r\n`\r\nconst FiatLoadingBubble = styled(LoadingBubble)`\r\n  border-radius: 4px;\r\n  width: 4rem;\r\n  height: 20px;\r\n  align-self: end;\r\n`\r\nconst PriceImpactContainer = styled(Row)`\r\n  align-items: center;\r\n  gap: 8px;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst PriceImpactRow = styled(Row)`\r\n  align-items: center;\r\n  gap: 8px;\r\n`\r\n\r\nconst ValueText = styled(ThemedText.BodyPrimary)`\r\n  line-height: 20px;\r\n  font-weight: 500;\r\n  overflow-x: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  scrollbar-width: none;\r\n\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\ninterface ActionButtonProps {\r\n  disabled?: boolean\r\n  onClick: () => void\r\n  backgroundColor: string\r\n  textColor: string\r\n}\r\n\r\nconst ActionButton = ({\r\n  disabled,\r\n  children,\r\n  onClick,\r\n  backgroundColor,\r\n  textColor,\r\n}: PropsWithChildren<ActionButtonProps>) => {\r\n  return (\r\n    <PayButton disabled={disabled} onClick={onClick} $backgroundColor={backgroundColor} $color={textColor}>\r\n      {children}\r\n    </PayButton>\r\n  )\r\n}\r\n\r\ninterface HelperTextProps {\r\n  color: string\r\n}\r\n\r\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\r\n  if (!children) {\r\n    return null\r\n  }\r\n  return (\r\n    <WarningText fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\r\n      <WarningIcon />\r\n      {children}\r\n    </WarningText>\r\n  )\r\n}\r\n\r\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\r\n  if (!children) {\r\n    return null\r\n  }\r\n  return (\r\n    <HelperText lineHeight=\"16px\" $color={color}>\r\n      {children}\r\n    </HelperText>\r\n  )\r\n}\r\n\r\nconst InputCurrencyValue = ({\r\n  usingPayWithAnyToken,\r\n  totalEthPrice,\r\n  activeCurrency,\r\n  tradeState,\r\n  trade,\r\n}: {\r\n  usingPayWithAnyToken: boolean\r\n  totalEthPrice: BigNumber\r\n  activeCurrency: Currency | undefined | null\r\n  tradeState: TradeState\r\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\r\n}) => {\r\n  if (!usingPayWithAnyToken) {\r\n    return (\r\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"500\">\r\n        {formatWeiToDecimal(totalEthPrice.toString())}\r\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\r\n      </ThemedText.BodyPrimary>\r\n    )\r\n  }\r\n\r\n  if (tradeState === TradeState.LOADING) {\r\n    return (\r\n      <ThemedText.BodyPrimary color=\"textTertiary\" lineHeight=\"20px\" fontWeight=\"500\">\r\n        <Trans>Fetching price...</Trans>\r\n      </ThemedText.BodyPrimary>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ValueText color={tradeState === TradeState.SYNCING ? 'textTertiary' : 'textPrimary'}>\r\n      {ethNumberStandardFormatter(trade?.inputAmount.toExact())}\r\n    </ValueText>\r\n  )\r\n}\r\n\r\nconst FiatValue = ({\r\n  usdcValue,\r\n  priceImpact,\r\n  tradeState,\r\n  usingPayWithAnyToken,\r\n}: {\r\n  usdcValue: CurrencyAmount<Token> | null\r\n  priceImpact: PriceImpact | undefined\r\n  tradeState: TradeState\r\n  usingPayWithAnyToken: boolean\r\n}) => {\r\n  if (!usdcValue) {\r\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\r\n      return null\r\n    }\r\n\r\n    return <FiatLoadingBubble />\r\n  }\r\n\r\n  return (\r\n    <PriceImpactContainer>\r\n      {priceImpact && (\r\n        <>\r\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\r\n            <PriceImpactRow>\r\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\r\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\r\n                (<Trans>{priceImpact.displayPercentage()}</Trans>)\r\n              </ThemedText.BodySmall>\r\n            </PriceImpactRow>\r\n          </MouseoverTooltip>\r\n        </>\r\n      )}\r\n      <ThemedText.BodySmall color=\"textTertiary\" lineHeight=\"20px\">\r\n        {`${ethNumberStandardFormatter(usdcValue?.toExact(), true)}`}\r\n      </ThemedText.BodySmall>\r\n    </PriceImpactContainer>\r\n  )\r\n}\r\n\r\ninterface BagFooterProps {\r\n  setModalIsOpen: (open: boolean) => void\r\n  eventProperties: Record<string, unknown>\r\n}\r\n\r\nconst PENDING_BAG_STATUSES = [\r\n  BagStatus.FETCHING_ROUTE,\r\n  BagStatus.CONFIRMING_IN_WALLET,\r\n  BagStatus.FETCHING_FINAL_ROUTE,\r\n  BagStatus.PROCESSING_TRANSACTION,\r\n]\r\n\r\nexport const BagFooter = ({ setModalIsOpen, eventProperties }: BagFooterProps) => {\r\n  const toggleWalletDrawer = useToggleAccountDrawer()\r\n  const theme = useTheme()\r\n  const { account, chainId, connector } = useWeb3React()\r\n  const connected = Boolean(account && chainId)\r\n  const totalEthPrice = useBagTotalEthPrice()\r\n  const shouldUsePayWithAnyToken = usePayWithAnyTokenEnabled()\r\n  const inputCurrency = useTokenInput((state) => state.inputCurrency)\r\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\r\n  const defaultCurrency = useCurrency('ETH')\r\n  const inputCurrencyBalance = useTokenBalance(\r\n    account ?? undefined,\r\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\r\n  )\r\n  const {\r\n    isLocked: bagIsLocked,\r\n    bagStatus,\r\n    setBagExpanded,\r\n    setBagStatus,\r\n  } = useBag(\r\n    ({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\r\n      isLocked,\r\n      bagStatus,\r\n      setBagExpanded,\r\n      setBagStatus,\r\n    }),\r\n    shallow\r\n  )\r\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\r\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\r\n  const activeCurrency = inputCurrency ?? defaultCurrency\r\n  const usingPayWithAnyToken = !!inputCurrency && shouldUsePayWithAnyToken && chainId === SupportedChainId.MAINNET\r\n\r\n  useSubscribeTransactionState(setModalIsOpen)\r\n  const fetchAssets = useFetchAssets()\r\n\r\n  const parsedOutputAmount = useMemo(() => {\r\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\r\n  }, [defaultCurrency, totalEthPrice])\r\n  const {\r\n    state: tradeState,\r\n    trade,\r\n    maximumAmountIn,\r\n    allowedSlippage,\r\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\r\n  const { allowance, isAllowancePending, isApprovalLoading, updateAllowance } = usePermit2Approval(\r\n    trade?.inputAmount.currency.isToken ? (trade?.inputAmount as CurrencyAmount<Token>) : undefined,\r\n    maximumAmountIn,\r\n    shouldUsePayWithAnyToken\r\n  )\r\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\r\n  const priceImpact = usePriceImpact(trade)\r\n\r\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\r\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\r\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\r\n\r\n  const { balance: balanceInEth } = useWalletBalance()\r\n  const sufficientBalance = useMemo(() => {\r\n    if (!connected || chainId !== SupportedChainId.MAINNET) {\r\n      return undefined\r\n    }\r\n\r\n    if (inputCurrency) {\r\n      const inputAmount = trade?.inputAmount\r\n\r\n      if (!inputCurrencyBalance || !inputAmount) {\r\n        return undefined\r\n      }\r\n\r\n      return !inputCurrencyBalance.lessThan(inputAmount)\r\n    }\r\n\r\n    return parseEther(balanceInEth).gte(totalEthPrice)\r\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\r\n\r\n  useEffect(() => {\r\n    setBagStatus(BagStatus.ADDING_TO_BAG)\r\n  }, [inputCurrency, setBagStatus])\r\n\r\n  const {\r\n    buttonText,\r\n    buttonTextColor,\r\n    disabled,\r\n    warningText,\r\n    warningTextColor,\r\n    helperText,\r\n    helperTextColor,\r\n    handleClick,\r\n    buttonColor,\r\n  } = useMemo(() => {\r\n    let handleClick: (() => void) | (() => Promise<void>) = fetchAssets\r\n    let buttonText = <Trans>Something went wrong</Trans>\r\n    let disabled = true\r\n    let warningText = undefined\r\n    let warningTextColor = theme.accentWarning\r\n    let helperText = undefined\r\n    let helperTextColor = theme.textSecondary\r\n    let buttonColor = theme.accentAction\r\n    let buttonTextColor = theme.accentTextLightPrimary\r\n\r\n    if (connected && chainId !== SupportedChainId.MAINNET) {\r\n      handleClick = () => switchChain(connector, SupportedChainId.MAINNET)\r\n      buttonText = <Trans>Switch networks</Trans>\r\n      disabled = false\r\n      warningText = <Trans>Wrong network</Trans>\r\n    } else if (sufficientBalance === false) {\r\n      buttonText = <Trans>Pay</Trans>\r\n      disabled = true\r\n      warningText = <Trans>Insufficient funds</Trans>\r\n    } else if (bagStatus === BagStatus.WARNING) {\r\n      warningText = <Trans>Something went wrong. Please try again.</Trans>\r\n    } else if (!connected) {\r\n      handleClick = () => {\r\n        toggleWalletDrawer()\r\n        setBagExpanded({ bagExpanded: false })\r\n      }\r\n      disabled = false\r\n      buttonText = <Trans>Connect wallet</Trans>\r\n    } else if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\r\n      disabled = true\r\n      buttonText = <Trans>Proceed in wallet</Trans>\r\n    } else if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\r\n      disabled = true\r\n      buttonText = <Trans>Transaction pending</Trans>\r\n    } else if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\r\n      disabled = true\r\n      buttonText = <Trans>Fetching Route</Trans>\r\n\r\n      if (tradeState === TradeState.INVALID) {\r\n        buttonText = <Trans>Pay</Trans>\r\n      }\r\n\r\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\r\n        buttonText = <Trans>Insufficient liquidity</Trans>\r\n        buttonColor = theme.backgroundInteractive\r\n        buttonTextColor = theme.textPrimary\r\n        helperText = <Trans>Insufficient pool liquidity to complete transaction</Trans>\r\n      }\r\n    } else if (allowance.state === AllowanceState.REQUIRED || allowance.state === AllowanceState.LOADING) {\r\n      handleClick = () => updateAllowance()\r\n      disabled = isAllowancePending || isApprovalLoading || allowance.state === AllowanceState.LOADING\r\n\r\n      if (allowance.state === AllowanceState.LOADING) {\r\n        buttonText = <Trans>Loading Allowance</Trans>\r\n      } else if (isAllowancePending) {\r\n        buttonText = <Trans>Approve in your wallet</Trans>\r\n      } else if (isApprovalLoading) {\r\n        buttonText = <Trans>Approval pending</Trans>\r\n      } else {\r\n        helperText = <Trans>An approval is needed to use this token. </Trans>\r\n        buttonText = <Trans>Approve</Trans>\r\n      }\r\n    } else if (bagStatus === BagStatus.CONFIRM_QUOTE) {\r\n      disabled = false\r\n      warningTextColor = theme.accentAction\r\n      warningText = <Trans>Price updated</Trans>\r\n      buttonText = <Trans>Pay</Trans>\r\n    } else if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\r\n      disabled = false\r\n      buttonColor = priceImpact.priceImpactSeverity.color\r\n      helperText = <Trans>Price impact warning</Trans>\r\n      helperTextColor = priceImpact.priceImpactSeverity.color\r\n      buttonText = <Trans>Pay Anyway</Trans>\r\n    } else if (sufficientBalance === true) {\r\n      disabled = false\r\n      buttonText = <Trans>Pay</Trans>\r\n      helperText = usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined\r\n    }\r\n\r\n    return {\r\n      buttonText,\r\n      buttonTextColor,\r\n      disabled,\r\n      warningText,\r\n      warningTextColor,\r\n      helperText,\r\n      helperTextColor,\r\n      handleClick,\r\n      buttonColor,\r\n    }\r\n  }, [\r\n    fetchAssets,\r\n    theme.accentWarning,\r\n    theme.textSecondary,\r\n    theme.accentAction,\r\n    theme.accentTextLightPrimary,\r\n    theme.backgroundInteractive,\r\n    theme.textPrimary,\r\n    connected,\r\n    chainId,\r\n    sufficientBalance,\r\n    bagStatus,\r\n    usingPayWithAnyToken,\r\n    tradeState,\r\n    allowance.state,\r\n    priceImpact,\r\n    connector,\r\n    toggleWalletDrawer,\r\n    setBagExpanded,\r\n    isAllowancePending,\r\n    isApprovalLoading,\r\n    updateAllowance,\r\n  ])\r\n\r\n  const traceEventProperties = {\r\n    usd_value: usdcValue?.toExact(),\r\n    using_erc20: !!inputCurrency,\r\n    ...eventProperties,\r\n  }\r\n\r\n  return (\r\n    <FooterContainer>\r\n      <Footer>\r\n        {shouldUsePayWithAnyToken && (\r\n          <FooterHeader gap=\"xs\" usingPayWithAnyToken={shouldUsePayWithAnyToken}>\r\n            <CurrencyRow>\r\n              <Column gap=\"xs\">\r\n                <ThemedText.SubHeaderSmall>\r\n                  <Trans>Pay with</Trans>\r\n                </ThemedText.SubHeaderSmall>\r\n                <CurrencyInput\r\n                  onClick={() => {\r\n                    if (!bagIsLocked) {\r\n                      setTokenSelectorOpen(true)\r\n                      sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\r\n                    }\r\n                  }}\r\n                >\r\n                  <CurrencyLogo currency={activeCurrency} size=\"24px\" />\r\n                  <ThemedText.HeadlineSmall fontWeight={500} lineHeight=\"24px\">\r\n                    {activeCurrency?.symbol}\r\n                  </ThemedText.HeadlineSmall>\r\n                  <ChevronDown size={20} color={theme.textSecondary} />\r\n                </CurrencyInput>\r\n              </Column>\r\n              <TotalColumn gap=\"xs\">\r\n                <ThemedText.SubHeaderSmall marginBottom=\"4px\">\r\n                  <Trans>Total</Trans>\r\n                </ThemedText.SubHeaderSmall>\r\n                <InputCurrencyValue\r\n                  usingPayWithAnyToken={usingPayWithAnyToken}\r\n                  totalEthPrice={totalEthPrice}\r\n                  activeCurrency={activeCurrency}\r\n                  tradeState={tradeState}\r\n                  trade={trade}\r\n                />\r\n              </TotalColumn>\r\n            </CurrencyRow>\r\n            <FiatValue\r\n              usdcValue={usdcValue}\r\n              priceImpact={priceImpact}\r\n              tradeState={tradeState}\r\n              usingPayWithAnyToken={usingPayWithAnyToken}\r\n            />\r\n          </FooterHeader>\r\n        )}\r\n        {!shouldUsePayWithAnyToken && (\r\n          <FooterHeader gap=\"xs\">\r\n            <Row justify=\"space-between\">\r\n              <div>\r\n                <ThemedText.HeadlineSmall>Total</ThemedText.HeadlineSmall>\r\n              </div>\r\n              <div>\r\n                <ThemedText.HeadlineSmall>\r\n                  {formatWeiToDecimal(totalEthPrice.toString())}\r\n                  &nbsp;{activeCurrency?.symbol ?? 'ETH'}\r\n                </ThemedText.HeadlineSmall>\r\n              </div>\r\n            </Row>\r\n            <FiatValue\r\n              usdcValue={usdcValue}\r\n              priceImpact={priceImpact}\r\n              tradeState={tradeState}\r\n              usingPayWithAnyToken={usingPayWithAnyToken}\r\n            />\r\n          </FooterHeader>\r\n        )}\r\n        <TraceEvent\r\n          events={[BrowserEvent.onClick]}\r\n          name={NFTEventName.NFT_BUY_BAG_PAY}\r\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\r\n          properties={{ ...traceEventProperties }}\r\n          shouldLogImpression={connected && !disabled}\r\n        >\r\n          <Warning color={warningTextColor}>{warningText}</Warning>\r\n          <Helper color={helperTextColor}>{helperText}</Helper>\r\n          <ActionButton\r\n            onClick={handleClick}\r\n            disabled={disabled || isPending}\r\n            backgroundColor={buttonColor}\r\n            textColor={buttonTextColor}\r\n          >\r\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\r\n            {buttonText}\r\n          </ActionButton>\r\n        </TraceEvent>\r\n      </Footer>\r\n      <CurrencySearchModal\r\n        isOpen={tokenSelectorOpen}\r\n        onDismiss={() => setTokenSelectorOpen(false)}\r\n        onCurrencySelect={(currency: Currency) => {\r\n          setInputCurrency(currency.isNative ? undefined : currency)\r\n          if (currency.isToken) {\r\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\r\n              token_address: currency.address,\r\n              token_symbol: currency.symbol,\r\n            })\r\n          }\r\n        }}\r\n        selectedCurrency={activeCurrency ?? undefined}\r\n        onlyShowCurrenciesWithBalance={true}\r\n      />\r\n    </FooterContainer>\r\n  )\r\n}\r\n","import { BagStatus, TxStateType } from 'nft/types'\r\nimport { useEffect, useRef } from 'react'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport { useBag } from './useBag'\r\nimport { useSendTransaction } from './useSendTransaction'\r\n\r\nexport function useSubscribeTransactionState(setModalIsOpen: (isOpen: boolean) => void) {\r\n  const transactionState = useSendTransaction((state) => state.state)\r\n  const setTransactionState = useSendTransaction((state) => state.setState)\r\n  const transactionStateRef = useRef(transactionState)\r\n  const { setBagStatus, setLocked: setBagLocked } = useBag(\r\n    ({ setBagExpanded, setBagStatus, setLocked }) => ({\r\n      setBagExpanded,\r\n      setBagStatus,\r\n      setLocked,\r\n    }),\r\n    shallow\r\n  )\r\n\r\n  useEffect(() => {\r\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\r\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\r\n      if (transactionStateRef.current === TxStateType.Invalid) {\r\n        setBagStatus(BagStatus.WARNING)\r\n      } else setBagStatus(BagStatus.CONFIRM_REVIEW)\r\n      setTransactionState(TxStateType.New)\r\n\r\n      setBagLocked(false)\r\n      setModalIsOpen(false)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current])\r\n}\r\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\r\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\r\nimport { useBestTrade } from 'hooks/useBestTrade'\r\nimport { useMemo } from 'react'\r\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\r\n\r\nexport default function useDerivedPayWithAnyTokenSwapInfo(\r\n  inputCurrency?: Currency,\r\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\r\n): {\r\n  state: TradeState\r\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\r\n  maximumAmountIn: CurrencyAmount<Token> | undefined\r\n  allowedSlippage: Percent\r\n} {\r\n  const { state, trade } = useBestTrade(TradeType.EXACT_OUTPUT, parsedOutputAmount, inputCurrency ?? undefined)\r\n  const allowedSlippage = useAutoSlippageTolerance(trade)\r\n  const maximumAmountIn = useMemo(() => {\r\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\r\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\r\n  }, [allowedSlippage, trade])\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      state,\r\n      trade,\r\n      maximumAmountIn,\r\n      allowedSlippage,\r\n    }\r\n  }, [allowedSlippage, maximumAmountIn, state, trade])\r\n}\r\n","import { sendAnalyticsEvent } from '@uniswap/analytics'\r\nimport { InterfaceEventName } from '@uniswap/analytics-events'\r\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\r\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\r\nimport { useCallback, useMemo, useState } from 'react'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport default function usePermit2Approval(\r\n  amount?: CurrencyAmount<Token>,\r\n  maximumAmount?: CurrencyAmount<Token>,\r\n  enabled?: boolean\r\n) {\r\n  const { chainId } = useWeb3React()\r\n\r\n  const allowance = usePermit2Allowance(\r\n    enabled ? maximumAmount ?? (amount?.currency.isToken ? (amount as CurrencyAmount<Token>) : undefined) : undefined,\r\n    enabled && chainId ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\r\n  )\r\n  const isApprovalLoading = allowance.state === AllowanceState.REQUIRED && allowance.isApprovalLoading\r\n  const [isAllowancePending, setIsAllowancePending] = useState(false)\r\n  const updateAllowance = useCallback(async () => {\r\n    invariant(allowance.state === AllowanceState.REQUIRED)\r\n    setIsAllowancePending(true)\r\n    try {\r\n      await allowance.approveAndPermit()\r\n      sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, {\r\n        chain_id: chainId,\r\n        token_symbol: maximumAmount?.currency.symbol,\r\n        token_address: maximumAmount?.currency.address,\r\n      })\r\n    } catch (e) {\r\n      console.error(e)\r\n    } finally {\r\n      setIsAllowancePending(false)\r\n    }\r\n  }, [allowance, chainId, maximumAmount?.currency.address, maximumAmount?.currency.symbol])\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      allowance,\r\n      isApprovalLoading,\r\n      isAllowancePending,\r\n      updateAllowance,\r\n    }\r\n  }, [allowance, isAllowancePending, isApprovalLoading, updateAllowance])\r\n}\r\n","import { Box } from 'nft/components/Box'\r\nimport styled, { keyframes } from 'styled-components/macro'\r\n\r\nconst dash = keyframes`\r\n  0% {\r\n    stroke-dashoffset: 1000;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n`\r\nconst Circle = styled.circle`\r\n  stroke-dasharray: 1000;\r\n  stroke-dashoffset: 0;\r\n  -webkit-animation: ${dash} linear;\r\n  animation: ${dash} linear;\r\n  animation-duration: 160s;\r\n  stroke: ${({ theme }) => theme.accentAction};\r\n`\r\nexport const TimedLoader = () => {\r\n  const stroke = 1.5\r\n\r\n  return (\r\n    <Box display=\"flex\" position=\"absolute\">\r\n      <svg height=\"18px\" width=\"18px\">\r\n        <Circle\r\n          strokeWidth={`${stroke}`}\r\n          strokeLinecap=\"round\"\r\n          style={{\r\n            transform: 'rotate(90deg)',\r\n            transformOrigin: '50% 50%',\r\n          }}\r\n          fill=\"transparent\"\r\n          r=\"8px\"\r\n          cx=\"9px\"\r\n          cy=\"9px\"\r\n        />\r\n      </svg>\r\n    </Box>\r\n  )\r\n}\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5fMWt1YXdjNyB7CiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7Cn0KLl8xa3Vhd2M5IHsKICBsaW5lLWhlaWdodDogMjRweDsKfQouXzFrdWF3Y2IgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var bagRow = '_1kuawc1 rgw6ez2qg rgw6ez2wv rgw6ez32w rgw6ez2jn rgw6ez52p rgw6ez4eq rgw6ez7y5 rgw6ez1lf rgw6ez7zp';\nexport var unavailableAssetsContainer = 'rgw6ez33o rgw6ez2kf rgw6ezok rgw6ezuz rgw6ez5gp rgw6ez4eq rgw6ez52p rgw6ez7yh rgw6ez87x rgw6ez5sd rgw6ez6op rgw6ez6cv rgw6ez1lf';\nexport var priceChangeColumn = 'rgw6ez33o rgw6ez2kf rgw6ezok rgw6ezuz rgw6ez5gp rgw6ez4ec rgw6ez52p rgw6ez7yh rgw6ez87x rgw6ez5sd rgw6ez6cv rgw6ez1lf rgw6ez7y5';\nexport var priceChangeRow = 'rgw6eze9 rgw6ezc4 rgw6ezg0 rgw6ez50j rgw6ez4dy';\nexport var bagRowImage = 'rgw6ez1aj rgw6ez1ii rgw6ez4xl rgw6ez7zh';\nexport var grayscaleImage = '_1kuawc7';\nexport var bagRowPrice = '_1kuawc9 rgw6ez4dy rgw6ezcb rgw6ezen rgw6ez4js';\nexport var assetName = '_1kuawcb rgw6ezcb rgw6ezeg rgw6ez8a9 rgw6ez4t4 rgw6ez4sx';\nexport var collectionName = 'rgw6eze9 rgw6ezc4 rgw6ezg0 rgw6ez8a9 rgw6ez4sx rgw6ez4t4 rgw6ez52v';\nexport var icon = 'rgw6ez4js';","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther } from '@ethersproject/units'\r\nimport clsx from 'clsx'\r\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\r\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Suspicious } from 'nft/components/card/icons'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport {\r\n  ChevronDownBagIcon,\r\n  ChevronUpBagIcon,\r\n  CircularCloseIcon,\r\n  CloseTimerIcon,\r\n  SquareArrowDownIcon,\r\n  SquareArrowUpIcon,\r\n  VerifiedIcon,\r\n} from 'nft/components/icons'\r\nimport { bodySmall } from 'nft/css/common.css'\r\nimport { loadingBlock } from 'nft/css/loading.css'\r\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\r\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\r\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components/macro'\r\n\r\nimport * as styles from './BagRow.css'\r\n\r\nexport const RemoveButton = styled(ThemeButton)`\r\n  border-radius: 12px;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  margin-left: 16px;\r\n  padding: 12px 14px;\r\n`\r\nconst ReviewButton = styled(ThemeButton)`\r\n  border-radius: 12px;\r\n  flex: 1 1 auto;\r\n  font-size: 14px;\r\n  padding: 8px;\r\n  width: 50%;\r\n`\r\nconst RemoveAssetOverlay = styled.div`\r\n  position: absolute;\r\n  display: block;\r\n  right: -11px;\r\n  top: -11px;\r\n  z-index: 1;\r\n  transition: 250ms;\r\n  width: 45px;\r\n  height: 45px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\r\n  <RemoveAssetOverlay onClick={onClick}>\r\n    <CircularCloseIcon />\r\n  </RemoveAssetOverlay>\r\n)\r\n\r\nconst NoContentContainer = () => (\r\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\r\n    <Box\r\n      position=\"absolute\"\r\n      textAlign=\"center\"\r\n      left=\"1/2\"\r\n      top=\"1/2\"\r\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\r\n      color=\"gray500\"\r\n      fontSize=\"12\"\r\n      fontWeight=\"normal\"\r\n    >\r\n      Image\r\n      <br />\r\n      not\r\n      <br />\r\n      available\r\n    </Box>\r\n  </Box>\r\n)\r\n\r\ninterface BagRowProps {\r\n  asset: UpdatedGenieAsset\r\n  usdPrice: number | undefined\r\n  removeAsset: (assets: GenieAsset[]) => void\r\n  showRemove?: boolean\r\n  grayscale?: boolean\r\n  isMobile: boolean\r\n}\r\n\r\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\r\n  const [loadedImage, setImageLoaded] = useState(false)\r\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\r\n\r\n  const [cardHovered, setCardHovered] = useState(false)\r\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\r\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\r\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\r\n\r\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\r\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\r\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\r\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\r\n    true\r\n  )\r\n\r\n  const handleRemoveClick = useCallback(\r\n    (e: MouseEvent<HTMLElement>) => {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      removeAsset([asset])\r\n    },\r\n    [asset, removeAsset]\r\n  )\r\n\r\n  return (\r\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\r\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n        <Box position=\"relative\" display=\"flex\">\r\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\r\n          {!noImageAvailable && (\r\n            <Box\r\n              as=\"img\"\r\n              src={asset.smallImageUrl}\r\n              alt={asset.name}\r\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\r\n              onLoad={() => {\r\n                setImageLoaded(true)\r\n              }}\r\n              onError={() => {\r\n                setNoImageAvailable(true)\r\n              }}\r\n              visibility={loadedImage ? 'visible' : 'hidden'}\r\n            />\r\n          )}\r\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\r\n          {noImageAvailable && <NoContentContainer />}\r\n        </Box>\r\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\r\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\r\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\r\n            {asset.susFlag && <Suspicious />}\r\n          </Row>\r\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\r\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\r\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\r\n          </Row>\r\n        </Column>\r\n        {showRemoveButton && (\r\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\r\n            Remove\r\n          </RemoveButton>\r\n        )}\r\n        {(!showRemoveButton || isMobile) && (\r\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\r\n            <Box className={styles.bagRowPrice}>\r\n              {assetEthPriceFormatted}\r\n              &nbsp;ETH\r\n            </Box>\r\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\r\n          </Column>\r\n        )}\r\n      </Row>\r\n    </Link>\r\n  )\r\n}\r\n\r\ninterface PriceChangeBagRowProps {\r\n  asset: UpdatedGenieAsset\r\n  usdPrice: number | undefined\r\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\r\n  top?: boolean\r\n  isMobile: boolean\r\n}\r\n\r\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\r\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\r\n  const handleRemove = useCallback(\r\n    (e: MouseEvent<HTMLButtonElement>) => {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      const toKeep = false\r\n      markAssetAsReviewed(asset, toKeep)\r\n    },\r\n    [asset, markAssetAsReviewed]\r\n  )\r\n  const handleKeep = useCallback(\r\n    (e: MouseEvent<HTMLButtonElement>) => {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      const toKeep = true\r\n      markAssetAsReviewed(asset, toKeep)\r\n    },\r\n    [asset, markAssetAsReviewed]\r\n  )\r\n  return (\r\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\r\n      <Row className={styles.priceChangeRow}>\r\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\r\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\r\n          asset.priceInfo.ETHPrice\r\n        )} ETH`}</Box>\r\n      </Row>\r\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\r\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\r\n      </Box>\r\n      <Row gap=\"8\" justifyContent=\"space-between\">\r\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\r\n          Remove\r\n        </ReviewButton>\r\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\r\n          Keep\r\n        </ReviewButton>\r\n      </Row>\r\n    </Column>\r\n  )\r\n}\r\n\r\ninterface UnavailableAssetsHeaderRowProps {\r\n  assets?: UpdatedGenieAsset[]\r\n  usdPrice: number | undefined\r\n  clearUnavailableAssets: () => void\r\n  didOpenUnavailableAssets: boolean\r\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\r\n  isMobile: boolean\r\n}\r\n\r\ninterface UnavailableAssetsPreviewProps {\r\n  assets: UpdatedGenieAsset[]\r\n}\r\n\r\nconst ASSET_PREVIEW_WIDTH = 32\r\nconst ASSET_PREVIEW_OFFSET = 20\r\n\r\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\r\n  <Column\r\n    display=\"grid\"\r\n    style={{\r\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\r\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\r\n    }}\r\n  >\r\n    {assets.map((asset, index) => (\r\n      <Box\r\n        key={`${asset.address}-${asset.tokenId}`}\r\n        as=\"img\"\r\n        src={asset.smallImageUrl}\r\n        width=\"32\"\r\n        height=\"32\"\r\n        borderStyle=\"solid\"\r\n        borderWidth=\"1px\"\r\n        borderColor=\"backgroundSurface\"\r\n        borderRadius=\"4\"\r\n        style={{ zIndex: index }}\r\n        className={styles.grayscaleImage}\r\n      />\r\n    ))}\r\n  </Column>\r\n)\r\n\r\nexport const UnavailableAssetsHeaderRow = ({\r\n  assets,\r\n  usdPrice,\r\n  clearUnavailableAssets,\r\n  didOpenUnavailableAssets,\r\n  setDidOpenUnavailableAssets,\r\n  isMobile,\r\n}: UnavailableAssetsHeaderRowProps) => {\r\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\r\n  const timerLimit = 8\r\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\r\n\r\n  useEffect(() => {\r\n    if (!timeLeft) {\r\n      if (!didOpenUnavailableAssets) {\r\n        clearUnavailableAssets()\r\n        setDidOpenUnavailableAssets(false)\r\n      }\r\n      return\r\n    }\r\n\r\n    const intervalId = setInterval(() => {\r\n      setTimeLeft(timeLeft - 1)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(intervalId)\r\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\r\n\r\n  if (!assets || assets.length === 0) return null\r\n\r\n  const moreThanOneUnavailable = assets.length > 1\r\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\r\n\r\n  return (\r\n    <Column className={styles.unavailableAssetsContainer}>\r\n      <Column>\r\n        <Row\r\n          justifyContent=\"space-between\"\r\n          marginBottom={isShowingAssets ? '12' : '0'}\r\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\r\n          onClick={() => {\r\n            if (moreThanOneUnavailable) {\r\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\r\n              toggleOpen()\r\n            }\r\n          }}\r\n        >\r\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\r\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\r\n            No longer available\r\n          </Row>\r\n          {moreThanOneUnavailable && (\r\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\r\n          )}\r\n          {!didOpenUnavailableAssets && (\r\n            <Row\r\n              position=\"relative\"\r\n              width=\"20\"\r\n              height=\"20\"\r\n              color=\"textPrimary\"\r\n              justifyContent=\"center\"\r\n              cursor=\"pointer\"\r\n              onClick={clearUnavailableAssets}\r\n            >\r\n              <TimedLoader />\r\n              <CloseTimerIcon />\r\n            </Row>\r\n          )}\r\n        </Row>\r\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\r\n          {isShowingAssets &&\r\n            assets.map((asset) => (\r\n              <BagRow\r\n                key={asset.id}\r\n                asset={asset}\r\n                usdPrice={usdPrice}\r\n                removeAsset={() => undefined}\r\n                grayscale\r\n                isMobile={isMobile}\r\n              />\r\n            ))}\r\n        </Column>\r\n      </Column>\r\n    </Column>\r\n  )\r\n}\r\n","import { sendAnalyticsEvent, Trace } from '@uniswap/analytics'\r\nimport { NFTEventName } from '@uniswap/analytics-events'\r\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\r\nimport { Column } from 'nft/components/Flex'\r\nimport { useBag, useIsMobile } from 'nft/hooks'\r\nimport { BagItemStatus, BagStatus } from 'nft/types'\r\nimport { fetchPrice, formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useQuery } from 'react-query'\r\n\r\nexport const BagContent = () => {\r\n  const bagStatus = useBag((s) => s.bagStatus)\r\n  const setBagStatus = useBag((s) => s.setBagStatus)\r\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\r\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\r\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\r\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\r\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\r\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\r\n\r\n  const isMobile = useIsMobile()\r\n\r\n  const itemsInBag = useMemo(() => {\r\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\r\n  }, [uncheckedItemsInBag])\r\n\r\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\r\n\r\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\r\n    const unchangedAssets = itemsInBag\r\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\r\n      .map((item) => item.asset)\r\n    const priceChangedAssets = itemsInBag\r\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\r\n      .map((item) => item.asset)\r\n    const unavailableAssets = itemsInBag\r\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\r\n      .map((item) => item.asset)\r\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\r\n\r\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\r\n  }, [itemsInBag])\r\n\r\n  useEffect(() => {\r\n    const hasAssetsInReview = priceChangedAssets.length > 0\r\n    const hasAssets = itemsInBag.length > 0\r\n\r\n    if (hasAssetsInReview)\r\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\r\n        usd_value: fetchedPriceData,\r\n        bag_quantity: itemsInBag,\r\n        ...formatAssetEventProperties(priceChangedAssets),\r\n      })\r\n\r\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\r\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\r\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\r\n    }\r\n\r\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\r\n      setBagStatus(BagStatus.ADDING_TO_BAG)\r\n    }\r\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, fetchedPriceData])\r\n\r\n  return (\r\n    <>\r\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\r\n        {unavailableAssets.length > 0 && (\r\n          <Trace\r\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\r\n            properties={{\r\n              usd_value: fetchedPriceData,\r\n              bag_quantity: itemsInBag.length,\r\n              ...formatAssetEventProperties(unavailableAssets),\r\n            }}\r\n            shouldLogImpression\r\n          >\r\n            <UnavailableAssetsHeaderRow\r\n              assets={unavailableAssets}\r\n              usdPrice={fetchedPriceData}\r\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\r\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\r\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\r\n              isMobile={isMobile}\r\n            />\r\n          </Trace>\r\n        )}\r\n        {priceChangedAssets.map((asset, index) => (\r\n          <PriceChangeBagRow\r\n            key={asset.id}\r\n            asset={asset}\r\n            usdPrice={fetchedPriceData}\r\n            markAssetAsReviewed={markAssetAsReviewed}\r\n            top={index === 0 && unavailableAssets.length === 0}\r\n            isMobile={isMobile}\r\n          />\r\n        ))}\r\n      </Column>\r\n      <Column>\r\n        {unchangedAssets\r\n          .slice(0)\r\n          .reverse()\r\n          .map((asset) => (\r\n            <BagRow\r\n              key={asset.id}\r\n              asset={asset}\r\n              usdPrice={fetchedPriceData}\r\n              removeAsset={removeAssetsFromBag}\r\n              showRemove={true}\r\n              isMobile={isMobile}\r\n            />\r\n          ))}\r\n      </Column>\r\n    </>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { OpacityHoverState } from 'components/Common'\r\nimport { BagCloseIcon } from 'nft/components/icons'\r\nimport { useMemo } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { ButtonText, ThemedText } from 'theme'\r\n\r\nconst ClearButton = styled(ButtonText)`\r\n  color: ${({ theme }) => theme.textSecondary};\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n\r\n  :active {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nconst IconWrapper = styled.button`\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border-radius: 8px;\r\n  border: none;\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  margin-left: auto;\r\n  padding: 2px;\r\n  opacity: 1;\r\n\r\n  ${OpacityHoverState}\r\n`\r\nconst CounterDot = styled.div<{ sizing: string }>`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.accentAction};\r\n  border-radius: 100px;\r\n  font-weight: bold;\r\n  color: ${({ theme }) => theme.accentTextLightPrimary};\r\n  display: flex;\r\n  font-size: 10px;\r\n  justify-content: center;\r\n  min-width: ${({ sizing }) => sizing};\r\n  min-height: ${({ sizing }) => sizing};\r\n  padding: 4px 6px;\r\n`\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 8px;\r\n  justify-content: flex-start;\r\n  margin: 16px 28px;\r\n  text-align: center;\r\n`\r\ninterface BagHeaderProps {\r\n  numberOfAssets: number\r\n  closeBag: () => void\r\n  resetFlow: () => void\r\n  isProfilePage: boolean\r\n}\r\n\r\nconst BASE_SIZING = 14\r\nconst INCREMENTAL_SIZING = 6\r\n\r\nconst getCircleSizing = (numberOfAssets: number): string => {\r\n  const numberOfCharacters = numberOfAssets.toString().length\r\n\r\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\r\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\r\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\r\n}\r\n\r\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\r\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\r\n      {numberOfAssets > 0 && (\r\n        <>\r\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\r\n          <ClearButton onClick={resetFlow}>\r\n            <Trans>Clear all</Trans>\r\n          </ClearButton>\r\n        </>\r\n      )}\r\n      <IconWrapper onClick={closeBag}>\r\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\r\n      </IconWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\r\nimport { Center, Column } from 'nft/components/Flex'\r\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\r\nimport { subhead } from 'nft/css/common.css'\r\nimport { themeVars } from 'nft/css/sprinkles.css'\r\nimport styled from 'styled-components/macro'\r\n\r\nconst StyledColumn = styled(Column)`\r\n  gap: 12px;\r\n  margin-top: 68px;\r\n`\r\n\r\nconst EmptyState = () => {\r\n  const isProfilePage = useIsNftProfilePage()\r\n\r\n  return (\r\n    <StyledColumn>\r\n      <Center>\r\n        {isProfilePage ? (\r\n          <LargeTagIcon color={themeVars.colors.textTertiary} />\r\n        ) : (\r\n          <BagIcon color={themeVars.colors.textTertiary} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\r\n        )}\r\n      </Center>\r\n      {isProfilePage ? (\r\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\r\n          No NFTs selected\r\n        </Center>\r\n      ) : (\r\n        <Column gap=\"16\">\r\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\r\n            Your bag is empty\r\n          </Center>\r\n          <Center fontSize=\"12\" fontWeight=\"normal\" color=\"textSecondary\" style={{ lineHeight: '16px' }}>\r\n            Selected NFTs will appear here\r\n          </Center>\r\n        </Column>\r\n      )}\r\n    </StyledColumn>\r\n  )\r\n}\r\n\r\nexport default EmptyState\r\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\r\nimport { WalletAsset } from 'nft/types'\r\nimport { useState } from 'react'\r\n\r\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\r\nimport * as styles from '../BagRow.css'\r\n\r\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\r\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\r\n  const isMobile = useIsMobile()\r\n  const [hovered, setHovered] = useState(false)\r\n  const handleHover = () => setHovered(!hovered)\r\n\r\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    removeAsset(asset)\r\n  }\r\n\r\n  return (\r\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\r\n      <Box position=\"relative\" display=\"flex\">\r\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\r\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\r\n      </Box>\r\n      <Column overflow=\"hidden\" width=\"full\" color=\"textPrimary\">\r\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\r\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\r\n        </Row>\r\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\r\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\r\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\r\n        </Row>\r\n      </Column>\r\n      {hovered && !isMobile && (\r\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\r\n          Remove\r\n        </RemoveButton>\r\n      )}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ProfileAssetRow\r\n","import { Column } from 'nft/components/Flex'\r\nimport { useSellAsset } from 'nft/hooks'\r\n\r\nimport ProfileAssetRow from './ProfileAssetRow'\r\n\r\nexport const ProfileBagContent = () => {\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  return (\r\n    <Column>\r\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\r\n    </Column>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\r\nimport { NFTEventName } from '@uniswap/analytics-events'\r\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\r\nimport { BagFooter } from 'nft/components/bag/BagFooter'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Portal } from 'nft/components/common/Portal'\r\nimport { Column } from 'nft/components/Flex'\r\nimport { Overlay } from 'nft/components/modals/Overlay'\r\nimport { useBag, useIsMobile, useProfilePageState, useSellAsset } from 'nft/hooks'\r\nimport { BagStatus, ProfilePageStateType } from 'nft/types'\r\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport * as styles from './Bag.css'\r\nimport { BagContent } from './BagContent'\r\nimport { BagHeader } from './BagHeader'\r\nimport EmptyState from './EmptyContent'\r\nimport { ProfileBagContent } from './profile/ProfileBagContent'\r\n\r\nexport const BAG_WIDTH = 320\r\nexport const XXXL_BAG_WIDTH = 360\r\n\r\ninterface SeparatorProps {\r\n  top?: boolean\r\n  show?: boolean\r\n}\r\n\r\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\r\n  position: fixed;\r\n  display: flex;\r\n  flex-direction: column;\r\n  top: 88px;\r\n  right: 20px;\r\n  width: ${BAG_WIDTH}px;\r\n  height: calc(100vh - 108px);\r\n  background: ${({ theme }) => theme.backgroundSurface};\r\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  border-radius: 16px;\r\n  box-shadow: ${({ theme }) => theme.shallowShadow};\r\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\r\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    right: 0px;\r\n    top: 0px;\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 0px;\r\n    border: none;\r\n  }\r\n\r\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\r\n    width: ${XXXL_BAG_WIDTH}px;\r\n  }\r\n`\r\n\r\nconst DetailsPageBackground = styled.div`\r\n  position: fixed;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  top: 0px;\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst ContinueButton = styled.div`\r\n  background: ${({ theme }) => theme.accentAction};\r\n  color: ${({ theme }) => theme.accentTextLightPrimary};\r\n  margin: 32px 28px 16px;\r\n  padding: 10px 0px;\r\n  border-radius: 12px;\r\n  text-align: center;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  line-height: 20px;\r\n  cursor: pointer;\r\n  transition: ${({ theme }) => theme.transition.duration.medium};\r\n\r\n  :hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n`\r\n\r\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\r\n  <Box\r\n    marginX=\"24\"\r\n    borderWidth=\"1px\"\r\n    borderStyle=\"solid\"\r\n    borderColor=\"transparent\"\r\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\r\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\r\n    opacity={show ? '1' : '0'}\r\n    transition=\"250\"\r\n  />\r\n)\r\n\r\nconst Bag = () => {\r\n  const { resetSellAssets, sellAssets } = useSellAsset(\r\n    ({ reset, sellAssets }) => ({\r\n      resetSellAssets: reset,\r\n      sellAssets,\r\n    }),\r\n    shallow\r\n  )\r\n\r\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\r\n\r\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag(\r\n    (state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }),\r\n    shallow\r\n  )\r\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\r\n\r\n  const isProfilePage = useIsNftProfilePage()\r\n  const isDetailsPage = useIsNftDetailsPage()\r\n  const isNFTPage = useIsNftPage()\r\n  const isMobile = useIsMobile()\r\n\r\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\r\n\r\n  const [isModalOpen, setModalIsOpen] = useState(false)\r\n  const [userCanScroll, setUserCanScroll] = useState(false)\r\n  const [scrollProgress, setScrollProgress] = useState(0)\r\n  const scrollRef = (node: HTMLDivElement) => {\r\n    if (node !== null) {\r\n      const canScroll = node.scrollHeight > node.clientHeight\r\n      canScroll !== userCanScroll && setUserCanScroll(canScroll)\r\n    }\r\n  }\r\n\r\n  const handleCloseBag = useCallback(() => {\r\n    setBagExpanded({ bagExpanded: false, manualClose: true })\r\n  }, [setBagExpanded])\r\n\r\n  useEffect(() => {\r\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\r\n  }, [bagIsLocked, isModalOpen])\r\n\r\n  const hasAssetsToShow = itemsInBag.length > 0\r\n\r\n  const scrollHandler = (event: React.UIEvent<HTMLDivElement>) => {\r\n    const scrollTop = event.currentTarget.scrollTop\r\n    const containerHeight = event.currentTarget.clientHeight\r\n    const scrollHeight = event.currentTarget.scrollHeight\r\n\r\n    setScrollProgress(scrollTop ? ((scrollTop + containerHeight) / scrollHeight) * 100 : 0)\r\n  }\r\n\r\n  const isBuyingAssets = itemsInBag.length > 0\r\n  const isSellingAssets = sellAssets.length > 0\r\n\r\n  const shouldRenderEmptyState = Boolean(\r\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\r\n  )\r\n\r\n  const eventProperties = useMemo(\r\n    () => ({\r\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\r\n    }),\r\n    [itemsInBag]\r\n  )\r\n\r\n  if (!bagExpanded || !isNFTPage) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Portal>\r\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\r\n        <BagHeader\r\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\r\n          closeBag={handleCloseBag}\r\n          resetFlow={isProfilePage ? resetSellAssets : reset}\r\n          isProfilePage={isProfilePage}\r\n        />\r\n        {shouldRenderEmptyState && <EmptyState />}\r\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\r\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\r\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\r\n        </Column>\r\n        {hasAssetsToShow && !isProfilePage && (\r\n          <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />\r\n        )}\r\n        {isSellingAssets && isProfilePage && (\r\n          <ContinueButton\r\n            onClick={() => {\r\n              toggleBag()\r\n              setProfilePageState(ProfilePageStateType.LISTING)\r\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\r\n                list_quantity: sellAssets.length,\r\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\r\n                token_ids: sellAssets.map((asset) => asset.tokenId),\r\n              })\r\n            }}\r\n          >\r\n            <Trans>Continue</Trans>\r\n          </ContinueButton>\r\n        )}\r\n      </BagContainer>\r\n\r\n      {isDetailsPage ? (\r\n        <DetailsPageBackground onClick={toggleBag} />\r\n      ) : (\r\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\r\n      )}\r\n    </Portal>\r\n  )\r\n}\r\n\r\nexport default Bag\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2r8 rgw6ez2xn rgw6ez29c rgw6ez8bl';\nexport var bagContainer = '_1jcz50r3 rgw6ez4wm rgw6ez3y0 rgw6ez42i rgw6ez1dg rgw6ez1lf rgw6ez3rl rgw6ez5dj rgw6ez7yp rgw6ez5p7 rgw6ez87x rgw6ez52p';","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther } from '@ethersproject/units'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { BagItemStatus } from 'nft/types'\r\nimport { useMemo } from 'react'\r\n\r\nimport { useBag } from './useBag'\r\n\r\nexport function useBagTotalEthPrice(): BigNumber {\r\n  const itemsInBag = useBag((state) => state.itemsInBag)\r\n\r\n  return useMemo(() => {\r\n    const totalEthPrice = itemsInBag.reduce(\r\n      (total, item) =>\r\n        item.status !== BagItemStatus.UNAVAILABLE\r\n          ? total.add(\r\n              BigNumber.from(\r\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\r\n              )\r\n            )\r\n          : total,\r\n      BigNumber.from(0)\r\n    )\r\n\r\n    return totalEthPrice\r\n  }, [itemsInBag])\r\n}\r\n\r\nexport function useBagTotalUsdPrice(): string | undefined {\r\n  const totalEthPrice = useBagTotalEthPrice()\r\n  const defaultCurrency = useCurrency('ETH')\r\n\r\n  const parsedOutputAmount = useMemo(() => {\r\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\r\n  }, [defaultCurrency, totalEthPrice])\r\n\r\n  const usdcValue = useStablecoinValue(parsedOutputAmount)\r\n\r\n  return useMemo(() => {\r\n    return usdcValue?.toExact()\r\n  }, [usdcValue])\r\n}\r\n"],"sourceRoot":""}